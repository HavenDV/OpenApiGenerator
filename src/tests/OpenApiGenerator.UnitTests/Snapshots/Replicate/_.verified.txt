[
  {
    Id: prediction_request,
    AddTypeName: false,
    Parents: null,
    TargetFramework: netstandard2.0,
    Namespace: G,
    GenerateSuperTypeForJsonSerializerContext: false,
    Properties: [
      {
        Id: input,
        Name: Input,
        Type: {
          CSharpType: PredictionRequestInput,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The model's input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the "API" tab on the model you are running or [get the model version](#models.versions.get) and look at its `openapi_schema` property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes `prompt` as an input.

Files should be passed as HTTP URLs or data URLs.

Use an HTTP URL when:

- you have a large file &gt; 256kb
- you want to be able to use the file multiple times
- you want your prediction metadata to be associable with your input files

Use a data URL when:

- you have a small file &lt;= 256kb
- you don't want to upload and host the file somewhere
- you don't need to use the file again (Replicate will not store it)
,
        ParameterName: input,
        ArgumentName: input
      },
      {
        Id: stream,
        Name: Stream,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Request a URL to receive streaming output using [server-sent events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events).

If the requested model version supports streaming, the returned prediction will have a `stream` entry in its `urls` property with an HTTPS URL that you can use to construct an [`EventSource`](https://developer.mozilla.org/en-US/docs/Web/API/EventSource).
,
        ParameterName: stream,
        ArgumentName: stream
      },
      {
        Id: webhook,
        Name: Webhook,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
An HTTPS URL for receiving a webhook when the prediction has new output. The webhook will be a POST request where the request body is the same as the response body of the [get prediction](#predictions.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.
,
        ParameterName: webhook,
        ArgumentName: webhook
      },
      {
        Id: webhook_events_filter,
        Name: WebhookEventsFilter,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
By default, we will send requests to your webhook URL whenever there are new outputs or the prediction has finished. You can change which events trigger webhook requests by specifying `webhook_events_filter` in the prediction request:

- `start`: immediately on prediction start
- `output`: each time a prediction generates an output (note that predictions can generate multiple outputs)
- `logs`: each time log output is generated by a prediction
- `completed`: when the prediction reaches a terminal state (succeeded/canceled/failed)

For example, if you only wanted requests to be sent at the start and end of the prediction, you would provide:

```json
{
  "input": {
    "text": "Alice"
  },
  "webhook": "https://example.com/my-webhook",
  "webhook_events_filter": ["start", "completed"]
}
```

Requests for event types `output` and `logs` will be sent at most once every 500ms. If you request `start` and `completed` webhooks, then they'll always be sent regardless of throttling.
,
        ParameterName: webhookEventsFilter,
        ArgumentName: webhookEventsFilter
      }
    ],
    Summary: ,
    AdditionalModels: null,
    Enumerations: null,
    Name: PredictionRequest,
    ClassName: PredictionRequest,
    ExternalClassName: PredictionRequest,
    FileNameWithoutExtension: G.Models.PredictionRequest
  },
  {
    Id: input,
    AddTypeName: false,
    Parents: null,
    TargetFramework: netstandard2.0,
    Namespace: G,
    GenerateSuperTypeForJsonSerializerContext: false,
    Properties: null,
    Summary:
The model's input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the "API" tab on the model you are running or [get the model version](#models.versions.get) and look at its `openapi_schema` property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes `prompt` as an input.

Files should be passed as HTTP URLs or data URLs.

Use an HTTP URL when:

- you have a large file &gt; 256kb
- you want to be able to use the file multiple times
- you want your prediction metadata to be associable with your input files

Use a data URL when:

- you have a small file &lt;= 256kb
- you don't want to upload and host the file somewhere
- you don't need to use the file again (Replicate will not store it)
,
    AdditionalModels: null,
    Enumerations: null,
    Name: Input,
    ClassName: Input,
    ExternalClassName: Input,
    FileNameWithoutExtension: G.Models.Input
  },
  {
    Id: webhook_events_filter,
    AddTypeName: false,
    Parents: null,
    TargetFramework: netstandard2.0,
    Namespace: G,
    Style: Enumeration,
    GenerateSuperTypeForJsonSerializerContext: false,
    Properties: [
      {
        Id: start,
        Name: Start,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: start,
        ArgumentName: start
      },
      {
        Id: output,
        Name: Output,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: output,
        ArgumentName: output
      },
      {
        Id: logs,
        Name: Logs,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: logs,
        ArgumentName: logs
      },
      {
        Id: completed,
        Name: Completed,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: completed,
        ArgumentName: completed
      }
    ],
    Summary: ,
    AdditionalModels: null,
    Enumerations: null,
    Name: WebhookEventsFilter,
    ClassName: WebhookEventsFilter,
    ExternalClassName: WebhookEventsFilter,
    FileNameWithoutExtension: G.Models.WebhookEventsFilter
  },
  {
    Id: training_request,
    AddTypeName: false,
    Parents: null,
    TargetFramework: netstandard2.0,
    Namespace: G,
    GenerateSuperTypeForJsonSerializerContext: false,
    Properties: [
      {
        Id: destination,
        Name: Destination,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
A string representing the desired model to push to in the format `{destination_model_owner}/{destination_model_name}`. This should be an existing model owned by the user or organization making the API request. If the destination is invalid, the server will return an appropriate 4XX response.
,
        ParameterName: destination,
        ArgumentName: destination
      },
      {
        Id: input,
        Name: Input,
        Type: {
          CSharpType: TrainingRequestInput,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
An object containing inputs to the Cog model's `train()` function.
,
        ParameterName: input,
        ArgumentName: input
      },
      {
        Id: webhook,
        Name: Webhook,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An HTTPS URL for receiving a webhook when the training completes. The webhook will be a POST request where the request body is the same as the response body of the [get training](#trainings.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.,
        ParameterName: webhook,
        ArgumentName: webhook
      },
      {
        Id: webhook_events_filter,
        Name: WebhookEventsFilter,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
By default, we will send requests to your webhook URL whenever there are new outputs or the training has finished. You can change which events trigger webhook requests by specifying `webhook_events_filter` in the training request:

- `start`: immediately on training start
- `output`: each time a training generates an output (note that trainings can generate multiple outputs)
- `logs`: each time log output is generated by a training
- `completed`: when the training reaches a terminal state (succeeded/canceled/failed)

For example, if you only wanted requests to be sent at the start and end of the training, you would provide:

```json
{
  "destination": "my-organization/my-model",
  "input": {
    "text": "Alice"
  },
  "webhook": "https://example.com/my-webhook",
  "webhook_events_filter": ["start", "completed"]
}
```

Requests for event types `output` and `logs` will be sent at most once every 500ms. If you request `start` and `completed` webhooks, then they'll always be sent regardless of throttling.
,
        ParameterName: webhookEventsFilter,
        ArgumentName: webhookEventsFilter
      }
    ],
    Summary: ,
    AdditionalModels: null,
    Enumerations: null,
    Name: TrainingRequest,
    ClassName: TrainingRequest,
    ExternalClassName: TrainingRequest,
    FileNameWithoutExtension: G.Models.TrainingRequest
  },
  {
    Id: input,
    AddTypeName: false,
    Parents: null,
    TargetFramework: netstandard2.0,
    Namespace: G,
    GenerateSuperTypeForJsonSerializerContext: false,
    Properties: null,
    Summary:
An object containing inputs to the Cog model's `train()` function.
,
    AdditionalModels: null,
    Enumerations: null,
    Name: Input,
    ClassName: Input,
    ExternalClassName: Input,
    FileNameWithoutExtension: G.Models.Input
  },
  {
    Id: webhook_events_filter,
    AddTypeName: false,
    Parents: null,
    TargetFramework: netstandard2.0,
    Namespace: G,
    Style: Enumeration,
    GenerateSuperTypeForJsonSerializerContext: false,
    Properties: [
      {
        Id: start,
        Name: Start,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: start,
        ArgumentName: start
      },
      {
        Id: output,
        Name: Output,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: output,
        ArgumentName: output
      },
      {
        Id: logs,
        Name: Logs,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: logs,
        ArgumentName: logs
      },
      {
        Id: completed,
        Name: Completed,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: completed,
        ArgumentName: completed
      }
    ],
    Summary: ,
    AdditionalModels: null,
    Enumerations: null,
    Name: WebhookEventsFilter,
    ClassName: WebhookEventsFilter,
    ExternalClassName: WebhookEventsFilter,
    FileNameWithoutExtension: G.Models.WebhookEventsFilter
  },
  {
    Id: version_prediction_request,
    AddTypeName: false,
    Parents: null,
    TargetFramework: netstandard2.0,
    Namespace: G,
    GenerateSuperTypeForJsonSerializerContext: false,
    Properties: [
      {
        Id: input,
        Name: Input,
        Type: {
          CSharpType: VersionPredictionRequestInput,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The model's input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the "API" tab on the model you are running or [get the model version](#models.versions.get) and look at its `openapi_schema` property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes `prompt` as an input.

Files should be passed as HTTP URLs or data URLs.

Use an HTTP URL when:

- you have a large file &gt; 256kb
- you want to be able to use the file multiple times
- you want your prediction metadata to be associable with your input files

Use a data URL when:

- you have a small file &lt;= 256kb
- you don't want to upload and host the file somewhere
- you don't need to use the file again (Replicate will not store it)
,
        ParameterName: input,
        ArgumentName: input
      },
      {
        Id: stream,
        Name: Stream,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Request a URL to receive streaming output using [server-sent events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events).

If the requested model version supports streaming, the returned prediction will have a `stream` entry in its `urls` property with an HTTPS URL that you can use to construct an [`EventSource`](https://developer.mozilla.org/en-US/docs/Web/API/EventSource).
,
        ParameterName: stream,
        ArgumentName: stream
      },
      {
        Id: version,
        Name: Version,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The ID of the model version that you want to run.,
        ParameterName: version,
        ArgumentName: version
      },
      {
        Id: webhook,
        Name: Webhook,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
An HTTPS URL for receiving a webhook when the prediction has new output. The webhook will be a POST request where the request body is the same as the response body of the [get prediction](#predictions.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.
,
        ParameterName: webhook,
        ArgumentName: webhook
      },
      {
        Id: webhook_events_filter,
        Name: WebhookEventsFilter,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
By default, we will send requests to your webhook URL whenever there are new outputs or the prediction has finished. You can change which events trigger webhook requests by specifying `webhook_events_filter` in the prediction request:

- `start`: immediately on prediction start
- `output`: each time a prediction generates an output (note that predictions can generate multiple outputs)
- `logs`: each time log output is generated by a prediction
- `completed`: when the prediction reaches a terminal state (succeeded/canceled/failed)

For example, if you only wanted requests to be sent at the start and end of the prediction, you would provide:

```json
{
  "version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
  "input": {
    "text": "Alice"
  },
  "webhook": "https://example.com/my-webhook",
  "webhook_events_filter": ["start", "completed"]
}
```

Requests for event types `output` and `logs` will be sent at most once every 500ms. If you request `start` and `completed` webhooks, then they'll always be sent regardless of throttling.
,
        ParameterName: webhookEventsFilter,
        ArgumentName: webhookEventsFilter
      }
    ],
    Summary: ,
    AdditionalModels: null,
    Enumerations: null,
    Name: VersionPredictionRequest,
    ClassName: VersionPredictionRequest,
    ExternalClassName: VersionPredictionRequest,
    FileNameWithoutExtension: G.Models.VersionPredictionRequest
  },
  {
    Id: input,
    AddTypeName: false,
    Parents: null,
    TargetFramework: netstandard2.0,
    Namespace: G,
    GenerateSuperTypeForJsonSerializerContext: false,
    Properties: null,
    Summary:
The model's input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the "API" tab on the model you are running or [get the model version](#models.versions.get) and look at its `openapi_schema` property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes `prompt` as an input.

Files should be passed as HTTP URLs or data URLs.

Use an HTTP URL when:

- you have a large file &gt; 256kb
- you want to be able to use the file multiple times
- you want your prediction metadata to be associable with your input files

Use a data URL when:

- you have a small file &lt;= 256kb
- you don't want to upload and host the file somewhere
- you don't need to use the file again (Replicate will not store it)
,
    AdditionalModels: null,
    Enumerations: null,
    Name: Input,
    ClassName: Input,
    ExternalClassName: Input,
    FileNameWithoutExtension: G.Models.Input
  },
  {
    Id: webhook_events_filter,
    AddTypeName: false,
    Parents: null,
    TargetFramework: netstandard2.0,
    Namespace: G,
    Style: Enumeration,
    GenerateSuperTypeForJsonSerializerContext: false,
    Properties: [
      {
        Id: start,
        Name: Start,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: start,
        ArgumentName: start
      },
      {
        Id: output,
        Name: Output,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: output,
        ArgumentName: output
      },
      {
        Id: logs,
        Name: Logs,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: logs,
        ArgumentName: logs
      },
      {
        Id: completed,
        Name: Completed,
        Type: {
          CSharpType: ,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: completed,
        ArgumentName: completed
      }
    ],
    Summary: ,
    AdditionalModels: null,
    Enumerations: null,
    Name: WebhookEventsFilter,
    ClassName: WebhookEventsFilter,
    ExternalClassName: WebhookEventsFilter,
    FileNameWithoutExtension: G.Models.WebhookEventsFilter
  }
]