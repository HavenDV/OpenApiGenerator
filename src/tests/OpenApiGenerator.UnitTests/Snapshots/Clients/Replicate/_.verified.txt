[
  {
    Id: Account.get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/account",
    Properties: null,
    JsonSerializerContext: ,
    Summary: Get the authenticated account,
    RequestType: ,
    ResponseType: ,
    MethodName: Account.getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Account.get
  },
  {
    Id: Collections.list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/collections",
    Properties: null,
    JsonSerializerContext: ,
    Summary: List collections of models,
    RequestType: ,
    ResponseType: ,
    MethodName: Collections.listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Collections.list
  },
  {
    Id: Collections.get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/collections/{collectionSlug}",
    Properties: [
      {
        Id: collection_slug,
        Name: CollectionSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: collectionSlug,
        ArgumentName: collectionSlug
      }
    ],
    JsonSerializerContext: ,
    Summary: Get a collection of models,
    RequestType: ,
    ResponseType: ,
    MethodName: Collections.getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Collections.get
  },
  {
    Id: Deployments.list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/deployments",
    Properties: null,
    JsonSerializerContext: ,
    Summary: List deployments,
    RequestType: ,
    ResponseType: ,
    MethodName: Deployments.listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Deployments.list
  },
  {
    Id: Deployments.create,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/deployments",
    Properties: [
      {
        Id: hardware,
        Name: Hardware,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The SKU for the hardware used to run the model. Possible values can be retrieved from the `hardware.list` endpoint.,
        ParameterName: hardware,
        ArgumentName: hardware
      },
      {
        Id: max_instances,
        Name: MaxInstances,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The maximum number of instances for scaling.,
        ParameterName: maxInstances,
        ArgumentName: maxInstances
      },
      {
        Id: min_instances,
        Name: MinInstances,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The minimum number of instances for scaling.,
        ParameterName: minInstances,
        ArgumentName: minInstances
      },
      {
        Id: model,
        Name: Model,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The full name of the model that you want to deploy e.g. stability-ai/sdxl.,
        ParameterName: model,
        ArgumentName: model
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the deployment.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: version,
        Name: Version,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The 64-character string ID of the model version that you want to deploy.,
        ParameterName: version,
        ArgumentName: version
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a deployment,
    RequestType: ,
    ResponseType: ,
    MethodName: Deployments.createAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Deployments.create
  },
  {
    Id: Deployments.delete,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/deployments/{deploymentOwner}/{deploymentName}",
    Properties: [
      {
        Id: deployment_owner,
        Name: DeploymentOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentOwner,
        ArgumentName: deploymentOwner
      },
      {
        Id: deployment_name,
        Name: DeploymentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentName,
        ArgumentName: deploymentName
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a deployment,
    RequestType: ,
    ResponseType: ,
    MethodName: Deployments.deleteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Deployments.delete
  },
  {
    Id: Deployments.get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/deployments/{deploymentOwner}/{deploymentName}",
    Properties: [
      {
        Id: deployment_owner,
        Name: DeploymentOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentOwner,
        ArgumentName: deploymentOwner
      },
      {
        Id: deployment_name,
        Name: DeploymentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentName,
        ArgumentName: deploymentName
      }
    ],
    JsonSerializerContext: ,
    Summary: Get a deployment,
    RequestType: ,
    ResponseType: ,
    MethodName: Deployments.getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Deployments.get
  },
  {
    Id: Deployments.update,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/deployments/{deploymentOwner}/{deploymentName}",
    Properties: [
      {
        Id: deployment_owner,
        Name: DeploymentOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentOwner,
        ArgumentName: deploymentOwner
      },
      {
        Id: deployment_name,
        Name: DeploymentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentName,
        ArgumentName: deploymentName
      },
      {
        Id: hardware,
        Name: Hardware,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The SKU for the hardware used to run the model. Possible values can be retrieved from the `hardware.list` endpoint.,
        ParameterName: hardware,
        ArgumentName: hardware
      },
      {
        Id: max_instances,
        Name: MaxInstances,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The maximum number of instances for scaling.,
        ParameterName: maxInstances,
        ArgumentName: maxInstances
      },
      {
        Id: min_instances,
        Name: MinInstances,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The minimum number of instances for scaling.,
        ParameterName: minInstances,
        ArgumentName: minInstances
      },
      {
        Id: version,
        Name: Version,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The ID of the model version that you want to deploy,
        ParameterName: version,
        ArgumentName: version
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a deployment,
    RequestType: ,
    ResponseType: ,
    MethodName: Deployments.updateAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Deployments.update
  },
  {
    Id: Deployments.predictions.create,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/deployments/{deploymentOwner}/{deploymentName}/predictions",
    Properties: [
      {
        Id: deployment_owner,
        Name: DeploymentOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentOwner,
        ArgumentName: deploymentOwner
      },
      {
        Id: deployment_name,
        Name: DeploymentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentName,
        ArgumentName: deploymentName
      },
      {
        Id: input,
        Name: Input,
        Type: {
          CSharpType: PredictionRequestInput,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The model's input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the "API" tab on the model you are running or [get the model version](#models.versions.get) and look at its `openapi_schema` property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes `prompt` as an input.

Files should be passed as HTTP URLs or data URLs.

Use an HTTP URL when:

- you have a large file &gt; 256kb
- you want to be able to use the file multiple times
- you want your prediction metadata to be associable with your input files

Use a data URL when:

- you have a small file &lt;= 256kb
- you don't want to upload and host the file somewhere
- you don't need to use the file again (Replicate will not store it)
,
        ParameterName: input,
        ArgumentName: input
      },
      {
        Id: stream,
        Name: Stream,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Request a URL to receive streaming output using [server-sent events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events).

If the requested model version supports streaming, the returned prediction will have a `stream` entry in its `urls` property with an HTTPS URL that you can use to construct an [`EventSource`](https://developer.mozilla.org/en-US/docs/Web/API/EventSource).
,
        ParameterName: stream,
        ArgumentName: stream
      },
      {
        Id: webhook,
        Name: Webhook,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
An HTTPS URL for receiving a webhook when the prediction has new output. The webhook will be a POST request where the request body is the same as the response body of the [get prediction](#predictions.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.
,
        ParameterName: webhook,
        ArgumentName: webhook
      },
      {
        Id: webhook_events_filter,
        Name: WebhookEventsFilter,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
By default, we will send requests to your webhook URL whenever there are new outputs or the prediction has finished. You can change which events trigger webhook requests by specifying `webhook_events_filter` in the prediction request:

- `start`: immediately on prediction start
- `output`: each time a prediction generates an output (note that predictions can generate multiple outputs)
- `logs`: each time log output is generated by a prediction
- `completed`: when the prediction reaches a terminal state (succeeded/canceled/failed)

For example, if you only wanted requests to be sent at the start and end of the prediction, you would provide:

```json
{
  "input": {
    "text": "Alice"
  },
  "webhook": "https://example.com/my-webhook",
  "webhook_events_filter": ["start", "completed"]
}
```

Requests for event types `output` and `logs` will be sent at most once every 500ms. If you request `start` and `completed` webhooks, then they'll always be sent regardless of throttling.
,
        ParameterName: webhookEventsFilter,
        ArgumentName: webhookEventsFilter
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a prediction using a deployment,
    RequestType: prediction_request,
    ResponseType: ,
    MethodName: Deployments.predictions.createAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Deployments.predictions.create
  },
  {
    Id: Hardware.list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/hardware",
    Properties: null,
    JsonSerializerContext: ,
    Summary: List available hardware for models,
    RequestType: ,
    ResponseType: ,
    MethodName: Hardware.listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Hardware.list
  },
  {
    Id: Models.list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/models",
    Properties: null,
    JsonSerializerContext: ,
    Summary: List public models,
    RequestType: ,
    ResponseType: ,
    MethodName: Models.listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Models.list
  },
  {
    Id: Models.create,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/models",
    Properties: [
      {
        Id: cover_image_url,
        Name: CoverImageUrl,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A URL for the model's cover image. This should be an image file.,
        ParameterName: coverImageUrl,
        ArgumentName: coverImageUrl
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A description of the model.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: github_url,
        Name: GithubUrl,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A URL for the model's source code on GitHub.,
        ParameterName: githubUrl,
        ArgumentName: githubUrl
      },
      {
        Id: hardware,
        Name: Hardware,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The SKU for the hardware used to run the model. Possible values can be retrieved from the `hardware.list` endpoint.,
        ParameterName: hardware,
        ArgumentName: hardware
      },
      {
        Id: license_url,
        Name: LicenseUrl,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A URL for the model's license.,
        ParameterName: licenseUrl,
        ArgumentName: licenseUrl
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the model. This must be unique among all models owned by the user or organization.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the user or organization that will own the model. This must be the same as the user or organization that is making the API request. In other words, the API token used in the request must belong to this user or organization.,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: paper_url,
        Name: PaperUrl,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A URL for the model's paper.,
        ParameterName: paperUrl,
        ArgumentName: paperUrl
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Public,
            Private
          ],
          EnumValues: [
            public,
            private
          ]
        },
        IsRequired: true,
        Summary: Whether the model should be public or private. A public model can be viewed and run by anyone, whereas a private model can be viewed and run only by the user or organization members that own the model.,
        ParameterName: visibility,
        ArgumentName: visibility
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a model,
    RequestType: ,
    ResponseType: ,
    MethodName: Models.createAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Models.create
  },
  {
    Id: Models.delete,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/models/{modelOwner}/{modelName}",
    Properties: [
      {
        Id: model_owner,
        Name: ModelOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelOwner,
        ArgumentName: modelOwner
      },
      {
        Id: model_name,
        Name: ModelName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelName,
        ArgumentName: modelName
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a model,
    RequestType: ,
    ResponseType: ,
    MethodName: Models.deleteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Models.delete
  },
  {
    Id: Models.get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/models/{modelOwner}/{modelName}",
    Properties: [
      {
        Id: model_owner,
        Name: ModelOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelOwner,
        ArgumentName: modelOwner
      },
      {
        Id: model_name,
        Name: ModelName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelName,
        ArgumentName: modelName
      }
    ],
    JsonSerializerContext: ,
    Summary: Get a model,
    RequestType: ,
    ResponseType: ,
    MethodName: Models.getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Models.get
  },
  {
    Id: Models.predictions.create,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/models/{modelOwner}/{modelName}/predictions",
    Properties: [
      {
        Id: model_owner,
        Name: ModelOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelOwner,
        ArgumentName: modelOwner
      },
      {
        Id: model_name,
        Name: ModelName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelName,
        ArgumentName: modelName
      },
      {
        Id: input,
        Name: Input,
        Type: {
          CSharpType: PredictionRequestInput,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The model's input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the "API" tab on the model you are running or [get the model version](#models.versions.get) and look at its `openapi_schema` property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes `prompt` as an input.

Files should be passed as HTTP URLs or data URLs.

Use an HTTP URL when:

- you have a large file &gt; 256kb
- you want to be able to use the file multiple times
- you want your prediction metadata to be associable with your input files

Use a data URL when:

- you have a small file &lt;= 256kb
- you don't want to upload and host the file somewhere
- you don't need to use the file again (Replicate will not store it)
,
        ParameterName: input,
        ArgumentName: input
      },
      {
        Id: stream,
        Name: Stream,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Request a URL to receive streaming output using [server-sent events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events).

If the requested model version supports streaming, the returned prediction will have a `stream` entry in its `urls` property with an HTTPS URL that you can use to construct an [`EventSource`](https://developer.mozilla.org/en-US/docs/Web/API/EventSource).
,
        ParameterName: stream,
        ArgumentName: stream
      },
      {
        Id: webhook,
        Name: Webhook,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
An HTTPS URL for receiving a webhook when the prediction has new output. The webhook will be a POST request where the request body is the same as the response body of the [get prediction](#predictions.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.
,
        ParameterName: webhook,
        ArgumentName: webhook
      },
      {
        Id: webhook_events_filter,
        Name: WebhookEventsFilter,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
By default, we will send requests to your webhook URL whenever there are new outputs or the prediction has finished. You can change which events trigger webhook requests by specifying `webhook_events_filter` in the prediction request:

- `start`: immediately on prediction start
- `output`: each time a prediction generates an output (note that predictions can generate multiple outputs)
- `logs`: each time log output is generated by a prediction
- `completed`: when the prediction reaches a terminal state (succeeded/canceled/failed)

For example, if you only wanted requests to be sent at the start and end of the prediction, you would provide:

```json
{
  "input": {
    "text": "Alice"
  },
  "webhook": "https://example.com/my-webhook",
  "webhook_events_filter": ["start", "completed"]
}
```

Requests for event types `output` and `logs` will be sent at most once every 500ms. If you request `start` and `completed` webhooks, then they'll always be sent regardless of throttling.
,
        ParameterName: webhookEventsFilter,
        ArgumentName: webhookEventsFilter
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a prediction using an official model,
    RequestType: prediction_request,
    ResponseType: ,
    MethodName: Models.predictions.createAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Models.predictions.create
  },
  {
    Id: Models.versions.list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/models/{modelOwner}/{modelName}/versions",
    Properties: [
      {
        Id: model_owner,
        Name: ModelOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelOwner,
        ArgumentName: modelOwner
      },
      {
        Id: model_name,
        Name: ModelName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelName,
        ArgumentName: modelName
      }
    ],
    JsonSerializerContext: ,
    Summary: List model versions,
    RequestType: ,
    ResponseType: ,
    MethodName: Models.versions.listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Models.versions.list
  },
  {
    Id: Models.versions.delete,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/models/{modelOwner}/{modelName}/versions/{versionId}",
    Properties: [
      {
        Id: model_owner,
        Name: ModelOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelOwner,
        ArgumentName: modelOwner
      },
      {
        Id: model_name,
        Name: ModelName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelName,
        ArgumentName: modelName
      },
      {
        Id: version_id,
        Name: VersionId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: versionId,
        ArgumentName: versionId
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a model version,
    RequestType: ,
    ResponseType: ,
    MethodName: Models.versions.deleteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Models.versions.delete
  },
  {
    Id: Models.versions.get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/models/{modelOwner}/{modelName}/versions/{versionId}",
    Properties: [
      {
        Id: model_owner,
        Name: ModelOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelOwner,
        ArgumentName: modelOwner
      },
      {
        Id: model_name,
        Name: ModelName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelName,
        ArgumentName: modelName
      },
      {
        Id: version_id,
        Name: VersionId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: versionId,
        ArgumentName: versionId
      }
    ],
    JsonSerializerContext: ,
    Summary: Get a model version,
    RequestType: ,
    ResponseType: ,
    MethodName: Models.versions.getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Models.versions.get
  },
  {
    Id: Trainings.create,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/models/{modelOwner}/{modelName}/versions/{versionId}/trainings",
    Properties: [
      {
        Id: model_owner,
        Name: ModelOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelOwner,
        ArgumentName: modelOwner
      },
      {
        Id: model_name,
        Name: ModelName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: modelName,
        ArgumentName: modelName
      },
      {
        Id: version_id,
        Name: VersionId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: versionId,
        ArgumentName: versionId
      },
      {
        Id: destination,
        Name: Destination,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
A string representing the desired model to push to in the format `{destination_model_owner}/{destination_model_name}`. This should be an existing model owned by the user or organization making the API request. If the destination is invalid, the server will return an appropriate 4XX response.
,
        ParameterName: destination,
        ArgumentName: destination
      },
      {
        Id: input,
        Name: Input,
        Type: {
          CSharpType: TrainingRequestInput,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
An object containing inputs to the Cog model's `train()` function.
,
        ParameterName: input,
        ArgumentName: input
      },
      {
        Id: webhook,
        Name: Webhook,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An HTTPS URL for receiving a webhook when the training completes. The webhook will be a POST request where the request body is the same as the response body of the [get training](#trainings.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.,
        ParameterName: webhook,
        ArgumentName: webhook
      },
      {
        Id: webhook_events_filter,
        Name: WebhookEventsFilter,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
By default, we will send requests to your webhook URL whenever there are new outputs or the training has finished. You can change which events trigger webhook requests by specifying `webhook_events_filter` in the training request:

- `start`: immediately on training start
- `output`: each time a training generates an output (note that trainings can generate multiple outputs)
- `logs`: each time log output is generated by a training
- `completed`: when the training reaches a terminal state (succeeded/canceled/failed)

For example, if you only wanted requests to be sent at the start and end of the training, you would provide:

```json
{
  "destination": "my-organization/my-model",
  "input": {
    "text": "Alice"
  },
  "webhook": "https://example.com/my-webhook",
  "webhook_events_filter": ["start", "completed"]
}
```

Requests for event types `output` and `logs` will be sent at most once every 500ms. If you request `start` and `completed` webhooks, then they'll always be sent regardless of throttling.
,
        ParameterName: webhookEventsFilter,
        ArgumentName: webhookEventsFilter
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a training,
    RequestType: training_request,
    ResponseType: ,
    MethodName: Trainings.createAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Trainings.create
  },
  {
    Id: Predictions.list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/predictions",
    Properties: null,
    JsonSerializerContext: ,
    Summary: List predictions,
    RequestType: ,
    ResponseType: ,
    MethodName: Predictions.listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Predictions.list
  },
  {
    Id: Predictions.create,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/predictions",
    Properties: [
      {
        Id: input,
        Name: Input,
        Type: {
          CSharpType: VersionPredictionRequestInput,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The model's input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the "API" tab on the model you are running or [get the model version](#models.versions.get) and look at its `openapi_schema` property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes `prompt` as an input.

Files should be passed as HTTP URLs or data URLs.

Use an HTTP URL when:

- you have a large file &gt; 256kb
- you want to be able to use the file multiple times
- you want your prediction metadata to be associable with your input files

Use a data URL when:

- you have a small file &lt;= 256kb
- you don't want to upload and host the file somewhere
- you don't need to use the file again (Replicate will not store it)
,
        ParameterName: input,
        ArgumentName: input
      },
      {
        Id: stream,
        Name: Stream,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Request a URL to receive streaming output using [server-sent events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events).

If the requested model version supports streaming, the returned prediction will have a `stream` entry in its `urls` property with an HTTPS URL that you can use to construct an [`EventSource`](https://developer.mozilla.org/en-US/docs/Web/API/EventSource).
,
        ParameterName: stream,
        ArgumentName: stream
      },
      {
        Id: version,
        Name: Version,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The ID of the model version that you want to run.,
        ParameterName: version,
        ArgumentName: version
      },
      {
        Id: webhook,
        Name: Webhook,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
An HTTPS URL for receiving a webhook when the prediction has new output. The webhook will be a POST request where the request body is the same as the response body of the [get prediction](#predictions.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.
,
        ParameterName: webhook,
        ArgumentName: webhook
      },
      {
        Id: webhook_events_filter,
        Name: WebhookEventsFilter,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
By default, we will send requests to your webhook URL whenever there are new outputs or the prediction has finished. You can change which events trigger webhook requests by specifying `webhook_events_filter` in the prediction request:

- `start`: immediately on prediction start
- `output`: each time a prediction generates an output (note that predictions can generate multiple outputs)
- `logs`: each time log output is generated by a prediction
- `completed`: when the prediction reaches a terminal state (succeeded/canceled/failed)

For example, if you only wanted requests to be sent at the start and end of the prediction, you would provide:

```json
{
  "version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
  "input": {
    "text": "Alice"
  },
  "webhook": "https://example.com/my-webhook",
  "webhook_events_filter": ["start", "completed"]
}
```

Requests for event types `output` and `logs` will be sent at most once every 500ms. If you request `start` and `completed` webhooks, then they'll always be sent regardless of throttling.
,
        ParameterName: webhookEventsFilter,
        ArgumentName: webhookEventsFilter
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a prediction,
    RequestType: version_prediction_request,
    ResponseType: ,
    MethodName: Predictions.createAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Predictions.create
  },
  {
    Id: Predictions.get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/predictions/{predictionId}",
    Properties: [
      {
        Id: prediction_id,
        Name: PredictionId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: predictionId,
        ArgumentName: predictionId
      }
    ],
    JsonSerializerContext: ,
    Summary: Get a prediction,
    RequestType: ,
    ResponseType: ,
    MethodName: Predictions.getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Predictions.get
  },
  {
    Id: Predictions.cancel,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/predictions/{predictionId}/cancel",
    Properties: [
      {
        Id: prediction_id,
        Name: PredictionId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: predictionId,
        ArgumentName: predictionId
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Cancel a prediction,
    RequestType: ,
    ResponseType: ,
    MethodName: Predictions.cancelAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Predictions.cancel
  },
  {
    Id: Trainings.list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/trainings",
    Properties: null,
    JsonSerializerContext: ,
    Summary: List trainings,
    RequestType: ,
    ResponseType: ,
    MethodName: Trainings.listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Trainings.list
  },
  {
    Id: Trainings.get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/trainings/{trainingId}",
    Properties: [
      {
        Id: training_id,
        Name: TrainingId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: trainingId,
        ArgumentName: trainingId
      }
    ],
    JsonSerializerContext: ,
    Summary: Get a training,
    RequestType: ,
    ResponseType: ,
    MethodName: Trainings.getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Trainings.get
  },
  {
    Id: Trainings.cancel,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/trainings/{trainingId}/cancel",
    Properties: [
      {
        Id: training_id,
        Name: TrainingId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: trainingId,
        ArgumentName: trainingId
      }
    ],
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Cancel a training,
    RequestType: ,
    ResponseType: ,
    MethodName: Trainings.cancelAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Trainings.cancel
  },
  {
    Id: Webhooks.default.secret.get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/webhooks/default/secret",
    Properties: null,
    JsonSerializerContext: ,
    Summary: Get the signing secret for the default webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Webhooks.default.secret.getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Webhooks.default.secret.get
  },
  {
    Id: Constructors,
    Namespace: G,
    ClassName: Api,
    BaseUrl: https://api.replicate.com/v1,
    Stream: false,
    Path: ,
    Properties: null,
    JsonSerializerContext: ,
    Summary: ,
    RequestType: ,
    ResponseType: ,
    MethodName: ConstructorsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Constructors
  }
]