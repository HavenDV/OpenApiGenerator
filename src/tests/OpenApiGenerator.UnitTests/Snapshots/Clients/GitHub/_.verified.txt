[
  {
    Id: Meta/root,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: GitHub API Root,
    RequestType: ,
    ResponseType: root,
    MethodName: Meta/rootAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Meta/root
  },
  {
    Id: Security-advisories/list-global-advisories,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/advisories?ghsa_id={ghsaId}&type={type}&cve_id={cveId}&ecosystem={ecosystem}&severity={severity}&cwes={cwes}&is_withdrawn={isWithdrawn}&affects={affects}&published={published}&updated={updated}&modified={modified}&before={before}&after={after}&direction={direction}&per_page={perPage}&sort={sort}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: ghsa_id,
        Name: GhsaId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ghsaId,
        ArgumentName: ghsaId
      },
      {
        Id: type,
        Name: Type,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Reviewed,
            Malware,
            Unreviewed
          ],
          EnumValues: [
            reviewed,
            malware,
            unreviewed
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Type.Reviewed,
        Summary:
<br/>Default Value: reviewed,
        ParameterName: type,
        ArgumentName: type
      },
      {
        Id: cve_id,
        Name: CveId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: cveId,
        ArgumentName: cveId
      },
      {
        Id: ecosystem,
        Name: Ecosystem,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Rubygems,
            Npm,
            Pip,
            Maven,
            Nuget,
            Composer,
            Go,
            Rust,
            Erlang,
            Actions,
            Pub,
            Other,
            Swift
          ],
          EnumValues: [
            rubygems,
            npm,
            pip,
            maven,
            nuget,
            composer,
            go,
            rust,
            erlang,
            actions,
            pub,
            other,
            swift
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: The package's language or package management ecosystem.,
        ParameterName: ecosystem,
        ArgumentName: ecosystem
      },
      {
        Id: severity,
        Name: Severity,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Unknown,
            Low,
            Medium,
            High,
            Critical
          ],
          EnumValues: [
            unknown,
            low,
            medium,
            high,
            critical
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: severity,
        ArgumentName: severity
      },
      {
        Id: cwes,
        Name: Cwes,
        Type: {
          CSharpType: object,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: cwes,
        ArgumentName: cwes
      },
      {
        Id: is_withdrawn,
        Name: IsWithdrawn,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: isWithdrawn,
        ArgumentName: isWithdrawn
      },
      {
        Id: affects,
        Name: Affects,
        Type: {
          CSharpType: object,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: affects,
        ArgumentName: affects
      },
      {
        Id: published,
        Name: Published,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: published,
        ArgumentName: published
      },
      {
        Id: updated,
        Name: Updated,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: updated,
        ArgumentName: updated
      },
      {
        Id: modified,
        Name: Modified,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: modified,
        ArgumentName: modified
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: after,
        Name: After,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: after,
        ArgumentName: after
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Updated,
            Published
          ],
          EnumValues: [
            updated,
            published
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Published,
        Summary:
<br/>Default Value: published,
        ParameterName: sort,
        ArgumentName: sort
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List global security advisories,
    RequestType: ,
    ResponseType: ,
    MethodName: Security-advisories/list-global-advisoriesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Security-advisories/list-global-advisories
  },
  {
    Id: Security-advisories/get-global-advisory,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/advisories/{ghsaId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: ghsa_id,
        Name: GhsaId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ghsaId,
        ArgumentName: ghsaId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a global security advisory,
    RequestType: ,
    ResponseType: global-advisory,
    MethodName: Security-advisories/get-global-advisoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Security-advisories/get-global-advisory
  },
  {
    Id: Apps/get-authenticated,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/app",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the authenticated app,
    RequestType: ,
    ResponseType: integration,
    MethodName: Apps/get-authenticatedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/get-authenticated
  },
  {
    Id: Apps/create-from-manifest,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/app-manifests/{code}/conversions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: code,
        Name: Code,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: code,
        ArgumentName: code
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a GitHub App from a manifest,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/create-from-manifestAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/create-from-manifest
  },
  {
    Id: Apps/get-webhook-config-for-app,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/app/hook/config",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a webhook configuration for an app,
    RequestType: ,
    ResponseType: webhook-config,
    MethodName: Apps/get-webhook-config-for-appAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/get-webhook-config-for-app
  },
  {
    Id: Apps/update-webhook-config-for-app,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/app/hook/config",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: url,
        Name: Url,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The URL to which the payloads will be delivered.
<br/>Example: https://example.com/webhook,
        ParameterName: url,
        ArgumentName: url
      },
      {
        Id: content_type,
        Name: ContentType,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
<br/>Example: "json",
        ParameterName: contentType,
        ArgumentName: contentType
      },
      {
        Id: secret,
        Name: Secret,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
<br/>Example: "********",
        ParameterName: secret,
        ArgumentName: secret
      },
      {
        Id: insecure_ssl,
        Name: InsecureSsl,
        Type: {
          CSharpType: WebhookConfigInsecureSsl?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: insecureSsl,
        ArgumentName: insecureSsl
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a webhook configuration for an app,
    RequestType: ,
    ResponseType: webhook-config,
    MethodName: Apps/update-webhook-config-for-appAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/update-webhook-config-for-app
  },
  {
    Id: Apps/list-webhook-deliveries,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/app/hook/deliveries?per_page={perPage}&cursor={cursor}&redelivery={redelivery}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: cursor,
        Name: Cursor,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: cursor,
        ArgumentName: cursor
      },
      {
        Id: redelivery,
        Name: Redelivery,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: redelivery,
        ArgumentName: redelivery
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List deliveries for an app webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-webhook-deliveriesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-webhook-deliveries
  },
  {
    Id: Apps/get-webhook-delivery,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/app/hook/deliveries/{deliveryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: delivery_id,
        Name: DeliveryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deliveryId,
        ArgumentName: deliveryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a delivery for an app webhook,
    RequestType: ,
    ResponseType: hook-delivery,
    MethodName: Apps/get-webhook-deliveryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/get-webhook-delivery
  },
  {
    Id: Apps/redeliver-webhook-delivery,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/app/hook/deliveries/{deliveryId}/attempts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: delivery_id,
        Name: DeliveryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deliveryId,
        ArgumentName: deliveryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Redeliver a delivery for an app webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/redeliver-webhook-deliveryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/redeliver-webhook-delivery
  },
  {
    Id: Apps/list-installation-requests-for-authenticated-app,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/app/installation-requests?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List installation requests for the authenticated app,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-installation-requests-for-authenticated-appAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-installation-requests-for-authenticated-app
  },
  {
    Id: Apps/list-installations,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/app/installations?per_page={perPage}&page={page}&since={since}&outdated={outdated}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: outdated,
        Name: Outdated,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: outdated,
        ArgumentName: outdated
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List installations for the authenticated app,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-installationsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-installations
  },
  {
    Id: Apps/get-installation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/app/installations/{installationId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: installation_id,
        Name: InstallationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: installationId,
        ArgumentName: installationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an installation for the authenticated app,
    RequestType: ,
    ResponseType: installation,
    MethodName: Apps/get-installationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/get-installation
  },
  {
    Id: Apps/delete-installation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/app/installations/{installationId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: installation_id,
        Name: InstallationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: installationId,
        ArgumentName: installationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an installation for the authenticated app,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/delete-installationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/delete-installation
  },
  {
    Id: Apps/create-installation-access-token,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/app/installations/{installationId}/access_tokens",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: installation_id,
        Name: InstallationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: installationId,
        ArgumentName: installationId
      },
      {
        Id: repositories,
        Name: Repositories,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: List of repository names that the token should have access to,
        ParameterName: repositories,
        ArgumentName: repositories
      },
      {
        Id: repository_ids,
        Name: RepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
List of repository IDs that the token should have access to
<br/>Example: [1],
        ParameterName: repositoryIds,
        ArgumentName: repositoryIds
      },
      {
        Id: permissions,
        Name: Permissions,
        Type: {
          CSharpType: AppPermissions?,
          IsArray: false,
          IsEnum: false,
          Properties: [
            actions,
            administration,
            checks,
            codespaces,
            contents,
            dependabot_secrets,
            deployments,
            environments,
            issues,
            metadata,
            packages,
            pages,
            pull_requests,
            repository_custom_properties,
            repository_hooks,
            repository_projects,
            secret_scanning_alerts,
            secrets,
            security_events,
            single_file,
            statuses,
            vulnerability_alerts,
            workflows,
            members,
            organization_administration,
            organization_custom_roles,
            organization_custom_org_roles,
            organization_custom_properties,
            organization_copilot_seat_management,
            organization_announcement_banners,
            organization_events,
            organization_hooks,
            organization_personal_access_tokens,
            organization_personal_access_token_requests,
            organization_plan,
            organization_projects,
            organization_packages,
            organization_secrets,
            organization_self_hosted_runners,
            organization_user_blocking,
            team_discussions,
            email_addresses,
            followers,
            git_ssh_keys,
            gpg_keys,
            interaction_limits,
            profile,
            starring
          ],
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The permissions granted to the user access token.
<br/>Example: ,
        ParameterName: permissions,
        ArgumentName: permissions
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create an installation access token for an app,
    RequestType: ,
    ResponseType: installation-token,
    MethodName: Apps/create-installation-access-tokenAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/create-installation-access-token
  },
  {
    Id: Apps/suspend-installation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/app/installations/{installationId}/suspended",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: installation_id,
        Name: InstallationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: installationId,
        ArgumentName: installationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Suspend an app installation,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/suspend-installationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/suspend-installation
  },
  {
    Id: Apps/unsuspend-installation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/app/installations/{installationId}/suspended",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: installation_id,
        Name: InstallationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: installationId,
        ArgumentName: installationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Unsuspend an app installation,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/unsuspend-installationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/unsuspend-installation
  },
  {
    Id: Apps/delete-authorization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/applications/{clientId}/grant",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: client_id,
        Name: ClientId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: clientId,
        ArgumentName: clientId
      },
      {
        Id: access_token,
        Name: AccessToken,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The OAuth access token used to authenticate to the GitHub API.,
        ParameterName: accessToken,
        ArgumentName: accessToken
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an app authorization,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/delete-authorizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/delete-authorization
  },
  {
    Id: Apps/check-token,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/applications/{clientId}/token",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: client_id,
        Name: ClientId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: clientId,
        ArgumentName: clientId
      },
      {
        Id: access_token,
        Name: AccessToken,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The access_token of the OAuth or GitHub application.,
        ParameterName: accessToken,
        ArgumentName: accessToken
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Check a token,
    RequestType: ,
    ResponseType: authorization,
    MethodName: Apps/check-tokenAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/check-token
  },
  {
    Id: Apps/reset-token,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/applications/{clientId}/token",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: client_id,
        Name: ClientId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: clientId,
        ArgumentName: clientId
      },
      {
        Id: access_token,
        Name: AccessToken,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The access_token of the OAuth or GitHub application.,
        ParameterName: accessToken,
        ArgumentName: accessToken
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Reset a token,
    RequestType: ,
    ResponseType: authorization,
    MethodName: Apps/reset-tokenAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/reset-token
  },
  {
    Id: Apps/delete-token,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/applications/{clientId}/token",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: client_id,
        Name: ClientId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: clientId,
        ArgumentName: clientId
      },
      {
        Id: access_token,
        Name: AccessToken,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The OAuth access token used to authenticate to the GitHub API.,
        ParameterName: accessToken,
        ArgumentName: accessToken
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an app token,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/delete-tokenAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/delete-token
  },
  {
    Id: Apps/scope-token,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/applications/{clientId}/token/scoped",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: client_id,
        Name: ClientId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: clientId,
        ArgumentName: clientId
      },
      {
        Id: access_token,
        Name: AccessToken,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The access token used to authenticate to the GitHub API.
<br/>Example: e72e16c7e42f292c6912e7710c838347ae178b4a,
        ParameterName: accessToken,
        ArgumentName: accessToken
      },
      {
        Id: target,
        Name: Target,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.
<br/>Example: octocat,
        ParameterName: target,
        ArgumentName: target
      },
      {
        Id: target_id,
        Name: TargetId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.
<br/>Example: 1,
        ParameterName: targetId,
        ArgumentName: targetId
      },
      {
        Id: repositories,
        Name: Repositories,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.,
        ParameterName: repositories,
        ArgumentName: repositories
      },
      {
        Id: repository_ids,
        Name: RepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.
<br/>Example: [1],
        ParameterName: repositoryIds,
        ArgumentName: repositoryIds
      },
      {
        Id: permissions,
        Name: Permissions,
        Type: {
          CSharpType: AppPermissions?,
          IsArray: false,
          IsEnum: false,
          Properties: [
            actions,
            administration,
            checks,
            codespaces,
            contents,
            dependabot_secrets,
            deployments,
            environments,
            issues,
            metadata,
            packages,
            pages,
            pull_requests,
            repository_custom_properties,
            repository_hooks,
            repository_projects,
            secret_scanning_alerts,
            secrets,
            security_events,
            single_file,
            statuses,
            vulnerability_alerts,
            workflows,
            members,
            organization_administration,
            organization_custom_roles,
            organization_custom_org_roles,
            organization_custom_properties,
            organization_copilot_seat_management,
            organization_announcement_banners,
            organization_events,
            organization_hooks,
            organization_personal_access_tokens,
            organization_personal_access_token_requests,
            organization_plan,
            organization_projects,
            organization_packages,
            organization_secrets,
            organization_self_hosted_runners,
            organization_user_blocking,
            team_discussions,
            email_addresses,
            followers,
            git_ssh_keys,
            gpg_keys,
            interaction_limits,
            profile,
            starring
          ],
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The permissions granted to the user access token.
<br/>Example: ,
        ParameterName: permissions,
        ArgumentName: permissions
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a scoped access token,
    RequestType: ,
    ResponseType: authorization,
    MethodName: Apps/scope-tokenAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/scope-token
  },
  {
    Id: Apps/get-by-slug,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/apps/{appSlug}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: app_slug,
        Name: AppSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: appSlug,
        ArgumentName: appSlug
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an app,
    RequestType: ,
    ResponseType: integration,
    MethodName: Apps/get-by-slugAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/get-by-slug
  },
  {
    Id: Classroom/get-an-assignment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/assignments/{assignmentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: assignment_id,
        Name: AssignmentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: assignmentId,
        ArgumentName: assignmentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an assignment,
    RequestType: ,
    ResponseType: classroom-assignment,
    MethodName: Classroom/get-an-assignmentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Classroom/get-an-assignment
  },
  {
    Id: Classroom/list-accepted-assigments-for-an-assignment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/assignments/{assignmentId}/accepted_assignments?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: assignment_id,
        Name: AssignmentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: assignmentId,
        ArgumentName: assignmentId
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List accepted assignments for an assignment,
    RequestType: ,
    ResponseType: ,
    MethodName: Classroom/list-accepted-assigments-for-an-assignmentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Classroom/list-accepted-assigments-for-an-assignment
  },
  {
    Id: Classroom/get-assignment-grades,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/assignments/{assignmentId}/grades",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: assignment_id,
        Name: AssignmentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: assignmentId,
        ArgumentName: assignmentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get assignment grades,
    RequestType: ,
    ResponseType: ,
    MethodName: Classroom/get-assignment-gradesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Classroom/get-assignment-grades
  },
  {
    Id: Classroom/list-classrooms,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/classrooms?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List classrooms,
    RequestType: ,
    ResponseType: ,
    MethodName: Classroom/list-classroomsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Classroom/list-classrooms
  },
  {
    Id: Classroom/get-a-classroom,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/classrooms/{classroomId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: classroom_id,
        Name: ClassroomId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: classroomId,
        ArgumentName: classroomId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a classroom,
    RequestType: ,
    ResponseType: classroom,
    MethodName: Classroom/get-a-classroomAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Classroom/get-a-classroom
  },
  {
    Id: Classroom/list-assignments-for-a-classroom,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/classrooms/{classroomId}/assignments?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: classroom_id,
        Name: ClassroomId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: classroomId,
        ArgumentName: classroomId
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List assignments for a classroom,
    RequestType: ,
    ResponseType: ,
    MethodName: Classroom/list-assignments-for-a-classroomAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Classroom/list-assignments-for-a-classroom
  },
  {
    Id: Codes-of-conduct/get-all-codes-of-conduct,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/codes_of_conduct",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all codes of conduct,
    RequestType: ,
    ResponseType: ,
    MethodName: Codes-of-conduct/get-all-codes-of-conductAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codes-of-conduct/get-all-codes-of-conduct
  },
  {
    Id: Codes-of-conduct/get-conduct-code,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/codes_of_conduct/{key}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: key,
        Name: Key,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: key,
        ArgumentName: key
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a code of conduct,
    RequestType: ,
    ResponseType: code-of-conduct,
    MethodName: Codes-of-conduct/get-conduct-codeAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codes-of-conduct/get-conduct-code
  },
  {
    Id: Emojis/get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/emojis",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get emojis,
    RequestType: ,
    ResponseType: ,
    MethodName: Emojis/getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Emojis/get
  },
  {
    Id: Copilot/usage-metrics-for-enterprise,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/enterprises/{enterprise}/copilot/usage?since={since}&until={until}&page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: enterprise,
        Name: Enterprise,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: enterprise,
        ArgumentName: enterprise
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: until,
        Name: Until,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: until,
        ArgumentName: until
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 28,
        Summary:
<br/>Default Value: 28,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a summary of Copilot usage for enterprise members,
    RequestType: ,
    ResponseType: ,
    MethodName: Copilot/usage-metrics-for-enterpriseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Copilot/usage-metrics-for-enterprise
  },
  {
    Id: Dependabot/list-alerts-for-enterprise,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/enterprises/{enterprise}/dependabot/alerts?state={state}&severity={severity}&ecosystem={ecosystem}&package={package}&scope={scope}&sort={sort}&direction={direction}&before={before}&after={after}&first={first}&last={last}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: enterprise,
        Name: Enterprise,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: enterprise,
        ArgumentName: enterprise
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: severity,
        Name: Severity,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: severity,
        ArgumentName: severity
      },
      {
        Id: ecosystem,
        Name: Ecosystem,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ecosystem,
        ArgumentName: ecosystem
      },
      {
        Id: package,
        Name: Package,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: package,
        ArgumentName: package
      },
      {
        Id: scope,
        Name: Scope,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Development,
            Runtime
          ],
          EnumValues: [
            development,
            runtime
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: scope,
        ArgumentName: scope
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: after,
        Name: After,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: after,
        ArgumentName: after
      },
      {
        Id: first,
        Name: First,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: first,
        ArgumentName: first
      },
      {
        Id: last,
        Name: Last,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: last,
        ArgumentName: last
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List Dependabot alerts for an enterprise,
    RequestType: ,
    ResponseType: ,
    MethodName: Dependabot/list-alerts-for-enterpriseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/list-alerts-for-enterprise
  },
  {
    Id: Secret-scanning/list-alerts-for-enterprise,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/enterprises/{enterprise}/secret-scanning/alerts?state={state}&secret_type={secretType}&resolution={resolution}&sort={sort}&direction={direction}&per_page={perPage}&before={before}&after={after}&validity={validity}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: enterprise,
        Name: Enterprise,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: enterprise,
        ArgumentName: enterprise
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Resolved
          ],
          EnumValues: [
            open,
            resolved
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: secret_type,
        Name: SecretType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: secretType,
        ArgumentName: secretType
      },
      {
        Id: resolution,
        Name: Resolution,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: resolution,
        ArgumentName: resolution
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: after,
        Name: After,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: after,
        ArgumentName: after
      },
      {
        Id: validity,
        Name: Validity,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: validity,
        ArgumentName: validity
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List secret scanning alerts for an enterprise,
    RequestType: ,
    ResponseType: ,
    MethodName: Secret-scanning/list-alerts-for-enterpriseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Secret-scanning/list-alerts-for-enterprise
  },
  {
    Id: Activity/list-public-events,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/events?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List public events,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-public-eventsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-public-events
  },
  {
    Id: Activity/get-feeds,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/feeds",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get feeds,
    RequestType: ,
    ResponseType: feed,
    MethodName: Activity/get-feedsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/get-feeds
  },
  {
    Id: Gists/list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists?since={since}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List gists for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/list
  },
  {
    Id: Gists/create,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/gists",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Description of the gist
<br/>Example: Example Ruby script,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: files,
        Name: Files,
        Type: {
          CSharpType: TestFiles,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
Names and content for the files that make up the gist
<br/>Example: ,
        ParameterName: files,
        ArgumentName: files
      },
      {
        Id: public,
        Name: Public,
        Type: {
          CSharpType: object?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: ,
        Summary: ,
        ParameterName: public,
        ArgumentName: public
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a gist,
    RequestType: ,
    ResponseType: gist-simple,
    MethodName: Gists/createAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/create
  },
  {
    Id: Gists/list-public,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/public?since={since}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List public gists,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/list-publicAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/list-public
  },
  {
    Id: Gists/list-starred,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/starred?since={since}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List starred gists,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/list-starredAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/list-starred
  },
  {
    Id: Gists/get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a gist,
    RequestType: ,
    ResponseType: gist-simple,
    MethodName: Gists/getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/get
  },
  {
    Id: Gists/update,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The description of the gist.
<br/>Example: Example Ruby script,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: files,
        Name: Files,
        Type: {
          CSharpType: TestFiles?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
(including extension) of the targeted gist file. For example: `hello.py`.

To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be
deleted if the specified object does not contain at least one of `content` or `filename`.
<br/>Example: ,
        ParameterName: files,
        ArgumentName: files
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a gist,
    RequestType: ,
    ResponseType: gist-simple,
    MethodName: Gists/updateAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/update
  },
  {
    Id: Gists/delete,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a gist,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/deleteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/delete
  },
  {
    Id: Gists/list-comments,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/comments?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List gist comments,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/list-commentsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/list-comments
  },
  {
    Id: Gists/create-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/comments",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The comment text.
<br/>Example: Body of the attachment,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a gist comment,
    RequestType: ,
    ResponseType: gist-comment,
    MethodName: Gists/create-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/create-comment
  },
  {
    Id: Gists/get-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a gist comment,
    RequestType: ,
    ResponseType: gist-comment,
    MethodName: Gists/get-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/get-comment
  },
  {
    Id: Gists/update-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The comment text.
<br/>Example: Body of the attachment,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a gist comment,
    RequestType: ,
    ResponseType: gist-comment,
    MethodName: Gists/update-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/update-comment
  },
  {
    Id: Gists/delete-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a gist comment,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/delete-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/delete-comment
  },
  {
    Id: Gists/list-commits,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/commits?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List gist commits,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/list-commitsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/list-commits
  },
  {
    Id: Gists/list-forks,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/forks?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List gist forks,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/list-forksAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/list-forks
  },
  {
    Id: Gists/fork,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/forks",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Fork a gist,
    RequestType: ,
    ResponseType: base-gist,
    MethodName: Gists/forkAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/fork
  },
  {
    Id: Gists/check-is-starred,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/star",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if a gist is starred,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/check-is-starredAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/check-is-starred
  },
  {
    Id: Gists/star,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/star",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Star a gist,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/starAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/star
  },
  {
    Id: Gists/unstar,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/star",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Unstar a gist,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/unstarAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/unstar
  },
  {
    Id: Gists/get-revision,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gists/{gistId}/{sha}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gist_id,
        Name: GistId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gistId,
        ArgumentName: gistId
      },
      {
        Id: sha,
        Name: Sha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: sha,
        ArgumentName: sha
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a gist revision,
    RequestType: ,
    ResponseType: gist-simple,
    MethodName: Gists/get-revisionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/get-revision
  },
  {
    Id: Gitignore/get-all-templates,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/gitignore/templates",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all gitignore templates,
    RequestType: ,
    ResponseType: ,
    MethodName: Gitignore/get-all-templatesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gitignore/get-all-templates
  },
  {
    Id: Gitignore/get-template,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/gitignore/templates/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a gitignore template,
    RequestType: ,
    ResponseType: gitignore-template,
    MethodName: Gitignore/get-templateAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gitignore/get-template
  },
  {
    Id: Apps/list-repos-accessible-to-installation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/installation/repositories?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories accessible to the app installation,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-repos-accessible-to-installationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-repos-accessible-to-installation
  },
  {
    Id: Apps/revoke-installation-access-token,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/installation/token",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Revoke an installation access token,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/revoke-installation-access-tokenAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/revoke-installation-access-token
  },
  {
    Id: Issues/list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/issues?filter={filter}&state={state}&labels={labels}&sort={sort}&direction={direction}&since={since}&collab={collab}&orgs={orgs}&owned={owned}&pulls={pulls}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: filter,
        Name: Filter,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Assigned,
            Created,
            Mentioned,
            Subscribed,
            Repos,
            All
          ],
          EnumValues: [
            assigned,
            created,
            mentioned,
            subscribed,
            repos,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Filter.Assigned,
        Summary:
<br/>Default Value: assigned,
        ParameterName: filter,
        ArgumentName: filter
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed,
            All
          ],
          EnumValues: [
            open,
            closed,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: State.Open,
        Summary:
<br/>Default Value: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: labels,
        ArgumentName: labels
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated,
            Comments
          ],
          EnumValues: [
            created,
            updated,
            comments
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: collab,
        Name: Collab,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: collab,
        ArgumentName: collab
      },
      {
        Id: orgs,
        Name: Orgs,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: orgs,
        ArgumentName: orgs
      },
      {
        Id: owned,
        Name: Owned,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: owned,
        ArgumentName: owned
      },
      {
        Id: pulls,
        Name: Pulls,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: pulls,
        ArgumentName: pulls
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List issues assigned to the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list
  },
  {
    Id: Licenses/get-all-commonly-used,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/licenses?featured={featured}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: featured,
        Name: Featured,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: featured,
        ArgumentName: featured
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all commonly used licenses,
    RequestType: ,
    ResponseType: ,
    MethodName: Licenses/get-all-commonly-usedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Licenses/get-all-commonly-used
  },
  {
    Id: Licenses/get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/licenses/{license}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: license,
        Name: License,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: license,
        ArgumentName: license
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a license,
    RequestType: ,
    ResponseType: license,
    MethodName: Licenses/getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Licenses/get
  },
  {
    Id: Markdown/render,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/markdown",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: text,
        Name: Text,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The Markdown text to render in HTML.,
        ParameterName: text,
        ArgumentName: text
      },
      {
        Id: mode,
        Name: Mode,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Markdown,
            Gfm
          ],
          EnumValues: [
            markdown,
            gfm
          ]
        },
        IsRequired: false,
        DefaultValue: TestMode.Markdown,
        Summary:
The rendering mode.
<br/>Default Value: markdown
<br/>Example: markdown,
        ParameterName: mode,
        ArgumentName: mode
      },
      {
        Id: context,
        Name: Context,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.,
        ParameterName: context,
        ArgumentName: context
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Render a Markdown document,
    RequestType: ,
    ResponseType: ,
    MethodName: Markdown/renderAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Markdown/render
  },
  {
    Id: Markdown/render-raw,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/markdown/raw",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Render a Markdown document in raw mode,
    RequestType: ,
    ResponseType: ,
    MethodName: Markdown/render-rawAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Markdown/render-raw
  },
  {
    Id: Apps/get-subscription-plan-for-account,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/marketplace_listing/accounts/{accountId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: account_id,
        Name: AccountId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: accountId,
        ArgumentName: accountId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a subscription plan for an account,
    RequestType: ,
    ResponseType: marketplace-purchase,
    MethodName: Apps/get-subscription-plan-for-accountAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/get-subscription-plan-for-account
  },
  {
    Id: Apps/list-plans,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/marketplace_listing/plans?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List plans,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-plansAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-plans
  },
  {
    Id: Apps/list-accounts-for-plan,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/marketplace_listing/plans/{planId}/accounts?sort={sort}&direction={direction}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: plan_id,
        Name: PlanId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: planId,
        ArgumentName: planId
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List accounts for a plan,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-accounts-for-planAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-accounts-for-plan
  },
  {
    Id: Apps/get-subscription-plan-for-account-stubbed,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/marketplace_listing/stubbed/accounts/{accountId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: account_id,
        Name: AccountId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: accountId,
        ArgumentName: accountId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a subscription plan for an account (stubbed),
    RequestType: ,
    ResponseType: marketplace-purchase,
    MethodName: Apps/get-subscription-plan-for-account-stubbedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/get-subscription-plan-for-account-stubbed
  },
  {
    Id: Apps/list-plans-stubbed,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/marketplace_listing/stubbed/plans?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List plans (stubbed),
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-plans-stubbedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-plans-stubbed
  },
  {
    Id: Apps/list-accounts-for-plan-stubbed,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/marketplace_listing/stubbed/plans/{planId}/accounts?sort={sort}&direction={direction}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: plan_id,
        Name: PlanId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: planId,
        ArgumentName: planId
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List accounts for a plan (stubbed),
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-accounts-for-plan-stubbedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-accounts-for-plan-stubbed
  },
  {
    Id: Meta/get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/meta",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get GitHub meta information,
    RequestType: ,
    ResponseType: api-overview,
    MethodName: Meta/getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Meta/get
  },
  {
    Id: Activity/list-public-events-for-repo-network,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/networks/{owner}/{repo}/events?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List public events for a network of repositories,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-public-events-for-repo-networkAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-public-events-for-repo-network
  },
  {
    Id: Activity/list-notifications-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/notifications?all={all}&participating={participating}&since={since}&before={before}&page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: all,
        Name: All,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: false,
        Summary:
<br/>Default Value: false,
        ParameterName: all,
        ArgumentName: all
      },
      {
        Id: participating,
        Name: Participating,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: false,
        Summary:
<br/>Default Value: false,
        ParameterName: participating,
        ArgumentName: participating
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 50,
        Summary:
<br/>Default Value: 50,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List notifications for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-notifications-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-notifications-for-authenticated-user
  },
  {
    Id: Activity/mark-notifications-as-read,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/notifications",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: last_read_at,
        Name: LastReadAt,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.,
        ParameterName: lastReadAt,
        ArgumentName: lastReadAt
      },
      {
        Id: read,
        Name: Read,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether the notification has been read.,
        ParameterName: read,
        ArgumentName: read
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Mark notifications as read,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/mark-notifications-as-readAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/mark-notifications-as-read
  },
  {
    Id: Activity/get-thread,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/notifications/threads/{threadId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: thread_id,
        Name: ThreadId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: threadId,
        ArgumentName: threadId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a thread,
    RequestType: ,
    ResponseType: thread,
    MethodName: Activity/get-threadAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/get-thread
  },
  {
    Id: Activity/mark-thread-as-read,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/notifications/threads/{threadId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: thread_id,
        Name: ThreadId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: threadId,
        ArgumentName: threadId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Mark a thread as read,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/mark-thread-as-readAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/mark-thread-as-read
  },
  {
    Id: Activity/mark-thread-as-done,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/notifications/threads/{threadId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: thread_id,
        Name: ThreadId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: threadId,
        ArgumentName: threadId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Mark a thread as done,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/mark-thread-as-doneAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/mark-thread-as-done
  },
  {
    Id: Activity/get-thread-subscription-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/notifications/threads/{threadId}/subscription",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: thread_id,
        Name: ThreadId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: threadId,
        ArgumentName: threadId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a thread subscription for the authenticated user,
    RequestType: ,
    ResponseType: thread-subscription,
    MethodName: Activity/get-thread-subscription-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/get-thread-subscription-for-authenticated-user
  },
  {
    Id: Activity/set-thread-subscription,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/notifications/threads/{threadId}/subscription",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: thread_id,
        Name: ThreadId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: threadId,
        ArgumentName: threadId
      },
      {
        Id: ignored,
        Name: Ignored,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether to block all notifications from a thread.
<br/>Default Value: false,
        ParameterName: ignored,
        ArgumentName: ignored
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set a thread subscription,
    RequestType: ,
    ResponseType: thread-subscription,
    MethodName: Activity/set-thread-subscriptionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/set-thread-subscription
  },
  {
    Id: Activity/delete-thread-subscription,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/notifications/threads/{threadId}/subscription",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: thread_id,
        Name: ThreadId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: threadId,
        ArgumentName: threadId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a thread subscription,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/delete-thread-subscriptionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/delete-thread-subscription
  },
  {
    Id: Meta/get-octocat,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/octocat?s={s}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: s,
        Name: S,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: s,
        ArgumentName: s
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get Octocat,
    RequestType: ,
    ResponseType: ,
    MethodName: Meta/get-octocatAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Meta/get-octocat
  },
  {
    Id: Orgs/list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/organizations?since={since}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organizations,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list
  },
  {
    Id: Orgs/get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization,
    RequestType: ,
    ResponseType: organization-full,
    MethodName: Orgs/getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/get
  },
  {
    Id: Orgs/update,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: billing_email,
        Name: BillingEmail,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Billing email address. This address is not publicized.,
        ParameterName: billingEmail,
        ArgumentName: billingEmail
      },
      {
        Id: company,
        Name: Company,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The company name.,
        ParameterName: company,
        ArgumentName: company
      },
      {
        Id: email,
        Name: Email,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The publicly visible email address.,
        ParameterName: email,
        ArgumentName: email
      },
      {
        Id: twitter_username,
        Name: TwitterUsername,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The Twitter username of the company.,
        ParameterName: twitterUsername,
        ArgumentName: twitterUsername
      },
      {
        Id: location,
        Name: Location,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The location.,
        ParameterName: location,
        ArgumentName: location
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The shorthand name of the company.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The description of the company. The maximum size is 160 characters.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: has_organization_projects,
        Name: HasOrganizationProjects,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether an organization can use organization projects.,
        ParameterName: hasOrganizationProjects,
        ArgumentName: hasOrganizationProjects
      },
      {
        Id: has_repository_projects,
        Name: HasRepositoryProjects,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether repositories that belong to the organization can use repository projects.,
        ParameterName: hasRepositoryProjects,
        ArgumentName: hasRepositoryProjects
      },
      {
        Id: default_repository_permission,
        Name: DefaultRepositoryPermission,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Read,
            Write,
            Admin,
            None
          ],
          EnumValues: [
            read,
            write,
            admin,
            none
          ]
        },
        IsRequired: false,
        DefaultValue: TestDefaultRepositoryPermission.Read,
        Summary:
Default permission level members have for organization repositories.
<br/>Default Value: read,
        ParameterName: defaultRepositoryPermission,
        ArgumentName: defaultRepositoryPermission
      },
      {
        Id: members_can_create_repositories,
        Name: MembersCanCreateRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
<br/>Default Value: true,
        ParameterName: membersCanCreateRepositories,
        ArgumentName: membersCanCreateRepositories
      },
      {
        Id: members_can_create_internal_repositories,
        Name: MembersCanCreateInternalRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.,
        ParameterName: membersCanCreateInternalRepositories,
        ArgumentName: membersCanCreateInternalRepositories
      },
      {
        Id: members_can_create_private_repositories,
        Name: MembersCanCreatePrivateRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.,
        ParameterName: membersCanCreatePrivateRepositories,
        ArgumentName: membersCanCreatePrivateRepositories
      },
      {
        Id: members_can_create_public_repositories,
        Name: MembersCanCreatePublicRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.,
        ParameterName: membersCanCreatePublicRepositories,
        ArgumentName: membersCanCreatePublicRepositories
      },
      {
        Id: members_allowed_repository_creation_type,
        Name: MembersAllowedRepositoryCreationType,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Private,
            None
          ],
          EnumValues: [
            all,
            private,
            none
          ]
        },
        IsRequired: false,
        Summary:
Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.,
        ParameterName: membersAllowedRepositoryCreationType,
        ArgumentName: membersAllowedRepositoryCreationType
      },
      {
        Id: members_can_create_pages,
        Name: MembersCanCreatePages,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
<br/>Default Value: true,
        ParameterName: membersCanCreatePages,
        ArgumentName: membersCanCreatePages
      },
      {
        Id: members_can_create_public_pages,
        Name: MembersCanCreatePublicPages,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
<br/>Default Value: true,
        ParameterName: membersCanCreatePublicPages,
        ArgumentName: membersCanCreatePublicPages
      },
      {
        Id: members_can_create_private_pages,
        Name: MembersCanCreatePrivatePages,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
<br/>Default Value: true,
        ParameterName: membersCanCreatePrivatePages,
        ArgumentName: membersCanCreatePrivatePages
      },
      {
        Id: members_can_fork_private_repositories,
        Name: MembersCanForkPrivateRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether organization members can fork private organization repositories.
<br/>Default Value: false,
        ParameterName: membersCanForkPrivateRepositories,
        ArgumentName: membersCanForkPrivateRepositories
      },
      {
        Id: web_commit_signoff_required,
        Name: WebCommitSignoffRequired,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
<br/>Default Value: false,
        ParameterName: webCommitSignoffRequired,
        ArgumentName: webCommitSignoffRequired
      },
      {
        Id: blog,
        Name: Blog,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
<br/>Example: "http://github.blog",
        ParameterName: blog,
        ArgumentName: blog
      },
      {
        Id: advanced_security_enabled_for_new_repositories,
        Name: AdvancedSecurityEnabledForNewRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Whether GitHub Advanced Security is automatically enabled for new repositories.

To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."

You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.,
        ParameterName: advancedSecurityEnabledForNewRepositories,
        ArgumentName: advancedSecurityEnabledForNewRepositories
      },
      {
        Id: dependabot_alerts_enabled_for_new_repositories,
        Name: DependabotAlertsEnabledForNewRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Whether Dependabot alerts is automatically enabled for new repositories.

To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."

You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.,
        ParameterName: dependabotAlertsEnabledForNewRepositories,
        ArgumentName: dependabotAlertsEnabledForNewRepositories
      },
      {
        Id: dependabot_security_updates_enabled_for_new_repositories,
        Name: DependabotSecurityUpdatesEnabledForNewRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Whether Dependabot security updates is automatically enabled for new repositories.

To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."

You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.,
        ParameterName: dependabotSecurityUpdatesEnabledForNewRepositories,
        ArgumentName: dependabotSecurityUpdatesEnabledForNewRepositories
      },
      {
        Id: dependency_graph_enabled_for_new_repositories,
        Name: DependencyGraphEnabledForNewRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Whether dependency graph is automatically enabled for new repositories.

To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."

You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.,
        ParameterName: dependencyGraphEnabledForNewRepositories,
        ArgumentName: dependencyGraphEnabledForNewRepositories
      },
      {
        Id: secret_scanning_enabled_for_new_repositories,
        Name: SecretScanningEnabledForNewRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Whether secret scanning is automatically enabled for new repositories.

To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."

You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.,
        ParameterName: secretScanningEnabledForNewRepositories,
        ArgumentName: secretScanningEnabledForNewRepositories
      },
      {
        Id: secret_scanning_push_protection_enabled_for_new_repositories,
        Name: SecretScanningPushProtectionEnabledForNewRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Whether secret scanning push protection is automatically enabled for new repositories.

To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."

You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.,
        ParameterName: secretScanningPushProtectionEnabledForNewRepositories,
        ArgumentName: secretScanningPushProtectionEnabledForNewRepositories
      },
      {
        Id: secret_scanning_push_protection_custom_link_enabled,
        Name: SecretScanningPushProtectionCustomLinkEnabled,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.,
        ParameterName: secretScanningPushProtectionCustomLinkEnabled,
        ArgumentName: secretScanningPushProtectionCustomLinkEnabled
      },
      {
        Id: secret_scanning_push_protection_custom_link,
        Name: SecretScanningPushProtectionCustomLink,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.,
        ParameterName: secretScanningPushProtectionCustomLink,
        ArgumentName: secretScanningPushProtectionCustomLink
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update an organization,
    RequestType: ,
    ResponseType: organization-full,
    MethodName: Orgs/updateAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/update
  },
  {
    Id: Orgs/delete,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/deleteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/delete
  },
  {
    Id: Actions/get-actions-cache-usage-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/cache/usage",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get GitHub Actions cache usage for an organization,
    RequestType: ,
    ResponseType: actions-cache-usage-org-enterprise,
    MethodName: Actions/get-actions-cache-usage-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-actions-cache-usage-for-org
  },
  {
    Id: Actions/get-actions-cache-usage-by-repo-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/cache/usage-by-repository?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories with GitHub Actions cache usage for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/get-actions-cache-usage-by-repo-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-actions-cache-usage-by-repo-for-org
  },
  {
    Id: Oidc/get-oidc-custom-sub-template-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/oidc/customization/sub",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the customization template for an OIDC subject claim for an organization,
    RequestType: ,
    ResponseType: oidc-custom-sub,
    MethodName: Oidc/get-oidc-custom-sub-template-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Oidc/get-oidc-custom-sub-template-for-org
  },
  {
    Id: Oidc/update-oidc-custom-sub-template-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/oidc/customization/sub",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: include_claim_keys,
        Name: IncludeClaimKeys,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.,
        ParameterName: includeClaimKeys,
        ArgumentName: includeClaimKeys
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set the customization template for an OIDC subject claim for an organization,
    RequestType: OidcCustomSub,
    ResponseType: empty-object,
    MethodName: Oidc/update-oidc-custom-sub-template-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Oidc/update-oidc-custom-sub-template-for-org
  },
  {
    Id: Actions/get-github-actions-permissions-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/permissions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get GitHub Actions permissions for an organization,
    RequestType: ,
    ResponseType: actions-organization-permissions,
    MethodName: Actions/get-github-actions-permissions-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-github-actions-permissions-organization
  },
  {
    Id: Actions/set-github-actions-permissions-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/permissions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: enabled_repositories,
        Name: EnabledRepositories,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            None,
            Selected
          ],
          EnumValues: [
            all,
            none,
            selected
          ]
        },
        IsRequired: true,
        Summary: The policy that controls the repositories in the organization that are allowed to run GitHub Actions.,
        ParameterName: enabledRepositories,
        ArgumentName: enabledRepositories
      },
      {
        Id: allowed_actions,
        Name: AllowedActions,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            LocalOnly,
            Selected
          ],
          EnumValues: [
            all,
            local_only,
            selected
          ]
        },
        IsRequired: false,
        Summary: The permissions policy that controls the actions and reusable workflows that are allowed to run.,
        ParameterName: allowedActions,
        ArgumentName: allowedActions
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set GitHub Actions permissions for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/set-github-actions-permissions-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-github-actions-permissions-organization
  },
  {
    Id: Actions/list-selected-repositories-enabled-github-actions-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/permissions/repositories?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List selected repositories enabled for GitHub Actions in an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-selected-repositories-enabled-github-actions-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-selected-repositories-enabled-github-actions-organization
  },
  {
    Id: Actions/set-selected-repositories-enabled-github-actions-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/permissions/repositories",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: List of repository IDs to enable for GitHub Actions.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set selected repositories enabled for GitHub Actions in an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/set-selected-repositories-enabled-github-actions-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-selected-repositories-enabled-github-actions-organization
  },
  {
    Id: Actions/enable-selected-repository-github-actions-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/permissions/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Enable a selected repository for GitHub Actions in an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/enable-selected-repository-github-actions-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/enable-selected-repository-github-actions-organization
  },
  {
    Id: Actions/disable-selected-repository-github-actions-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/permissions/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Disable a selected repository for GitHub Actions in an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/disable-selected-repository-github-actions-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/disable-selected-repository-github-actions-organization
  },
  {
    Id: Actions/get-allowed-actions-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/permissions/selected-actions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get allowed actions and reusable workflows for an organization,
    RequestType: ,
    ResponseType: selected-actions,
    MethodName: Actions/get-allowed-actions-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-allowed-actions-organization
  },
  {
    Id: Actions/set-allowed-actions-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/permissions/selected-actions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: github_owned_allowed,
        Name: GithubOwnedAllowed,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.,
        ParameterName: githubOwnedAllowed,
        ArgumentName: githubOwnedAllowed
      },
      {
        Id: verified_allowed,
        Name: VerifiedAllowed,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.,
        ParameterName: verifiedAllowed,
        ArgumentName: verifiedAllowed
      },
      {
        Id: patterns_allowed,
        Name: PatternsAllowed,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.

**Note**: The `patterns_allowed` setting only applies to public repositories.,
        ParameterName: patternsAllowed,
        ArgumentName: patternsAllowed
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set allowed actions and reusable workflows for an organization,
    RequestType: SelectedActions,
    ResponseType: ,
    MethodName: Actions/set-allowed-actions-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-allowed-actions-organization
  },
  {
    Id: Actions/get-github-actions-default-workflow-permissions-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/permissions/workflow",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get default workflow permissions for an organization,
    RequestType: ,
    ResponseType: actions-get-default-workflow-permissions,
    MethodName: Actions/get-github-actions-default-workflow-permissions-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-github-actions-default-workflow-permissions-organization
  },
  {
    Id: Actions/set-github-actions-default-workflow-permissions-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/permissions/workflow",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: default_workflow_permissions,
        Name: DefaultWorkflowPermissions,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Read,
            Write
          ],
          EnumValues: [
            read,
            write
          ]
        },
        IsRequired: false,
        Summary: The default workflow permissions granted to the GITHUB_TOKEN when running workflows.,
        ParameterName: defaultWorkflowPermissions,
        ArgumentName: defaultWorkflowPermissions
      },
      {
        Id: can_approve_pull_request_reviews,
        Name: CanApprovePullRequestReviews,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.,
        ParameterName: canApprovePullRequestReviews,
        ArgumentName: canApprovePullRequestReviews
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set default workflow permissions for an organization,
    RequestType: ActionsSetDefaultWorkflowPermissions,
    ResponseType: ,
    MethodName: Actions/set-github-actions-default-workflow-permissions-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-github-actions-default-workflow-permissions-organization
  },
  {
    Id: Actions/list-self-hosted-runners-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners?name={name}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List self-hosted runners for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-self-hosted-runners-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-self-hosted-runners-for-org
  },
  {
    Id: Actions/list-runner-applications-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners/downloads",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List runner applications for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-runner-applications-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-runner-applications-for-org
  },
  {
    Id: Actions/generate-runner-jitconfig-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners/generate-jitconfig",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the new runner.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: runner_group_id,
        Name: RunnerGroupId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The ID of the runner group to register the runner to.,
        ParameterName: runnerGroupId,
        ArgumentName: runnerGroupId
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.,
        ParameterName: labels,
        ArgumentName: labels
      },
      {
        Id: work_folder,
        Name: WorkFolder,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "_work",
        Summary:
The working directory to be used for job execution, relative to the runner install directory.
<br/>Default Value: _work,
        ParameterName: workFolder,
        ArgumentName: workFolder
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create configuration for a just-in-time runner for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/generate-runner-jitconfig-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/generate-runner-jitconfig-for-org
  },
  {
    Id: Actions/create-registration-token-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners/registration-token",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a registration token for an organization,
    RequestType: ,
    ResponseType: authentication-token,
    MethodName: Actions/create-registration-token-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/create-registration-token-for-org
  },
  {
    Id: Actions/create-remove-token-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners/remove-token",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a remove token for an organization,
    RequestType: ,
    ResponseType: authentication-token,
    MethodName: Actions/create-remove-token-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/create-remove-token-for-org
  },
  {
    Id: Actions/get-self-hosted-runner-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners/{runnerId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a self-hosted runner for an organization,
    RequestType: ,
    ResponseType: runner,
    MethodName: Actions/get-self-hosted-runner-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-self-hosted-runner-for-org
  },
  {
    Id: Actions/delete-self-hosted-runner-from-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners/{runnerId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a self-hosted runner from an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-self-hosted-runner-from-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-self-hosted-runner-from-org
  },
  {
    Id: Actions/list-labels-for-self-hosted-runner-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners/{runnerId}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List labels for a self-hosted runner for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-labels-for-self-hosted-runner-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-labels-for-self-hosted-runner-for-org
  },
  {
    Id: Actions/add-custom-labels-to-self-hosted-runner-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners/{runnerId}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The names of the custom labels to add to the runner.,
        ParameterName: labels,
        ArgumentName: labels
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add custom labels to a self-hosted runner for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/add-custom-labels-to-self-hosted-runner-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/add-custom-labels-to-self-hosted-runner-for-org
  },
  {
    Id: Actions/set-custom-labels-for-self-hosted-runner-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners/{runnerId}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.,
        ParameterName: labels,
        ArgumentName: labels
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set custom labels for a self-hosted runner for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/set-custom-labels-for-self-hosted-runner-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-custom-labels-for-self-hosted-runner-for-org
  },
  {
    Id: Actions/remove-all-custom-labels-from-self-hosted-runner-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners/{runnerId}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove all custom labels from a self-hosted runner for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/remove-all-custom-labels-from-self-hosted-runner-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/remove-all-custom-labels-from-self-hosted-runner-for-org
  },
  {
    Id: Actions/remove-custom-label-from-self-hosted-runner-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/runners/{runnerId}/labels/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a custom label from a self-hosted runner for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/remove-custom-label-from-self-hosted-runner-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/remove-custom-label-from-self-hosted-runner-for-org
  },
  {
    Id: Actions/list-org-secrets,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/secrets?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization secrets,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-org-secretsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-org-secrets
  },
  {
    Id: Actions/get-org-public-key,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/secrets/public-key",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization public key,
    RequestType: ,
    ResponseType: actions-public-key,
    MethodName: Actions/get-org-public-keyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-org-public-key
  },
  {
    Id: Actions/get-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization secret,
    RequestType: ,
    ResponseType: organization-actions-secret,
    MethodName: Actions/get-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-org-secret
  },
  {
    Id: Actions/create-or-update-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: encrypted_value,
        Name: EncryptedValue,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint.,
        ParameterName: encryptedValue,
        ArgumentName: encryptedValue
      },
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ID of the key you used to encrypt the secret.,
        ParameterName: keyId,
        ArgumentName: keyId
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Private,
            Selected
          ],
          EnumValues: [
            all,
            private,
            selected
          ]
        },
        IsRequired: true,
        Summary: Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Create or update an organization secret,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/create-or-update-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/create-or-update-org-secret
  },
  {
    Id: Actions/delete-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-org-secret
  },
  {
    Id: Actions/list-selected-repos-for-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/secrets/{secretName}/repositories?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List selected repositories for an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-selected-repos-for-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-selected-repos-for-org-secret
  },
  {
    Id: Actions/set-selected-repos-for-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/secrets/{secretName}/repositories",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set selected repositories for an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/set-selected-repos-for-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-selected-repos-for-org-secret
  },
  {
    Id: Actions/add-selected-repo-to-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/secrets/{secretName}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add selected repository to an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/add-selected-repo-to-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/add-selected-repo-to-org-secret
  },
  {
    Id: Actions/remove-selected-repo-from-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/secrets/{secretName}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove selected repository from an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/remove-selected-repo-from-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/remove-selected-repo-from-org-secret
  },
  {
    Id: Actions/list-org-variables,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/variables?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 10,
        Summary:
<br/>Default Value: 10,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization variables,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-org-variablesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-org-variables
  },
  {
    Id: Actions/create-org-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/variables",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the variable.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: value,
        Name: Value,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The value of the variable.,
        ParameterName: value,
        ArgumentName: value
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Private,
            Selected
          ],
          EnumValues: [
            all,
            private,
            selected
          ]
        },
        IsRequired: true,
        Summary: The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create an organization variable,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/create-org-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/create-org-variable
  },
  {
    Id: Actions/get-org-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/variables/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization variable,
    RequestType: ,
    ResponseType: organization-actions-variable,
    MethodName: Actions/get-org-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-org-variable
  },
  {
    Id: Actions/update-org-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/variables/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the variable.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: value,
        Name: Value,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The value of the variable.,
        ParameterName: value,
        ArgumentName: value
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Private,
            Selected
          ],
          EnumValues: [
            all,
            private,
            selected
          ]
        },
        IsRequired: false,
        Summary: The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update an organization variable,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/update-org-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/update-org-variable
  },
  {
    Id: Actions/delete-org-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/variables/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an organization variable,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-org-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-org-variable
  },
  {
    Id: Actions/list-selected-repos-for-org-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/variables/{name}/repositories?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List selected repositories for an organization variable,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-selected-repos-for-org-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-selected-repos-for-org-variable
  },
  {
    Id: Actions/set-selected-repos-for-org-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/variables/{name}/repositories",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The IDs of the repositories that can access the organization variable.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set selected repositories for an organization variable,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/set-selected-repos-for-org-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-selected-repos-for-org-variable
  },
  {
    Id: Actions/add-selected-repo-to-org-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/variables/{name}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add selected repository to an organization variable,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/add-selected-repo-to-org-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/add-selected-repo-to-org-variable
  },
  {
    Id: Actions/remove-selected-repo-from-org-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/actions/variables/{name}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove selected repository from an organization variable,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/remove-selected-repo-from-org-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/remove-selected-repo-from-org-variable
  },
  {
    Id: Orgs/list-blocked-users,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/blocks?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List users blocked by an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-blocked-usersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-blocked-users
  },
  {
    Id: Orgs/check-blocked-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/blocks/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if a user is blocked by an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/check-blocked-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/check-blocked-user
  },
  {
    Id: Orgs/block-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/blocks/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Block a user from an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/block-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/block-user
  },
  {
    Id: Orgs/unblock-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/blocks/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Unblock a user from an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/unblock-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/unblock-user
  },
  {
    Id: Code-scanning/list-alerts-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/code-scanning/alerts?tool_name={toolName}&tool_guid={toolGuid}&before={before}&after={after}&page={page}&per_page={perPage}&direction={direction}&state={state}&sort={sort}&severity={severity}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: tool_name,
        Name: ToolName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: The name of the tool used to generate the code scanning analysis.,
        ParameterName: toolName,
        ArgumentName: toolName
      },
      {
        Id: tool_guid,
        Name: ToolGuid,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.,
        ParameterName: toolGuid,
        ArgumentName: toolGuid
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: after,
        Name: After,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: after,
        ArgumentName: after
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed,
            Dismissed,
            Fixed
          ],
          EnumValues: [
            open,
            closed,
            dismissed,
            fixed
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: State of a code scanning alert.,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: severity,
        Name: Severity,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Critical,
            High,
            Medium,
            Low,
            Warning,
            Note,
            Error
          ],
          EnumValues: [
            critical,
            high,
            medium,
            low,
            warning,
            note,
            error
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: Severity of a code scanning alert.,
        ParameterName: severity,
        ArgumentName: severity
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List code scanning alerts for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Code-scanning/list-alerts-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/list-alerts-for-org
  },
  {
    Id: Codespaces/list-in-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List codespaces for the organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/list-in-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/list-in-organization
  },
  {
    Id: Codespaces/set-codespaces-access,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/access",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Disabled,
            SelectedMembers,
            AllMembers,
            AllMembersAndOutsideCollaborators
          ],
          EnumValues: [
            disabled,
            selected_members,
            all_members,
            all_members_and_outside_collaborators
          ]
        },
        IsRequired: true,
        Summary: Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: selected_usernames,
        Name: SelectedUsernames,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.,
        ParameterName: selectedUsernames,
        ArgumentName: selectedUsernames
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Manage access control for organization codespaces,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/set-codespaces-accessAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/set-codespaces-access
  },
  {
    Id: Codespaces/set-codespaces-access-users,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/access/selected_users",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: selected_usernames,
        Name: SelectedUsernames,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The usernames of the organization members whose codespaces be billed to the organization.,
        ParameterName: selectedUsernames,
        ArgumentName: selectedUsernames
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add users to Codespaces access for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/set-codespaces-access-usersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/set-codespaces-access-users
  },
  {
    Id: Codespaces/delete-codespaces-access-users,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/access/selected_users",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: selected_usernames,
        Name: SelectedUsernames,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The usernames of the organization members whose codespaces should not be billed to the organization.,
        ParameterName: selectedUsernames,
        ArgumentName: selectedUsernames
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove users from Codespaces access for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/delete-codespaces-access-usersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/delete-codespaces-access-users
  },
  {
    Id: Codespaces/list-org-secrets,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/secrets?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization secrets,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/list-org-secretsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/list-org-secrets
  },
  {
    Id: Codespaces/get-org-public-key,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/secrets/public-key",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization public key,
    RequestType: ,
    ResponseType: codespaces-public-key,
    MethodName: Codespaces/get-org-public-keyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/get-org-public-key
  },
  {
    Id: Codespaces/get-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization secret,
    RequestType: ,
    ResponseType: codespaces-org-secret,
    MethodName: Codespaces/get-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/get-org-secret
  },
  {
    Id: Codespaces/create-or-update-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: encrypted_value,
        Name: EncryptedValue,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.,
        ParameterName: encryptedValue,
        ArgumentName: encryptedValue
      },
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The ID of the key you used to encrypt the secret.,
        ParameterName: keyId,
        ArgumentName: keyId
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Private,
            Selected
          ],
          EnumValues: [
            all,
            private,
            selected
          ]
        },
        IsRequired: true,
        Summary: Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Create or update an organization secret,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Codespaces/create-or-update-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/create-or-update-org-secret
  },
  {
    Id: Codespaces/delete-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/delete-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/delete-org-secret
  },
  {
    Id: Codespaces/list-selected-repos-for-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/secrets/{secretName}/repositories?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List selected repositories for an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/list-selected-repos-for-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/list-selected-repos-for-org-secret
  },
  {
    Id: Codespaces/set-selected-repos-for-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/secrets/{secretName}/repositories",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set selected repositories for an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/set-selected-repos-for-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/set-selected-repos-for-org-secret
  },
  {
    Id: Codespaces/add-selected-repo-to-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/secrets/{secretName}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add selected repository to an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/add-selected-repo-to-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/add-selected-repo-to-org-secret
  },
  {
    Id: Codespaces/remove-selected-repo-from-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/codespaces/secrets/{secretName}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove selected repository from an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/remove-selected-repo-from-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/remove-selected-repo-from-org-secret
  },
  {
    Id: Copilot/get-copilot-organization-details,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/copilot/billing",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get Copilot seat information and settings for an organization,
    RequestType: ,
    ResponseType: copilot-organization-details,
    MethodName: Copilot/get-copilot-organization-detailsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Copilot/get-copilot-organization-details
  },
  {
    Id: Copilot/list-copilot-seats,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/copilot/billing/seats?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 50,
        Summary:
<br/>Default Value: 50,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List all Copilot seat assignments for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Copilot/list-copilot-seatsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Copilot/list-copilot-seats
  },
  {
    Id: Copilot/add-copilot-seats-for-teams,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/copilot/billing/selected_teams",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: selected_teams,
        Name: SelectedTeams,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: List of team names within the organization to which to grant access to GitHub Copilot.,
        ParameterName: selectedTeams,
        ArgumentName: selectedTeams
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add teams to the Copilot subscription for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Copilot/add-copilot-seats-for-teamsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Copilot/add-copilot-seats-for-teams
  },
  {
    Id: Copilot/cancel-copilot-seat-assignment-for-teams,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/copilot/billing/selected_teams",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: selected_teams,
        Name: SelectedTeams,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The names of teams from which to revoke access to GitHub Copilot.,
        ParameterName: selectedTeams,
        ArgumentName: selectedTeams
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove teams from the Copilot subscription for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Copilot/cancel-copilot-seat-assignment-for-teamsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Copilot/cancel-copilot-seat-assignment-for-teams
  },
  {
    Id: Copilot/add-copilot-seats-for-users,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/copilot/billing/selected_users",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: selected_usernames,
        Name: SelectedUsernames,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The usernames of the organization members to be granted access to GitHub Copilot.,
        ParameterName: selectedUsernames,
        ArgumentName: selectedUsernames
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add users to the Copilot subscription for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Copilot/add-copilot-seats-for-usersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Copilot/add-copilot-seats-for-users
  },
  {
    Id: Copilot/cancel-copilot-seat-assignment-for-users,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/copilot/billing/selected_users",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: selected_usernames,
        Name: SelectedUsernames,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The usernames of the organization members for which to revoke access to GitHub Copilot.,
        ParameterName: selectedUsernames,
        ArgumentName: selectedUsernames
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove users from the Copilot subscription for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Copilot/cancel-copilot-seat-assignment-for-usersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Copilot/cancel-copilot-seat-assignment-for-users
  },
  {
    Id: Copilot/usage-metrics-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/copilot/usage?since={since}&until={until}&page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: until,
        Name: Until,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: until,
        ArgumentName: until
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 28,
        Summary:
<br/>Default Value: 28,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a summary of Copilot usage for organization members,
    RequestType: ,
    ResponseType: ,
    MethodName: Copilot/usage-metrics-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Copilot/usage-metrics-for-org
  },
  {
    Id: Dependabot/list-alerts-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/dependabot/alerts?state={state}&severity={severity}&ecosystem={ecosystem}&package={package}&scope={scope}&sort={sort}&direction={direction}&before={before}&after={after}&first={first}&last={last}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: severity,
        Name: Severity,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: severity,
        ArgumentName: severity
      },
      {
        Id: ecosystem,
        Name: Ecosystem,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ecosystem,
        ArgumentName: ecosystem
      },
      {
        Id: package,
        Name: Package,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: package,
        ArgumentName: package
      },
      {
        Id: scope,
        Name: Scope,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Development,
            Runtime
          ],
          EnumValues: [
            development,
            runtime
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: scope,
        ArgumentName: scope
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: after,
        Name: After,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: after,
        ArgumentName: after
      },
      {
        Id: first,
        Name: First,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: first,
        ArgumentName: first
      },
      {
        Id: last,
        Name: Last,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: last,
        ArgumentName: last
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List Dependabot alerts for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Dependabot/list-alerts-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/list-alerts-for-org
  },
  {
    Id: Dependabot/list-org-secrets,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/dependabot/secrets?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization secrets,
    RequestType: ,
    ResponseType: ,
    MethodName: Dependabot/list-org-secretsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/list-org-secrets
  },
  {
    Id: Dependabot/get-org-public-key,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/dependabot/secrets/public-key",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization public key,
    RequestType: ,
    ResponseType: dependabot-public-key,
    MethodName: Dependabot/get-org-public-keyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/get-org-public-key
  },
  {
    Id: Dependabot/get-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/dependabot/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization secret,
    RequestType: ,
    ResponseType: organization-dependabot-secret,
    MethodName: Dependabot/get-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/get-org-secret
  },
  {
    Id: Dependabot/create-or-update-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/dependabot/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: encrypted_value,
        Name: EncryptedValue,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint.,
        ParameterName: encryptedValue,
        ArgumentName: encryptedValue
      },
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ID of the key you used to encrypt the secret.,
        ParameterName: keyId,
        ArgumentName: keyId
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Private,
            Selected
          ],
          EnumValues: [
            all,
            private,
            selected
          ]
        },
        IsRequired: true,
        Summary: Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Create or update an organization secret,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Dependabot/create-or-update-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/create-or-update-org-secret
  },
  {
    Id: Dependabot/delete-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/dependabot/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Dependabot/delete-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/delete-org-secret
  },
  {
    Id: Dependabot/list-selected-repos-for-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/dependabot/secrets/{secretName}/repositories?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List selected repositories for an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Dependabot/list-selected-repos-for-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/list-selected-repos-for-org-secret
  },
  {
    Id: Dependabot/set-selected-repos-for-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/dependabot/secrets/{secretName}/repositories",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set selected repositories for an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Dependabot/set-selected-repos-for-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/set-selected-repos-for-org-secret
  },
  {
    Id: Dependabot/add-selected-repo-to-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/dependabot/secrets/{secretName}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add selected repository to an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Dependabot/add-selected-repo-to-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/add-selected-repo-to-org-secret
  },
  {
    Id: Dependabot/remove-selected-repo-from-org-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/dependabot/secrets/{secretName}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove selected repository from an organization secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Dependabot/remove-selected-repo-from-org-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/remove-selected-repo-from-org-secret
  },
  {
    Id: Packages/list-docker-migration-conflicting-packages-for-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/docker/conflicts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get list of conflicting packages during Docker migration for organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/list-docker-migration-conflicting-packages-for-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/list-docker-migration-conflicting-packages-for-organization
  },
  {
    Id: Activity/list-public-org-events,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/events?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List public organization events,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-public-org-eventsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-public-org-events
  },
  {
    Id: Orgs/list-failed-invitations,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/failed_invitations?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List failed organization invitations,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-failed-invitationsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-failed-invitations
  },
  {
    Id: Orgs/list-webhooks,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/hooks?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization webhooks,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-webhooksAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-webhooks
  },
  {
    Id: Orgs/create-webhook,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/hooks",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: Must be passed as "web".,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: config,
        Name: Config,
        Type: {
          CSharpType: TestConfig,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: Key/value pairs to provide settings for this webhook.,
        ParameterName: config,
        ArgumentName: config
      },
      {
        Id: events,
        Name: Events,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: ,
        Summary:
Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
<br/>Default Value: [push],
        ParameterName: events,
        ArgumentName: events
      },
      {
        Id: active,
        Name: Active,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
<br/>Default Value: true,
        ParameterName: active,
        ArgumentName: active
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create an organization webhook,
    RequestType: ,
    ResponseType: org-hook,
    MethodName: Orgs/create-webhookAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/create-webhook
  },
  {
    Id: Orgs/get-webhook,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/hooks/{hookId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization webhook,
    RequestType: ,
    ResponseType: org-hook,
    MethodName: Orgs/get-webhookAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/get-webhook
  },
  {
    Id: Orgs/update-webhook,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/hooks/{hookId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      },
      {
        Id: config,
        Name: Config,
        Type: {
          CSharpType: TestConfig?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Key/value pairs to provide settings for this webhook.,
        ParameterName: config,
        ArgumentName: config
      },
      {
        Id: events,
        Name: Events,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: ,
        Summary:
Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
<br/>Default Value: [push],
        ParameterName: events,
        ArgumentName: events
      },
      {
        Id: active,
        Name: Active,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
<br/>Default Value: true,
        ParameterName: active,
        ArgumentName: active
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
<br/>Example: "web",
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update an organization webhook,
    RequestType: ,
    ResponseType: org-hook,
    MethodName: Orgs/update-webhookAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/update-webhook
  },
  {
    Id: Orgs/delete-webhook,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/hooks/{hookId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an organization webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/delete-webhookAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/delete-webhook
  },
  {
    Id: Orgs/get-webhook-config-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/hooks/{hookId}/config",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a webhook configuration for an organization,
    RequestType: ,
    ResponseType: webhook-config,
    MethodName: Orgs/get-webhook-config-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/get-webhook-config-for-org
  },
  {
    Id: Orgs/update-webhook-config-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/hooks/{hookId}/config",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      },
      {
        Id: url,
        Name: Url,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The URL to which the payloads will be delivered.
<br/>Example: https://example.com/webhook,
        ParameterName: url,
        ArgumentName: url
      },
      {
        Id: content_type,
        Name: ContentType,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
<br/>Example: "json",
        ParameterName: contentType,
        ArgumentName: contentType
      },
      {
        Id: secret,
        Name: Secret,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
<br/>Example: "********",
        ParameterName: secret,
        ArgumentName: secret
      },
      {
        Id: insecure_ssl,
        Name: InsecureSsl,
        Type: {
          CSharpType: WebhookConfigInsecureSsl?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: insecureSsl,
        ArgumentName: insecureSsl
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a webhook configuration for an organization,
    RequestType: ,
    ResponseType: webhook-config,
    MethodName: Orgs/update-webhook-config-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/update-webhook-config-for-org
  },
  {
    Id: Orgs/list-webhook-deliveries,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/hooks/{hookId}/deliveries?per_page={perPage}&cursor={cursor}&redelivery={redelivery}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: cursor,
        Name: Cursor,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: cursor,
        ArgumentName: cursor
      },
      {
        Id: redelivery,
        Name: Redelivery,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: redelivery,
        ArgumentName: redelivery
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List deliveries for an organization webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-webhook-deliveriesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-webhook-deliveries
  },
  {
    Id: Orgs/get-webhook-delivery,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/hooks/{hookId}/deliveries/{deliveryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      },
      {
        Id: delivery_id,
        Name: DeliveryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deliveryId,
        ArgumentName: deliveryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a webhook delivery for an organization webhook,
    RequestType: ,
    ResponseType: hook-delivery,
    MethodName: Orgs/get-webhook-deliveryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/get-webhook-delivery
  },
  {
    Id: Orgs/redeliver-webhook-delivery,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/hooks/{hookId}/deliveries/{deliveryId}/attempts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      },
      {
        Id: delivery_id,
        Name: DeliveryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deliveryId,
        ArgumentName: deliveryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Redeliver a delivery for an organization webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/redeliver-webhook-deliveryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/redeliver-webhook-delivery
  },
  {
    Id: Orgs/ping-webhook,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/hooks/{hookId}/pings",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Ping an organization webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/ping-webhookAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/ping-webhook
  },
  {
    Id: Apps/get-org-installation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/installation",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization installation for the authenticated app,
    RequestType: ,
    ResponseType: installation,
    MethodName: Apps/get-org-installationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/get-org-installation
  },
  {
    Id: Orgs/list-app-installations,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/installations?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List app installations for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-app-installationsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-app-installations
  },
  {
    Id: Interactions/get-restrictions-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/interaction-limits",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get interaction restrictions for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Interactions/get-restrictions-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Interactions/get-restrictions-for-org
  },
  {
    Id: Interactions/set-restrictions-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/interaction-limits",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: limit,
        Name: Limit,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            ExistingUsers,
            ContributorsOnly,
            CollaboratorsOnly
          ],
          EnumValues: [
            existing_users,
            contributors_only,
            collaborators_only
          ]
        },
        IsRequired: true,
        Summary:
The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
<br/>Example: collaborators_only,
        ParameterName: limit,
        ArgumentName: limit
      },
      {
        Id: expiry,
        Name: Expiry,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            OneDay,
            ThreeDays,
            OneWeek,
            OneMonth,
            SixMonths
          ],
          EnumValues: [
            one_day,
            three_days,
            one_week,
            one_month,
            six_months
          ]
        },
        IsRequired: false,
        Summary:
The duration of the interaction restriction. Default: `one_day`.
<br/>Example: one_month,
        ParameterName: expiry,
        ArgumentName: expiry
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set interaction restrictions for an organization,
    RequestType: InteractionLimit,
    ResponseType: interaction-limit-response,
    MethodName: Interactions/set-restrictions-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Interactions/set-restrictions-for-org
  },
  {
    Id: Interactions/remove-restrictions-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/interaction-limits",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove interaction restrictions for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Interactions/remove-restrictions-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Interactions/remove-restrictions-for-org
  },
  {
    Id: Orgs/list-pending-invitations,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/invitations?per_page={perPage}&page={page}&role={role}&invitation_source={invitationSource}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: role,
        Name: Role,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Admin,
            DirectMember,
            BillingManager,
            HiringManager
          ],
          EnumValues: [
            all,
            admin,
            direct_member,
            billing_manager,
            hiring_manager
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Role.All,
        Summary:
<br/>Default Value: all,
        ParameterName: role,
        ArgumentName: role
      },
      {
        Id: invitation_source,
        Name: InvitationSource,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Member,
            Scim
          ],
          EnumValues: [
            all,
            member,
            scim
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: InvitationSource.All,
        Summary:
<br/>Default Value: all,
        ParameterName: invitationSource,
        ArgumentName: invitationSource
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List pending organization invitations,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-pending-invitationsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-pending-invitations
  },
  {
    Id: Orgs/create-invitation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/invitations",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: invitee_id,
        Name: InviteeId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: **Required unless you provide `email`**. GitHub user ID for the person you are inviting.,
        ParameterName: inviteeId,
        ArgumentName: inviteeId
      },
      {
        Id: email,
        Name: Email,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.,
        ParameterName: email,
        ArgumentName: email
      },
      {
        Id: role,
        Name: Role,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Admin,
            DirectMember,
            BillingManager,
            Reinstate
          ],
          EnumValues: [
            admin,
            direct_member,
            billing_manager,
            reinstate
          ]
        },
        IsRequired: false,
        DefaultValue: TestRole.DirectMember,
        Summary:
The role for the new member. 
 * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
 * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  
 * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization. 
 * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
<br/>Default Value: direct_member,
        ParameterName: role,
        ArgumentName: role
      },
      {
        Id: team_ids,
        Name: TeamIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Specify IDs for the teams you want to invite new members to.,
        ParameterName: teamIds,
        ArgumentName: teamIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create an organization invitation,
    RequestType: ,
    ResponseType: organization-invitation,
    MethodName: Orgs/create-invitationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/create-invitation
  },
  {
    Id: Orgs/cancel-invitation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/invitations/{invitationId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: invitation_id,
        Name: InvitationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: invitationId,
        ArgumentName: invitationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Cancel an organization invitation,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/cancel-invitationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/cancel-invitation
  },
  {
    Id: Orgs/list-invitation-teams,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/invitations/{invitationId}/teams?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: invitation_id,
        Name: InvitationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: invitationId,
        ArgumentName: invitationId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization invitation teams,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-invitation-teamsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-invitation-teams
  },
  {
    Id: Issues/list-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/issues?filter={filter}&state={state}&labels={labels}&sort={sort}&direction={direction}&since={since}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: filter,
        Name: Filter,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Assigned,
            Created,
            Mentioned,
            Subscribed,
            Repos,
            All
          ],
          EnumValues: [
            assigned,
            created,
            mentioned,
            subscribed,
            repos,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Filter.Assigned,
        Summary:
<br/>Default Value: assigned,
        ParameterName: filter,
        ArgumentName: filter
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed,
            All
          ],
          EnumValues: [
            open,
            closed,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: State.Open,
        Summary:
<br/>Default Value: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: labels,
        ArgumentName: labels
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated,
            Comments
          ],
          EnumValues: [
            created,
            updated,
            comments
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization issues assigned to the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-for-org
  },
  {
    Id: Orgs/list-members,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/members?filter={filter}&role={role}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: filter,
        Name: Filter,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            _2faDisabled,
            All
          ],
          EnumValues: [
            2fa_disabled,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Filter.All,
        Summary:
<br/>Default Value: all,
        ParameterName: filter,
        ArgumentName: filter
      },
      {
        Id: role,
        Name: Role,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Admin,
            Member
          ],
          EnumValues: [
            all,
            admin,
            member
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Role.All,
        Summary:
<br/>Default Value: all,
        ParameterName: role,
        ArgumentName: role
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization members,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-membersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-members
  },
  {
    Id: Orgs/check-membership-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/members/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check organization membership for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/check-membership-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/check-membership-for-user
  },
  {
    Id: Orgs/remove-member,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/members/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove an organization member,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/remove-memberAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/remove-member
  },
  {
    Id: Codespaces/get-codespaces-for-user-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/members/{username}/codespaces?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List codespaces for a user in organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/get-codespaces-for-user-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/get-codespaces-for-user-in-org
  },
  {
    Id: Codespaces/delete-from-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/members/{username}/codespaces/{codespaceName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: codespace_name,
        Name: CodespaceName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codespaceName,
        ArgumentName: codespaceName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a codespace from the organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/delete-from-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/delete-from-organization
  },
  {
    Id: Codespaces/stop-in-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/members/{username}/codespaces/{codespaceName}/stop",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: codespace_name,
        Name: CodespaceName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codespaceName,
        ArgumentName: codespaceName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Stop a codespace for an organization user,
    RequestType: ,
    ResponseType: codespace,
    MethodName: Codespaces/stop-in-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/stop-in-organization
  },
  {
    Id: Copilot/get-copilot-seat-details-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/members/{username}/copilot",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get Copilot seat assignment details for a user,
    RequestType: ,
    ResponseType: copilot-seat-details,
    MethodName: Copilot/get-copilot-seat-details-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Copilot/get-copilot-seat-details-for-user
  },
  {
    Id: Orgs/get-membership-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/memberships/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get organization membership for a user,
    RequestType: ,
    ResponseType: org-membership,
    MethodName: Orgs/get-membership-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/get-membership-for-user
  },
  {
    Id: Orgs/set-membership-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/memberships/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: role,
        Name: Role,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Admin,
            Member
          ],
          EnumValues: [
            admin,
            member
          ]
        },
        IsRequired: false,
        DefaultValue: TestRole.Member,
        Summary:
The role to give the user in the organization. Can be one of:  
 * `admin` - The user will become an owner of the organization.  
 * `member` - The user will become a non-owner member of the organization.
<br/>Default Value: member,
        ParameterName: role,
        ArgumentName: role
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set organization membership for a user,
    RequestType: ,
    ResponseType: org-membership,
    MethodName: Orgs/set-membership-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/set-membership-for-user
  },
  {
    Id: Orgs/remove-membership-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/memberships/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove organization membership for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/remove-membership-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/remove-membership-for-user
  },
  {
    Id: Migrations/list-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/migrations?per_page={perPage}&page={page}&{string.Join("&", exclude.Select(static x => $"exclude={x}"))}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: exclude,
        Name: Exclude,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: exclude,
        ArgumentName: exclude
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization migrations,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/list-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/list-for-org
  },
  {
    Id: Migrations/start-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/migrations",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: repositories,
        Name: Repositories,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A list of arrays indicating which repositories should be migrated.,
        ParameterName: repositories,
        ArgumentName: repositories
      },
      {
        Id: lock_repositories,
        Name: LockRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
<br/>Default Value: false
<br/>Example: true,
        ParameterName: lockRepositories,
        ArgumentName: lockRepositories
      },
      {
        Id: exclude_metadata,
        Name: ExcludeMetadata,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Indicates whether metadata should be excluded and only git source should be included for the migration.
<br/>Default Value: false,
        ParameterName: excludeMetadata,
        ArgumentName: excludeMetadata
      },
      {
        Id: exclude_git_data,
        Name: ExcludeGitData,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Indicates whether the repository git data should be excluded from the migration.
<br/>Default Value: false,
        ParameterName: excludeGitData,
        ArgumentName: excludeGitData
      },
      {
        Id: exclude_attachments,
        Name: ExcludeAttachments,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
<br/>Default Value: false
<br/>Example: true,
        ParameterName: excludeAttachments,
        ArgumentName: excludeAttachments
      },
      {
        Id: exclude_releases,
        Name: ExcludeReleases,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
<br/>Default Value: false
<br/>Example: true,
        ParameterName: excludeReleases,
        ArgumentName: excludeReleases
      },
      {
        Id: exclude_owner_projects,
        Name: ExcludeOwnerProjects,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Indicates whether projects owned by the organization or users should be excluded. from the migration.
<br/>Default Value: false
<br/>Example: true,
        ParameterName: excludeOwnerProjects,
        ArgumentName: excludeOwnerProjects
      },
      {
        Id: org_metadata_only,
        Name: OrgMetadataOnly,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
<br/>Default Value: false
<br/>Example: true,
        ParameterName: orgMetadataOnly,
        ArgumentName: orgMetadataOnly
      },
      {
        Id: exclude,
        Name: Exclude,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Exclude related items from being returned in the response in order to improve performance of the request.,
        ParameterName: exclude,
        ArgumentName: exclude
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Start an organization migration,
    RequestType: ,
    ResponseType: migration,
    MethodName: Migrations/start-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/start-for-org
  },
  {
    Id: Migrations/get-status-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/migrations/{migrationId}?{string.Join("&", exclude.Select(static x => $"exclude={x}"))}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: migration_id,
        Name: MigrationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: migrationId,
        ArgumentName: migrationId
      },
      {
        Id: exclude,
        Name: Exclude,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: exclude,
        ArgumentName: exclude
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization migration status,
    RequestType: ,
    ResponseType: migration,
    MethodName: Migrations/get-status-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/get-status-for-org
  },
  {
    Id: Migrations/download-archive-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/migrations/{migrationId}/archive",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: migration_id,
        Name: MigrationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: migrationId,
        ArgumentName: migrationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Download an organization migration archive,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/download-archive-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/download-archive-for-org
  },
  {
    Id: Migrations/delete-archive-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/migrations/{migrationId}/archive",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: migration_id,
        Name: MigrationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: migrationId,
        ArgumentName: migrationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an organization migration archive,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/delete-archive-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/delete-archive-for-org
  },
  {
    Id: Migrations/unlock-repo-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/migrations/{migrationId}/repos/{repoName}/lock",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: migration_id,
        Name: MigrationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: migrationId,
        ArgumentName: migrationId
      },
      {
        Id: repo_name,
        Name: RepoName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repoName,
        ArgumentName: repoName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Unlock an organization repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/unlock-repo-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/unlock-repo-for-org
  },
  {
    Id: Migrations/list-repos-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/migrations/{migrationId}/repositories?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: migration_id,
        Name: MigrationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: migrationId,
        ArgumentName: migrationId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories in an organization migration,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/list-repos-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/list-repos-for-org
  },
  {
    Id: Orgs/list-organization-fine-grained-permissions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-fine-grained-permissions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization fine-grained permissions for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-organization-fine-grained-permissionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-organization-fine-grained-permissions
  },
  {
    Id: Orgs/list-org-roles,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all organization roles for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-org-rolesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-org-roles
  },
  {
    Id: Orgs/create-custom-organization-role,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the custom role.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A short description about the intended usage of this role or what permissions it grants.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: permissions,
        Name: Permissions,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A list of additional permissions included in this role.,
        ParameterName: permissions,
        ArgumentName: permissions
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a custom organization role,
    RequestType: ,
    ResponseType: organization-role,
    MethodName: Orgs/create-custom-organization-roleAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/create-custom-organization-role
  },
  {
    Id: Orgs/revoke-all-org-roles-team,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles/teams/{teamSlug}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove all organization roles for a team,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/revoke-all-org-roles-teamAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/revoke-all-org-roles-team
  },
  {
    Id: Orgs/assign-team-to-org-role,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles/teams/{teamSlug}/{roleId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: role_id,
        Name: RoleId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: roleId,
        ArgumentName: roleId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Assign an organization role to a team,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/assign-team-to-org-roleAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/assign-team-to-org-role
  },
  {
    Id: Orgs/revoke-org-role-team,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles/teams/{teamSlug}/{roleId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: role_id,
        Name: RoleId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: roleId,
        ArgumentName: roleId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove an organization role from a team,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/revoke-org-role-teamAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/revoke-org-role-team
  },
  {
    Id: Orgs/revoke-all-org-roles-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles/users/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove all organization roles for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/revoke-all-org-roles-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/revoke-all-org-roles-user
  },
  {
    Id: Orgs/assign-user-to-org-role,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles/users/{username}/{roleId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: role_id,
        Name: RoleId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: roleId,
        ArgumentName: roleId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Assign an organization role to a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/assign-user-to-org-roleAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/assign-user-to-org-role
  },
  {
    Id: Orgs/revoke-org-role-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles/users/{username}/{roleId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: role_id,
        Name: RoleId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: roleId,
        ArgumentName: roleId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove an organization role from a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/revoke-org-role-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/revoke-org-role-user
  },
  {
    Id: Orgs/get-org-role,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles/{roleId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: role_id,
        Name: RoleId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: roleId,
        ArgumentName: roleId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization role,
    RequestType: ,
    ResponseType: organization-role,
    MethodName: Orgs/get-org-roleAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/get-org-role
  },
  {
    Id: Orgs/patch-custom-organization-role,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles/{roleId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: role_id,
        Name: RoleId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: roleId,
        ArgumentName: roleId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the custom role.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A short description about the intended usage of this role or what permissions it grants.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: permissions,
        Name: Permissions,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A list of additional permissions included in this role.,
        ParameterName: permissions,
        ArgumentName: permissions
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a custom organization role,
    RequestType: ,
    ResponseType: organization-role,
    MethodName: Orgs/patch-custom-organization-roleAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/patch-custom-organization-role
  },
  {
    Id: Orgs/delete-custom-organization-role,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles/{roleId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: role_id,
        Name: RoleId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: roleId,
        ArgumentName: roleId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a custom organization role.,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/delete-custom-organization-roleAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/delete-custom-organization-role
  },
  {
    Id: Orgs/list-org-role-teams,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles/{roleId}/teams?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: role_id,
        Name: RoleId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: roleId,
        ArgumentName: roleId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List teams that are assigned to an organization role,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-org-role-teamsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-org-role-teams
  },
  {
    Id: Orgs/list-org-role-users,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/organization-roles/{roleId}/users?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: role_id,
        Name: RoleId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: roleId,
        ArgumentName: roleId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List users that are assigned to an organization role,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-org-role-usersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-org-role-users
  },
  {
    Id: Orgs/list-outside-collaborators,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/outside_collaborators?filter={filter}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: filter,
        Name: Filter,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            _2faDisabled,
            All
          ],
          EnumValues: [
            2fa_disabled,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Filter.All,
        Summary:
<br/>Default Value: all,
        ParameterName: filter,
        ArgumentName: filter
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List outside collaborators for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-outside-collaboratorsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-outside-collaborators
  },
  {
    Id: Orgs/convert-member-to-outside-collaborator,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/outside_collaborators/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: async,
        Name: Async,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
<br/>Default Value: false,
        ParameterName: async,
        ArgumentName: async
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Convert an organization member to outside collaborator,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/convert-member-to-outside-collaboratorAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/convert-member-to-outside-collaborator
  },
  {
    Id: Orgs/remove-outside-collaborator,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/outside_collaborators/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove outside collaborator from an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/remove-outside-collaboratorAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/remove-outside-collaborator
  },
  {
    Id: Packages/list-packages-for-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/packages?package_type={packageType}&visibility={visibility}&page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Public,
            Private,
            Internal
          ],
          EnumValues: [
            public,
            private,
            internal
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List packages for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/list-packages-for-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/list-packages-for-organization
  },
  {
    Id: Packages/get-package-for-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/packages/{packageType}/{packageName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a package for an organization,
    RequestType: ,
    ResponseType: package,
    MethodName: Packages/get-package-for-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/get-package-for-organization
  },
  {
    Id: Packages/delete-package-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/packages/{packageType}/{packageName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a package for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/delete-package-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/delete-package-for-org
  },
  {
    Id: Packages/restore-package-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/packages/{packageType}/{packageName}/restore?token={token}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: token,
        Name: Token,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: token,
        ArgumentName: token
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Restore a package for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/restore-package-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/restore-package-for-org
  },
  {
    Id: Packages/get-all-package-versions-for-package-owned-by-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/packages/{packageType}/{packageName}/versions?page={page}&per_page={perPage}&state={state}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Active,
            Deleted
          ],
          EnumValues: [
            active,
            deleted
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: State.Active,
        Summary:
<br/>Default Value: active,
        ParameterName: state,
        ArgumentName: state
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List package versions for a package owned by an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/get-all-package-versions-for-package-owned-by-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/get-all-package-versions-for-package-owned-by-org
  },
  {
    Id: Packages/get-package-version-for-organization,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: package_version_id,
        Name: PackageVersionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageVersionId,
        ArgumentName: packageVersionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a package version for an organization,
    RequestType: ,
    ResponseType: package-version,
    MethodName: Packages/get-package-version-for-organizationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/get-package-version-for-organization
  },
  {
    Id: Packages/delete-package-version-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: package_version_id,
        Name: PackageVersionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageVersionId,
        ArgumentName: packageVersionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete package version for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/delete-package-version-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/delete-package-version-for-org
  },
  {
    Id: Packages/restore-package-version-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}/restore",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: package_version_id,
        Name: PackageVersionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageVersionId,
        ArgumentName: packageVersionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Restore package version for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/restore-package-version-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/restore-package-version-for-org
  },
  {
    Id: Orgs/list-pat-grant-requests,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/personal-access-token-requests?per_page={perPage}&page={page}&sort={sort}&direction={direction}&{string.Join("&", owner.Select(static x => $"owner={x}"))}&repository={repository}&permission={permission}&last_used_before={lastUsedBefore}&last_used_after={lastUsedAfter}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            CreatedAt
          ],
          EnumValues: [
            created_at
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.CreatedAt,
        Summary:
<br/>Default Value: created_at,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: owner[]=octocat1,owner[]=octocat2,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repository,
        Name: Repository,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: Hello-World,
        ParameterName: repository,
        ArgumentName: repository
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: issues_read,
        ParameterName: permission,
        ArgumentName: permission
      },
      {
        Id: last_used_before,
        Name: LastUsedBefore,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: lastUsedBefore,
        ArgumentName: lastUsedBefore
      },
      {
        Id: last_used_after,
        Name: LastUsedAfter,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: lastUsedAfter,
        ArgumentName: lastUsedAfter
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List requests to access organization resources with fine-grained personal access tokens,
    RequestType: ,
    ResponseType: basic-error,
    MethodName: Orgs/list-pat-grant-requestsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-pat-grant-requests
  },
  {
    Id: Orgs/review-pat-grant-requests-in-bulk,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/personal-access-token-requests",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: pat_request_ids,
        Name: PatRequestIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.,
        ParameterName: patRequestIds,
        ArgumentName: patRequestIds
      },
      {
        Id: action,
        Name: Action,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Approve,
            Deny
          ],
          EnumValues: [
            approve,
            deny
          ]
        },
        IsRequired: true,
        Summary: Action to apply to the requests.,
        ParameterName: action,
        ArgumentName: action
      },
      {
        Id: reason,
        Name: Reason,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Reason for approving or denying the requests. Max 1024 characters.,
        ParameterName: reason,
        ArgumentName: reason
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Review requests to access organization resources with fine-grained personal access tokens,
    RequestType: ,
    ResponseType: basic-error,
    MethodName: Orgs/review-pat-grant-requests-in-bulkAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/review-pat-grant-requests-in-bulk
  },
  {
    Id: Orgs/review-pat-grant-request,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/personal-access-token-requests/{patRequestId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: pat_request_id,
        Name: PatRequestId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: patRequestId,
        ArgumentName: patRequestId
      },
      {
        Id: action,
        Name: Action,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Approve,
            Deny
          ],
          EnumValues: [
            approve,
            deny
          ]
        },
        IsRequired: true,
        Summary: Action to apply to the request.,
        ParameterName: action,
        ArgumentName: action
      },
      {
        Id: reason,
        Name: Reason,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Reason for approving or denying the request. Max 1024 characters.,
        ParameterName: reason,
        ArgumentName: reason
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Review a request to access organization resources with a fine-grained personal access token,
    RequestType: ,
    ResponseType: basic-error,
    MethodName: Orgs/review-pat-grant-requestAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/review-pat-grant-request
  },
  {
    Id: Orgs/list-pat-grant-request-repositories,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/personal-access-token-requests/{patRequestId}/repositories?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: pat_request_id,
        Name: PatRequestId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: patRequestId,
        ArgumentName: patRequestId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories requested to be accessed by a fine-grained personal access token,
    RequestType: ,
    ResponseType: basic-error,
    MethodName: Orgs/list-pat-grant-request-repositoriesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-pat-grant-request-repositories
  },
  {
    Id: Orgs/list-pat-grants,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/personal-access-tokens?per_page={perPage}&page={page}&sort={sort}&direction={direction}&{string.Join("&", owner.Select(static x => $"owner={x}"))}&repository={repository}&permission={permission}&last_used_before={lastUsedBefore}&last_used_after={lastUsedAfter}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            CreatedAt
          ],
          EnumValues: [
            created_at
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.CreatedAt,
        Summary:
<br/>Default Value: created_at,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: owner[]=octocat1,owner[]=octocat2,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repository,
        Name: Repository,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: Hello-World,
        ParameterName: repository,
        ArgumentName: repository
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: issues_read,
        ParameterName: permission,
        ArgumentName: permission
      },
      {
        Id: last_used_before,
        Name: LastUsedBefore,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: lastUsedBefore,
        ArgumentName: lastUsedBefore
      },
      {
        Id: last_used_after,
        Name: LastUsedAfter,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: lastUsedAfter,
        ArgumentName: lastUsedAfter
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List fine-grained personal access tokens with access to organization resources,
    RequestType: ,
    ResponseType: basic-error,
    MethodName: Orgs/list-pat-grantsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-pat-grants
  },
  {
    Id: Orgs/update-pat-accesses,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/personal-access-tokens",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: action,
        Name: Action,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Revoke
          ],
          EnumValues: [
            revoke
          ]
        },
        IsRequired: true,
        Summary: Action to apply to the fine-grained personal access token.,
        ParameterName: action,
        ArgumentName: action
      },
      {
        Id: pat_ids,
        Name: PatIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The IDs of the fine-grained personal access tokens.,
        ParameterName: patIds,
        ArgumentName: patIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Update the access to organization resources via fine-grained personal access tokens,
    RequestType: ,
    ResponseType: basic-error,
    MethodName: Orgs/update-pat-accessesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/update-pat-accesses
  },
  {
    Id: Orgs/update-pat-access,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/personal-access-tokens/{patId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: pat_id,
        Name: PatId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: patId,
        ArgumentName: patId
      },
      {
        Id: action,
        Name: Action,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Revoke
          ],
          EnumValues: [
            revoke
          ]
        },
        IsRequired: true,
        Summary: Action to apply to the fine-grained personal access token.,
        ParameterName: action,
        ArgumentName: action
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Update the access a fine-grained personal access token has to organization resources,
    RequestType: ,
    ResponseType: basic-error,
    MethodName: Orgs/update-pat-accessAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/update-pat-access
  },
  {
    Id: Orgs/list-pat-grant-repositories,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/personal-access-tokens/{patId}/repositories?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: pat_id,
        Name: PatId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: patId,
        ArgumentName: patId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories a fine-grained personal access token has access to,
    RequestType: ,
    ResponseType: basic-error,
    MethodName: Orgs/list-pat-grant-repositoriesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-pat-grant-repositories
  },
  {
    Id: Projects/list-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/projects?state={state}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed,
            All
          ],
          EnumValues: [
            open,
            closed,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: State.Open,
        Summary:
<br/>Default Value: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization projects,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/list-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/list-for-org
  },
  {
    Id: Projects/create-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/projects",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the project.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The description of the project.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create an organization project,
    RequestType: ,
    ResponseType: project,
    MethodName: Projects/create-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/create-for-org
  },
  {
    Id: Orgs/get-all-custom-properties,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/properties/schema",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all custom properties for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/get-all-custom-propertiesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/get-all-custom-properties
  },
  {
    Id: Orgs/create-or-update-custom-properties,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/properties/schema",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: properties,
        Name: Properties,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<OrgCustomProperty>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The array of custom properties to create or update.,
        ParameterName: properties,
        ArgumentName: properties
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Create or update custom properties for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/create-or-update-custom-propertiesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/create-or-update-custom-properties
  },
  {
    Id: Orgs/get-custom-property,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/properties/schema/{customPropertyName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: custom_property_name,
        Name: CustomPropertyName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: customPropertyName,
        ArgumentName: customPropertyName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a custom property for an organization,
    RequestType: ,
    ResponseType: org-custom-property,
    MethodName: Orgs/get-custom-propertyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/get-custom-property
  },
  {
    Id: Orgs/create-or-update-custom-property,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/properties/schema/{customPropertyName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: custom_property_name,
        Name: CustomPropertyName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: customPropertyName,
        ArgumentName: customPropertyName
      },
      {
        Id: value_type,
        Name: ValueType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            String,
            SingleSelect
          ],
          EnumValues: [
            string,
            single_select
          ]
        },
        IsRequired: true,
        Summary:
The type of the value for the property
<br/>Example: single_select,
        ParameterName: valueType,
        ArgumentName: valueType
      },
      {
        Id: required,
        Name: Required,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether the property is required.,
        ParameterName: required,
        ArgumentName: required
      },
      {
        Id: default_value,
        Name: DefaultValue,
        Type: {
          CSharpType: object?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: ,
        Summary: Default value of the property,
        ParameterName: defaultValue,
        ArgumentName: defaultValue
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Short description of the property,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: allowed_values,
        Name: AllowedValues,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
An ordered list of the allowed values of the property.
The property can have up to 200 allowed values.,
        ParameterName: allowedValues,
        ArgumentName: allowedValues
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Create or update a custom property for an organization,
    RequestType: ,
    ResponseType: org-custom-property,
    MethodName: Orgs/create-or-update-custom-propertyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/create-or-update-custom-property
  },
  {
    Id: Orgs/remove-custom-property,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/properties/schema/{customPropertyName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: custom_property_name,
        Name: CustomPropertyName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: customPropertyName,
        ArgumentName: customPropertyName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a custom property for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/remove-custom-propertyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/remove-custom-property
  },
  {
    Id: Orgs/list-custom-properties-values-for-repos,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/properties/values?per_page={perPage}&page={page}&repository_query={repositoryQuery}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: repository_query,
        Name: RepositoryQuery,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: repositoryQuery,
        ArgumentName: repositoryQuery
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List custom property values for organization repositories,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-custom-properties-values-for-reposAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-custom-properties-values-for-repos
  },
  {
    Id: Orgs/create-or-update-custom-properties-values-for-repos,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/properties/values",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: repository_names,
        Name: RepositoryNames,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The names of repositories that the custom property values will be applied to.,
        ParameterName: repositoryNames,
        ArgumentName: repositoryNames
      },
      {
        Id: properties,
        Name: Properties,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<CustomPropertyValue>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: List of custom property names and associated values to apply to the repositories.,
        ParameterName: properties,
        ArgumentName: properties
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Create or update custom property values for organization repositories,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/create-or-update-custom-properties-values-for-reposAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/create-or-update-custom-properties-values-for-repos
  },
  {
    Id: Orgs/list-public-members,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/public_members?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List public organization members,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-public-membersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-public-members
  },
  {
    Id: Orgs/check-public-membership-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/public_members/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check public organization membership for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/check-public-membership-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/check-public-membership-for-user
  },
  {
    Id: Orgs/set-public-membership-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/public_members/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set public organization membership for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/set-public-membership-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/set-public-membership-for-authenticated-user
  },
  {
    Id: Orgs/remove-public-membership-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/public_members/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove public organization membership for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/remove-public-membership-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/remove-public-membership-for-authenticated-user
  },
  {
    Id: Repos/list-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/repos?type={type}&sort={sort}&direction={direction}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: type,
        Name: Type,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Public,
            Private,
            Forks,
            Sources,
            Member
          ],
          EnumValues: [
            all,
            public,
            private,
            forks,
            sources,
            member
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Type.All,
        Summary:
<br/>Default Value: all,
        ParameterName: type,
        ArgumentName: type
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated,
            Pushed,
            FullName
          ],
          EnumValues: [
            created,
            updated,
            pushed,
            full_name
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization repositories,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-for-org
  },
  {
    Id: Repos/create-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/repos",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the repository.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A short description of the repository.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: homepage,
        Name: Homepage,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A URL with more information about the repository.,
        ParameterName: homepage,
        ArgumentName: homepage
      },
      {
        Id: private,
        Name: Private,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether the repository is private.
<br/>Default Value: false,
        ParameterName: private,
        ArgumentName: private
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Public,
            Private
          ],
          EnumValues: [
            public,
            private
          ]
        },
        IsRequired: false,
        Summary: The visibility of the repository.,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: has_issues,
        Name: HasIssues,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to enable issues for this repository or `false` to disable them.
<br/>Default Value: true,
        ParameterName: hasIssues,
        ArgumentName: hasIssues
      },
      {
        Id: has_projects,
        Name: HasProjects,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
<br/>Default Value: true,
        ParameterName: hasProjects,
        ArgumentName: hasProjects
      },
      {
        Id: has_wiki,
        Name: HasWiki,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to enable the wiki for this repository or `false` to disable it.
<br/>Default Value: true,
        ParameterName: hasWiki,
        ArgumentName: hasWiki
      },
      {
        Id: has_downloads,
        Name: HasDownloads,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether downloads are enabled.
<br/>Default Value: true
<br/>Example: true,
        ParameterName: hasDownloads,
        ArgumentName: hasDownloads
      },
      {
        Id: is_template,
        Name: IsTemplate,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to make this repo available as a template repository or `false` to prevent it.
<br/>Default Value: false,
        ParameterName: isTemplate,
        ArgumentName: isTemplate
      },
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: auto_init,
        Name: AutoInit,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Pass `true` to create an initial commit with empty README.
<br/>Default Value: false,
        ParameterName: autoInit,
        ArgumentName: autoInit
      },
      {
        Id: gitignore_template,
        Name: GitignoreTemplate,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".,
        ParameterName: gitignoreTemplate,
        ArgumentName: gitignoreTemplate
      },
      {
        Id: license_template,
        Name: LicenseTemplate,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".,
        ParameterName: licenseTemplate,
        ArgumentName: licenseTemplate
      },
      {
        Id: allow_squash_merge,
        Name: AllowSquashMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
<br/>Default Value: true,
        ParameterName: allowSquashMerge,
        ArgumentName: allowSquashMerge
      },
      {
        Id: allow_merge_commit,
        Name: AllowMergeCommit,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
<br/>Default Value: true,
        ParameterName: allowMergeCommit,
        ArgumentName: allowMergeCommit
      },
      {
        Id: allow_rebase_merge,
        Name: AllowRebaseMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
<br/>Default Value: true,
        ParameterName: allowRebaseMerge,
        ArgumentName: allowRebaseMerge
      },
      {
        Id: allow_auto_merge,
        Name: AllowAutoMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
<br/>Default Value: false,
        ParameterName: allowAutoMerge,
        ArgumentName: allowAutoMerge
      },
      {
        Id: delete_branch_on_merge,
        Name: DeleteBranchOnMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
<br/>Default Value: false,
        ParameterName: deleteBranchOnMerge,
        ArgumentName: deleteBranchOnMerge
      },
      {
        Id: use_squash_pr_title_as_default,
        Name: UseSquashPrTitleAsDefault,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
<br/>Default Value: false,
        ParameterName: useSquashPrTitleAsDefault,
        ArgumentName: useSquashPrTitleAsDefault
      },
      {
        Id: squash_merge_commit_title,
        Name: SquashMergeCommitTitle,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRTITLE,
            COMMITORPRTITLE
          ],
          EnumValues: [
            PR_TITLE,
            COMMIT_OR_PR_TITLE
          ]
        },
        IsRequired: false,
        Summary:
The default value for a squash merge commit title:

- `PR_TITLE` - default to the pull request's title.
- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).,
        ParameterName: squashMergeCommitTitle,
        ArgumentName: squashMergeCommitTitle
      },
      {
        Id: squash_merge_commit_message,
        Name: SquashMergeCommitMessage,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRBODY,
            COMMITMESSAGES,
            BLANK
          ],
          EnumValues: [
            PR_BODY,
            COMMIT_MESSAGES,
            BLANK
          ]
        },
        IsRequired: false,
        Summary:
The default value for a squash merge commit message:

- `PR_BODY` - default to the pull request's body.
- `COMMIT_MESSAGES` - default to the branch's commit messages.
- `BLANK` - default to a blank commit message.,
        ParameterName: squashMergeCommitMessage,
        ArgumentName: squashMergeCommitMessage
      },
      {
        Id: merge_commit_title,
        Name: MergeCommitTitle,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRTITLE,
            MERGEMESSAGE
          ],
          EnumValues: [
            PR_TITLE,
            MERGE_MESSAGE
          ]
        },
        IsRequired: false,
        Summary:
The default value for a merge commit title.

- `PR_TITLE` - default to the pull request's title.
- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).,
        ParameterName: mergeCommitTitle,
        ArgumentName: mergeCommitTitle
      },
      {
        Id: merge_commit_message,
        Name: MergeCommitMessage,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRBODY,
            PRTITLE,
            BLANK
          ],
          EnumValues: [
            PR_BODY,
            PR_TITLE,
            BLANK
          ]
        },
        IsRequired: false,
        Summary:
The default value for a merge commit message.

- `PR_TITLE` - default to the pull request's title.
- `PR_BODY` - default to the pull request's body.
- `BLANK` - default to a blank commit message.,
        ParameterName: mergeCommitMessage,
        ArgumentName: mergeCommitMessage
      },
      {
        Id: custom_properties,
        Name: CustomProperties,
        Type: {
          CSharpType: TestCustomProperties?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.,
        ParameterName: customProperties,
        ArgumentName: customProperties
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create an organization repository,
    RequestType: ,
    ResponseType: full-repository,
    MethodName: Repos/create-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-in-org
  },
  {
    Id: Repos/get-org-rulesets,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/rulesets?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all organization repository rulesets,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-org-rulesetsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-org-rulesets
  },
  {
    Id: Repos/create-org-ruleset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/rulesets",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the ruleset.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: target,
        Name: Target,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Branch,
            Tag,
            Push
          ],
          EnumValues: [
            branch,
            tag,
            push
          ]
        },
        IsRequired: false,
        Summary:
The target of the ruleset

**Note**: The `push` target is in beta and is subject to change.,
        ParameterName: target,
        ArgumentName: target
      },
      {
        Id: enforcement,
        Name: Enforcement,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Disabled,
            Active,
            Evaluate
          ],
          EnumValues: [
            disabled,
            active,
            evaluate
          ]
        },
        IsRequired: true,
        Summary: The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).,
        ParameterName: enforcement,
        ArgumentName: enforcement
      },
      {
        Id: bypass_actors,
        Name: BypassActors,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryRulesetBypassActor>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The actors that can bypass the rules in this ruleset,
        ParameterName: bypassActors,
        ArgumentName: bypassActors
      },
      {
        Id: conditions,
        Name: Conditions,
        Type: {
          CSharpType: OrgRulesetConditions?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties.
,
        ParameterName: conditions,
        ArgumentName: conditions
      },
      {
        Id: rules,
        Name: Rules,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryRule>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of rules within the ruleset.,
        ParameterName: rules,
        ArgumentName: rules
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create an organization repository ruleset,
    RequestType: ,
    ResponseType: repository-ruleset,
    MethodName: Repos/create-org-rulesetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-org-ruleset
  },
  {
    Id: Repos/get-org-rule-suites,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/rulesets/rule-suites?repository_name={repositoryName}&time_period={timePeriod}&actor_name={actorName}&rule_suite_result={ruleSuiteResult}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: repository_name,
        Name: RepositoryName,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: repositoryName,
        ArgumentName: repositoryName
      },
      {
        Id: time_period,
        Name: TimePeriod,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Hour,
            Day,
            Week,
            Month
          ],
          EnumValues: [
            hour,
            day,
            week,
            month
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: TimePeriod.Day,
        Summary:
<br/>Default Value: day,
        ParameterName: timePeriod,
        ArgumentName: timePeriod
      },
      {
        Id: actor_name,
        Name: ActorName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: actorName,
        ArgumentName: actorName
      },
      {
        Id: rule_suite_result,
        Name: RuleSuiteResult,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Pass,
            Fail,
            Bypass,
            All
          ],
          EnumValues: [
            pass,
            fail,
            bypass,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: RuleSuiteResult.All,
        Summary:
<br/>Default Value: all,
        ParameterName: ruleSuiteResult,
        ArgumentName: ruleSuiteResult
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization rule suites,
    RequestType: ,
    ResponseType: rule-suites,
    MethodName: Repos/get-org-rule-suitesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-org-rule-suites
  },
  {
    Id: Repos/get-org-rule-suite,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/rulesets/rule-suites/{ruleSuiteId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: rule_suite_id,
        Name: RuleSuiteId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ruleSuiteId,
        ArgumentName: ruleSuiteId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization rule suite,
    RequestType: ,
    ResponseType: rule-suite,
    MethodName: Repos/get-org-rule-suiteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-org-rule-suite
  },
  {
    Id: Repos/get-org-ruleset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/rulesets/{rulesetId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: ruleset_id,
        Name: RulesetId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: rulesetId,
        ArgumentName: rulesetId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization repository ruleset,
    RequestType: ,
    ResponseType: repository-ruleset,
    MethodName: Repos/get-org-rulesetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-org-ruleset
  },
  {
    Id: Repos/update-org-ruleset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/rulesets/{rulesetId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: ruleset_id,
        Name: RulesetId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: rulesetId,
        ArgumentName: rulesetId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the ruleset.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: target,
        Name: Target,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Branch,
            Tag,
            Push
          ],
          EnumValues: [
            branch,
            tag,
            push
          ]
        },
        IsRequired: false,
        Summary:
The target of the ruleset

**Note**: The `push` target is in beta and is subject to change.,
        ParameterName: target,
        ArgumentName: target
      },
      {
        Id: enforcement,
        Name: Enforcement,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Disabled,
            Active,
            Evaluate
          ],
          EnumValues: [
            disabled,
            active,
            evaluate
          ]
        },
        IsRequired: false,
        Summary: The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).,
        ParameterName: enforcement,
        ArgumentName: enforcement
      },
      {
        Id: bypass_actors,
        Name: BypassActors,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryRulesetBypassActor>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The actors that can bypass the rules in this ruleset,
        ParameterName: bypassActors,
        ArgumentName: bypassActors
      },
      {
        Id: conditions,
        Name: Conditions,
        Type: {
          CSharpType: OrgRulesetConditions?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties.
,
        ParameterName: conditions,
        ArgumentName: conditions
      },
      {
        Id: rules,
        Name: Rules,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryRule>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of rules within the ruleset.,
        ParameterName: rules,
        ArgumentName: rules
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Update an organization repository ruleset,
    RequestType: ,
    ResponseType: repository-ruleset,
    MethodName: Repos/update-org-rulesetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-org-ruleset
  },
  {
    Id: Repos/delete-org-ruleset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/rulesets/{rulesetId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: ruleset_id,
        Name: RulesetId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: rulesetId,
        ArgumentName: rulesetId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an organization repository ruleset,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-org-rulesetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-org-ruleset
  },
  {
    Id: Secret-scanning/list-alerts-for-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/secret-scanning/alerts?state={state}&secret_type={secretType}&resolution={resolution}&sort={sort}&direction={direction}&page={page}&per_page={perPage}&before={before}&after={after}&validity={validity}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Resolved
          ],
          EnumValues: [
            open,
            resolved
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: secret_type,
        Name: SecretType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: secretType,
        ArgumentName: secretType
      },
      {
        Id: resolution,
        Name: Resolution,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: resolution,
        ArgumentName: resolution
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: after,
        Name: After,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: after,
        ArgumentName: after
      },
      {
        Id: validity,
        Name: Validity,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: validity,
        ArgumentName: validity
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List secret scanning alerts for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Secret-scanning/list-alerts-for-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Secret-scanning/list-alerts-for-org
  },
  {
    Id: Security-advisories/list-org-repository-advisories,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/security-advisories?direction={direction}&sort={sort}&before={before}&after={after}&per_page={perPage}&state={state}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated,
            Published
          ],
          EnumValues: [
            created,
            updated,
            published
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: after,
        Name: After,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: after,
        ArgumentName: after
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Triage,
            Draft,
            Published,
            Closed
          ],
          EnumValues: [
            triage,
            draft,
            published,
            closed
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: state,
        ArgumentName: state
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository security advisories for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Security-advisories/list-org-repository-advisoriesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Security-advisories/list-org-repository-advisories
  },
  {
    Id: Orgs/list-security-manager-teams,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/security-managers",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List security manager teams,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-security-manager-teamsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-security-manager-teams
  },
  {
    Id: Orgs/add-security-manager-team,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/security-managers/teams/{teamSlug}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add a security manager team,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/add-security-manager-teamAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/add-security-manager-team
  },
  {
    Id: Orgs/remove-security-manager-team,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/security-managers/teams/{teamSlug}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a security manager team,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/remove-security-manager-teamAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/remove-security-manager-team
  },
  {
    Id: Billing/get-github-actions-billing-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/settings/billing/actions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get GitHub Actions billing for an organization,
    RequestType: ,
    ResponseType: actions-billing-usage,
    MethodName: Billing/get-github-actions-billing-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Billing/get-github-actions-billing-org
  },
  {
    Id: Billing/get-github-packages-billing-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/settings/billing/packages",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get GitHub Packages billing for an organization,
    RequestType: ,
    ResponseType: packages-billing-usage,
    MethodName: Billing/get-github-packages-billing-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Billing/get-github-packages-billing-org
  },
  {
    Id: Billing/get-shared-storage-billing-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/settings/billing/shared-storage",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get shared storage billing for an organization,
    RequestType: ,
    ResponseType: combined-billing-usage,
    MethodName: Billing/get-shared-storage-billing-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Billing/get-shared-storage-billing-org
  },
  {
    Id: Teams/list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List teams,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list
  },
  {
    Id: Teams/create,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the team.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The description of the team.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: maintainers,
        Name: Maintainers,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: List GitHub IDs for organization members who will become team maintainers.,
        ParameterName: maintainers,
        ArgumentName: maintainers
      },
      {
        Id: repo_names,
        Name: RepoNames,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The full name (e.g., "organization-name/repository-name") of repositories to add the team to.,
        ParameterName: repoNames,
        ArgumentName: repoNames
      },
      {
        Id: privacy,
        Name: Privacy,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Secret,
            Closed
          ],
          EnumValues: [
            secret,
            closed
          ]
        },
        IsRequired: false,
        Summary:
The level of privacy this team should have. The options are:  
**For a non-nested team:**  
 * `secret` - only visible to organization owners and members of this team.  
 * `closed` - visible to all members of this organization.  
Default: `secret`  
**For a parent or child team:**  
 * `closed` - visible to all members of this organization.  
Default for child team: `closed`,
        ParameterName: privacy,
        ArgumentName: privacy
      },
      {
        Id: notification_setting,
        Name: NotificationSetting,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            NotificationsEnabled,
            NotificationsDisabled
          ],
          EnumValues: [
            notifications_enabled,
            notifications_disabled
          ]
        },
        IsRequired: false,
        Summary:
The notification setting the team has chosen. The options are:  
 * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
 * `notifications_disabled` - no one receives notifications.  
Default: `notifications_enabled`,
        ParameterName: notificationSetting,
        ArgumentName: notificationSetting
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Pull,
            Push
          ],
          EnumValues: [
            pull,
            push
          ]
        },
        IsRequired: false,
        DefaultValue: TestPermission.Pull,
        Summary:
**Deprecated**. The permission that new repositories will be added to the team with when none is specified.
<br/>Default Value: pull,
        ParameterName: permission,
        ArgumentName: permission
      },
      {
        Id: parent_team_id,
        Name: ParentTeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The ID of a team to set as the parent team.,
        ParameterName: parentTeamId,
        ArgumentName: parentTeamId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a team,
    RequestType: ,
    ResponseType: team-full,
    MethodName: Teams/createAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/create
  },
  {
    Id: Teams/get-by-name,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a team by name,
    RequestType: ,
    ResponseType: team-full,
    MethodName: Teams/get-by-nameAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/get-by-name
  },
  {
    Id: Teams/update-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the team.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The description of the team.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: privacy,
        Name: Privacy,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Secret,
            Closed
          ],
          EnumValues: [
            secret,
            closed
          ]
        },
        IsRequired: false,
        Summary:
The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
**For a non-nested team:**  
 * `secret` - only visible to organization owners and members of this team.  
 * `closed` - visible to all members of this organization.  
**For a parent or child team:**  
 * `closed` - visible to all members of this organization.,
        ParameterName: privacy,
        ArgumentName: privacy
      },
      {
        Id: notification_setting,
        Name: NotificationSetting,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            NotificationsEnabled,
            NotificationsDisabled
          ],
          EnumValues: [
            notifications_enabled,
            notifications_disabled
          ]
        },
        IsRequired: false,
        Summary:
The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
 * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
 * `notifications_disabled` - no one receives notifications.,
        ParameterName: notificationSetting,
        ArgumentName: notificationSetting
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Pull,
            Push,
            Admin
          ],
          EnumValues: [
            pull,
            push,
            admin
          ]
        },
        IsRequired: false,
        DefaultValue: TestPermission.Pull,
        Summary:
**Deprecated**. The permission that new repositories will be added to the team with when none is specified.
<br/>Default Value: pull,
        ParameterName: permission,
        ArgumentName: permission
      },
      {
        Id: parent_team_id,
        Name: ParentTeamId,
        Type: {
          CSharpType: int?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The ID of a team to set as the parent team.,
        ParameterName: parentTeamId,
        ArgumentName: parentTeamId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a team,
    RequestType: ,
    ResponseType: team-full,
    MethodName: Teams/update-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/update-in-org
  },
  {
    Id: Teams/delete-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a team,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/delete-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/delete-in-org
  },
  {
    Id: Teams/list-discussions-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions?direction={direction}&per_page={perPage}&page={page}&pinned={pinned}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: pinned,
        Name: Pinned,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: pinned,
        ArgumentName: pinned
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List discussions,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-discussions-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-discussions-in-org
  },
  {
    Id: Teams/create-discussion-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The discussion post's title.,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The discussion post's body text.,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: private,
        Name: Private,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
<br/>Default Value: false,
        ParameterName: private,
        ArgumentName: private
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a discussion,
    RequestType: ,
    ResponseType: team-discussion,
    MethodName: Teams/create-discussion-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/create-discussion-in-org
  },
  {
    Id: Teams/get-discussion-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a discussion,
    RequestType: ,
    ResponseType: team-discussion,
    MethodName: Teams/get-discussion-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/get-discussion-in-org
  },
  {
    Id: Teams/update-discussion-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The discussion post's title.,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The discussion post's body text.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a discussion,
    RequestType: ,
    ResponseType: team-discussion,
    MethodName: Teams/update-discussion-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/update-discussion-in-org
  },
  {
    Id: Teams/delete-discussion-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a discussion,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/delete-discussion-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/delete-discussion-in-org
  },
  {
    Id: Teams/list-discussion-comments-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments?direction={direction}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List discussion comments,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-discussion-comments-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-discussion-comments-in-org
  },
  {
    Id: Teams/create-discussion-comment-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The discussion comment's body text.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a discussion comment,
    RequestType: ,
    ResponseType: team-discussion-comment,
    MethodName: Teams/create-discussion-comment-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/create-discussion-comment-in-org
  },
  {
    Id: Teams/get-discussion-comment-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: comment_number,
        Name: CommentNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentNumber,
        ArgumentName: commentNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a discussion comment,
    RequestType: ,
    ResponseType: team-discussion-comment,
    MethodName: Teams/get-discussion-comment-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/get-discussion-comment-in-org
  },
  {
    Id: Teams/update-discussion-comment-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: comment_number,
        Name: CommentNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentNumber,
        ArgumentName: commentNumber
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The discussion comment's body text.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a discussion comment,
    RequestType: ,
    ResponseType: team-discussion-comment,
    MethodName: Teams/update-discussion-comment-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/update-discussion-comment-in-org
  },
  {
    Id: Teams/delete-discussion-comment-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: comment_number,
        Name: CommentNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentNumber,
        ArgumentName: commentNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a discussion comment,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/delete-discussion-comment-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/delete-discussion-comment-in-org
  },
  {
    Id: Reactions/list-for-team-discussion-comment-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions?content={content}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: comment_number,
        Name: CommentNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentNumber,
        ArgumentName: commentNumber
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: content,
        ArgumentName: content
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List reactions for a team discussion comment,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/list-for-team-discussion-comment-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/list-for-team-discussion-comment-in-org
  },
  {
    Id: Reactions/create-for-team-discussion-comment-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: comment_number,
        Name: CommentNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentNumber,
        ArgumentName: commentNumber
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: true,
        Summary: The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.,
        ParameterName: content,
        ArgumentName: content
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create reaction for a team discussion comment,
    RequestType: ,
    ResponseType: reaction,
    MethodName: Reactions/create-for-team-discussion-comment-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/create-for-team-discussion-comment-in-org
  },
  {
    Id: Reactions/delete-for-team-discussion-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions/{reactionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: comment_number,
        Name: CommentNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentNumber,
        ArgumentName: commentNumber
      },
      {
        Id: reaction_id,
        Name: ReactionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reactionId,
        ArgumentName: reactionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete team discussion comment reaction,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/delete-for-team-discussion-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/delete-for-team-discussion-comment
  },
  {
    Id: Reactions/list-for-team-discussion-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions?content={content}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: content,
        ArgumentName: content
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List reactions for a team discussion,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/list-for-team-discussion-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/list-for-team-discussion-in-org
  },
  {
    Id: Reactions/create-for-team-discussion-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: true,
        Summary: The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.,
        ParameterName: content,
        ArgumentName: content
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create reaction for a team discussion,
    RequestType: ,
    ResponseType: reaction,
    MethodName: Reactions/create-for-team-discussion-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/create-for-team-discussion-in-org
  },
  {
    Id: Reactions/delete-for-team-discussion,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions/{reactionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: reaction_id,
        Name: ReactionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reactionId,
        ArgumentName: reactionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete team discussion reaction,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/delete-for-team-discussionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/delete-for-team-discussion
  },
  {
    Id: Teams/list-pending-invitations-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/invitations?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List pending team invitations,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-pending-invitations-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-pending-invitations-in-org
  },
  {
    Id: Teams/list-members-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/members?role={role}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: role,
        Name: Role,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Member,
            Maintainer,
            All
          ],
          EnumValues: [
            member,
            maintainer,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Role.All,
        Summary:
<br/>Default Value: all,
        ParameterName: role,
        ArgumentName: role
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List team members,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-members-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-members-in-org
  },
  {
    Id: Teams/get-membership-for-user-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get team membership for a user,
    RequestType: ,
    ResponseType: team-membership,
    MethodName: Teams/get-membership-for-user-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/get-membership-for-user-in-org
  },
  {
    Id: Teams/add-or-update-membership-for-user-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: role,
        Name: Role,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Member,
            Maintainer
          ],
          EnumValues: [
            member,
            maintainer
          ]
        },
        IsRequired: false,
        DefaultValue: TestRole.Member,
        Summary:
The role that this user should have in the team.
<br/>Default Value: member,
        ParameterName: role,
        ArgumentName: role
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add or update team membership for a user,
    RequestType: ,
    ResponseType: team-membership,
    MethodName: Teams/add-or-update-membership-for-user-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/add-or-update-membership-for-user-in-org
  },
  {
    Id: Teams/remove-membership-for-user-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove team membership for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/remove-membership-for-user-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/remove-membership-for-user-in-org
  },
  {
    Id: Teams/list-projects-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/projects?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List team projects,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-projects-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-projects-in-org
  },
  {
    Id: Teams/check-permissions-for-project-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check team permissions for a project,
    RequestType: ,
    ResponseType: team-project,
    MethodName: Teams/check-permissions-for-project-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/check-permissions-for-project-in-org
  },
  {
    Id: Teams/add-or-update-project-permissions-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Read,
            Write,
            Admin
          ],
          EnumValues: [
            read,
            write,
            admin
          ]
        },
        IsRequired: false,
        Summary: The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).",
        ParameterName: permission,
        ArgumentName: permission
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add or update team project permissions,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/add-or-update-project-permissions-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/add-or-update-project-permissions-in-org
  },
  {
    Id: Teams/remove-project-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a project from a team,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/remove-project-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/remove-project-in-org
  },
  {
    Id: Teams/list-repos-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/repos?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List team repositories,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-repos-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-repos-in-org
  },
  {
    Id: Teams/check-permissions-for-repo-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check team permissions for a repository,
    RequestType: ,
    ResponseType: team-repository,
    MethodName: Teams/check-permissions-for-repo-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/check-permissions-for-repo-in-org
  },
  {
    Id: Teams/add-or-update-repo-permissions-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "push",
        Summary:
The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
<br/>Default Value: push,
        ParameterName: permission,
        ArgumentName: permission
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add or update team repository permissions,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/add-or-update-repo-permissions-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/add-or-update-repo-permissions-in-org
  },
  {
    Id: Teams/remove-repo-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a repository from a team,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/remove-repo-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/remove-repo-in-org
  },
  {
    Id: Teams/list-child-in-org,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/teams/{teamSlug}/teams?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: team_slug,
        Name: TeamSlug,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamSlug,
        ArgumentName: teamSlug
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List child teams,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-child-in-orgAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-child-in-org
  },
  {
    Id: Orgs/enable-or-disable-security-product-on-all-org-repos,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/orgs/{org}/{securityProduct}/{enablement}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: security_product,
        Name: SecurityProduct,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            DependencyGraph,
            DependabotAlerts,
            DependabotSecurityUpdates,
            AdvancedSecurity,
            CodeScanningDefaultSetup,
            SecretScanning,
            SecretScanningPushProtection
          ],
          EnumValues: [
            dependency_graph,
            dependabot_alerts,
            dependabot_security_updates,
            advanced_security,
            code_scanning_default_setup,
            secret_scanning,
            secret_scanning_push_protection
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: securityProduct,
        ArgumentName: securityProduct
      },
      {
        Id: enablement,
        Name: Enablement,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            EnableAll,
            DisableAll
          ],
          EnumValues: [
            enable_all,
            disable_all
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: enablement,
        ArgumentName: enablement
      },
      {
        Id: query_suite,
        Name: QuerySuite,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Default,
            Extended
          ],
          EnumValues: [
            default,
            extended
          ]
        },
        IsRequired: false,
        Summary:
CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.,
        ParameterName: querySuite,
        ArgumentName: querySuite
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Enable or disable a security feature for an organization,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/enable-or-disable-security-product-on-all-org-reposAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/enable-or-disable-security-product-on-all-org-repos
  },
  {
    Id: Projects/get-card,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/columns/cards/{cardId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: card_id,
        Name: CardId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: cardId,
        ArgumentName: cardId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a project card,
    RequestType: ,
    ResponseType: project-card,
    MethodName: Projects/get-cardAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/get-card
  },
  {
    Id: Projects/update-card,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/columns/cards/{cardId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: card_id,
        Name: CardId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: cardId,
        ArgumentName: cardId
      },
      {
        Id: note,
        Name: Note,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The project card's note
<br/>Example: Update all gems,
        ParameterName: note,
        ArgumentName: note
      },
      {
        Id: archived,
        Name: Archived,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Whether or not the card is archived
<br/>Example: false,
        ParameterName: archived,
        ArgumentName: archived
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update an existing project card,
    RequestType: ,
    ResponseType: project-card,
    MethodName: Projects/update-cardAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/update-card
  },
  {
    Id: Projects/delete-card,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/columns/cards/{cardId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: card_id,
        Name: CardId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: cardId,
        ArgumentName: cardId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a project card,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/delete-cardAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/delete-card
  },
  {
    Id: Projects/move-card,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/columns/cards/{cardId}/moves",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: card_id,
        Name: CardId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: cardId,
        ArgumentName: cardId
      },
      {
        Id: position,
        Name: Position,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The position of the card in a column. Can be one of: `top`, `bottom`, or `after:&lt;card_id&gt;` to place after the specified card.
<br/>Example: bottom,
        ParameterName: position,
        ArgumentName: position
      },
      {
        Id: column_id,
        Name: ColumnId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The unique identifier of the column the card should be moved to
<br/>Example: 42,
        ParameterName: columnId,
        ArgumentName: columnId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Move a project card,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/move-cardAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/move-card
  },
  {
    Id: Projects/get-column,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/columns/{columnId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: column_id,
        Name: ColumnId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: columnId,
        ArgumentName: columnId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a project column,
    RequestType: ,
    ResponseType: project-column,
    MethodName: Projects/get-columnAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/get-column
  },
  {
    Id: Projects/update-column,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/columns/{columnId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: column_id,
        Name: ColumnId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: columnId,
        ArgumentName: columnId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
Name of the project column
<br/>Example: Remaining tasks,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update an existing project column,
    RequestType: ,
    ResponseType: project-column,
    MethodName: Projects/update-columnAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/update-column
  },
  {
    Id: Projects/delete-column,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/columns/{columnId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: column_id,
        Name: ColumnId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: columnId,
        ArgumentName: columnId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a project column,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/delete-columnAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/delete-column
  },
  {
    Id: Projects/list-cards,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/columns/{columnId}/cards?archived_state={archivedState}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: column_id,
        Name: ColumnId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: columnId,
        ArgumentName: columnId
      },
      {
        Id: archived_state,
        Name: ArchivedState,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Archived,
            NotArchived
          ],
          EnumValues: [
            all,
            archived,
            not_archived
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: ArchivedState.NotArchived,
        Summary:
<br/>Default Value: not_archived,
        ParameterName: archivedState,
        ArgumentName: archivedState
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List project cards,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/list-cardsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/list-cards
  },
  {
    Id: Projects/create-card,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/columns/{columnId}/cards",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: column_id,
        Name: ColumnId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: columnId,
        ArgumentName: columnId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a project card,
    RequestType: ,
    ResponseType: project-card,
    MethodName: Projects/create-cardAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/create-card
  },
  {
    Id: Projects/move-column,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/columns/{columnId}/moves",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: column_id,
        Name: ColumnId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: columnId,
        ArgumentName: columnId
      },
      {
        Id: position,
        Name: Position,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The position of the column in a project. Can be one of: `first`, `last`, or `after:&lt;column_id&gt;` to place after the specified column.
<br/>Example: last,
        ParameterName: position,
        ArgumentName: position
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Move a project column,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/move-columnAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/move-column
  },
  {
    Id: Projects/get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/{projectId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a project,
    RequestType: ,
    ResponseType: project,
    MethodName: Projects/getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/get
  },
  {
    Id: Projects/update,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/{projectId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Name of the project
<br/>Example: Week One Sprint,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Body of the project
<br/>Example: This project represents the sprint of the first week in January,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
State of the project; either 'open' or 'closed'
<br/>Example: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: organization_permission,
        Name: OrganizationPermission,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Read,
            Write,
            Admin,
            None
          ],
          EnumValues: [
            read,
            write,
            admin,
            none
          ]
        },
        IsRequired: false,
        Summary: The baseline permission that all organization members have on this project,
        ParameterName: organizationPermission,
        ArgumentName: organizationPermission
      },
      {
        Id: private,
        Name: Private,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether or not this project can be seen by everyone.,
        ParameterName: private,
        ArgumentName: private
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a project,
    RequestType: ,
    ResponseType: project,
    MethodName: Projects/updateAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/update
  },
  {
    Id: Projects/delete,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/{projectId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a project,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/deleteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/delete
  },
  {
    Id: Projects/list-collaborators,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/{projectId}/collaborators?affiliation={affiliation}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      },
      {
        Id: affiliation,
        Name: Affiliation,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Outside,
            Direct,
            All
          ],
          EnumValues: [
            outside,
            direct,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Affiliation.All,
        Summary:
<br/>Default Value: all,
        ParameterName: affiliation,
        ArgumentName: affiliation
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List project collaborators,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/list-collaboratorsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/list-collaborators
  },
  {
    Id: Projects/add-collaborator,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/{projectId}/collaborators/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Read,
            Write,
            Admin
          ],
          EnumValues: [
            read,
            write,
            admin
          ]
        },
        IsRequired: false,
        DefaultValue: TestPermission.Write,
        Summary:
The permission to grant the collaborator.
<br/>Default Value: write
<br/>Example: write,
        ParameterName: permission,
        ArgumentName: permission
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add project collaborator,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/add-collaboratorAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/add-collaborator
  },
  {
    Id: Projects/remove-collaborator,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/{projectId}/collaborators/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove user as a collaborator,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/remove-collaboratorAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/remove-collaborator
  },
  {
    Id: Projects/get-permission-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/{projectId}/collaborators/{username}/permission",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get project permission for a user,
    RequestType: ,
    ResponseType: project-collaborator-permission,
    MethodName: Projects/get-permission-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/get-permission-for-user
  },
  {
    Id: Projects/list-columns,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/{projectId}/columns?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List project columns,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/list-columnsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/list-columns
  },
  {
    Id: Projects/create-column,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/projects/{projectId}/columns",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
Name of the project column
<br/>Example: Remaining tasks,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a project column,
    RequestType: ,
    ResponseType: project-column,
    MethodName: Projects/create-columnAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/create-column
  },
  {
    Id: Rate-limit/get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/rate_limit",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get rate limit status for the authenticated user,
    RequestType: ,
    ResponseType: rate-limit-overview,
    MethodName: Rate-limit/getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Rate-limit/get
  },
  {
    Id: Repos/get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository,
    RequestType: ,
    ResponseType: full-repository,
    MethodName: Repos/getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get
  },
  {
    Id: Repos/update,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the repository.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A short description of the repository.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: homepage,
        Name: Homepage,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A URL with more information about the repository.,
        ParameterName: homepage,
        ArgumentName: homepage
      },
      {
        Id: private,
        Name: Private,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to make the repository private or `false` to make it public. Default: `false`.  
**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
<br/>Default Value: false,
        ParameterName: private,
        ArgumentName: private
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Public,
            Private
          ],
          EnumValues: [
            public,
            private
          ]
        },
        IsRequired: false,
        Summary: The visibility of the repository.,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: security_and_analysis,
        Name: SecurityAndAnalysis,
        Type: {
          CSharpType: TestSecurityAndAnalysis?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Specify which security and analysis features to enable or disable for the repository.

To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."

For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
`{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.

You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.,
        ParameterName: securityAndAnalysis,
        ArgumentName: securityAndAnalysis
      },
      {
        Id: has_issues,
        Name: HasIssues,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to enable issues for this repository or `false` to disable them.
<br/>Default Value: true,
        ParameterName: hasIssues,
        ArgumentName: hasIssues
      },
      {
        Id: has_projects,
        Name: HasProjects,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
<br/>Default Value: true,
        ParameterName: hasProjects,
        ArgumentName: hasProjects
      },
      {
        Id: has_wiki,
        Name: HasWiki,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to enable the wiki for this repository or `false` to disable it.
<br/>Default Value: true,
        ParameterName: hasWiki,
        ArgumentName: hasWiki
      },
      {
        Id: is_template,
        Name: IsTemplate,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to make this repo available as a template repository or `false` to prevent it.
<br/>Default Value: false,
        ParameterName: isTemplate,
        ArgumentName: isTemplate
      },
      {
        Id: default_branch,
        Name: DefaultBranch,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Updates the default branch for this repository.,
        ParameterName: defaultBranch,
        ArgumentName: defaultBranch
      },
      {
        Id: allow_squash_merge,
        Name: AllowSquashMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
<br/>Default Value: true,
        ParameterName: allowSquashMerge,
        ArgumentName: allowSquashMerge
      },
      {
        Id: allow_merge_commit,
        Name: AllowMergeCommit,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
<br/>Default Value: true,
        ParameterName: allowMergeCommit,
        ArgumentName: allowMergeCommit
      },
      {
        Id: allow_rebase_merge,
        Name: AllowRebaseMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
<br/>Default Value: true,
        ParameterName: allowRebaseMerge,
        ArgumentName: allowRebaseMerge
      },
      {
        Id: allow_auto_merge,
        Name: AllowAutoMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
<br/>Default Value: false,
        ParameterName: allowAutoMerge,
        ArgumentName: allowAutoMerge
      },
      {
        Id: delete_branch_on_merge,
        Name: DeleteBranchOnMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
<br/>Default Value: false,
        ParameterName: deleteBranchOnMerge,
        ArgumentName: deleteBranchOnMerge
      },
      {
        Id: allow_update_branch,
        Name: AllowUpdateBranch,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
<br/>Default Value: false,
        ParameterName: allowUpdateBranch,
        ArgumentName: allowUpdateBranch
      },
      {
        Id: use_squash_pr_title_as_default,
        Name: UseSquashPrTitleAsDefault,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
<br/>Default Value: false,
        ParameterName: useSquashPrTitleAsDefault,
        ArgumentName: useSquashPrTitleAsDefault
      },
      {
        Id: squash_merge_commit_title,
        Name: SquashMergeCommitTitle,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRTITLE,
            COMMITORPRTITLE
          ],
          EnumValues: [
            PR_TITLE,
            COMMIT_OR_PR_TITLE
          ]
        },
        IsRequired: false,
        Summary:
The default value for a squash merge commit title:

- `PR_TITLE` - default to the pull request's title.
- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).,
        ParameterName: squashMergeCommitTitle,
        ArgumentName: squashMergeCommitTitle
      },
      {
        Id: squash_merge_commit_message,
        Name: SquashMergeCommitMessage,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRBODY,
            COMMITMESSAGES,
            BLANK
          ],
          EnumValues: [
            PR_BODY,
            COMMIT_MESSAGES,
            BLANK
          ]
        },
        IsRequired: false,
        Summary:
The default value for a squash merge commit message:

- `PR_BODY` - default to the pull request's body.
- `COMMIT_MESSAGES` - default to the branch's commit messages.
- `BLANK` - default to a blank commit message.,
        ParameterName: squashMergeCommitMessage,
        ArgumentName: squashMergeCommitMessage
      },
      {
        Id: merge_commit_title,
        Name: MergeCommitTitle,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRTITLE,
            MERGEMESSAGE
          ],
          EnumValues: [
            PR_TITLE,
            MERGE_MESSAGE
          ]
        },
        IsRequired: false,
        Summary:
The default value for a merge commit title.

- `PR_TITLE` - default to the pull request's title.
- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).,
        ParameterName: mergeCommitTitle,
        ArgumentName: mergeCommitTitle
      },
      {
        Id: merge_commit_message,
        Name: MergeCommitMessage,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRBODY,
            PRTITLE,
            BLANK
          ],
          EnumValues: [
            PR_BODY,
            PR_TITLE,
            BLANK
          ]
        },
        IsRequired: false,
        Summary:
The default value for a merge commit message.

- `PR_TITLE` - default to the pull request's title.
- `PR_BODY` - default to the pull request's body.
- `BLANK` - default to a blank commit message.,
        ParameterName: mergeCommitMessage,
        ArgumentName: mergeCommitMessage
      },
      {
        Id: archived,
        Name: Archived,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether to archive this repository. `false` will unarchive a previously archived repository.
<br/>Default Value: false,
        ParameterName: archived,
        ArgumentName: archived
      },
      {
        Id: allow_forking,
        Name: AllowForking,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to allow private forks, or `false` to prevent private forks.
<br/>Default Value: false,
        ParameterName: allowForking,
        ArgumentName: allowForking
      },
      {
        Id: web_commit_signoff_required,
        Name: WebCommitSignoffRequired,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
<br/>Default Value: false,
        ParameterName: webCommitSignoffRequired,
        ArgumentName: webCommitSignoffRequired
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a repository,
    RequestType: ,
    ResponseType: full-repository,
    MethodName: Repos/updateAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update
  },
  {
    Id: Repos/delete,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/deleteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete
  },
  {
    Id: Actions/list-artifacts-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/artifacts?per_page={perPage}&page={page}&name={name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List artifacts for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-artifacts-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-artifacts-for-repo
  },
  {
    Id: Actions/get-artifact,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/artifacts/{artifactId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: artifact_id,
        Name: ArtifactId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: artifactId,
        ArgumentName: artifactId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an artifact,
    RequestType: ,
    ResponseType: artifact,
    MethodName: Actions/get-artifactAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-artifact
  },
  {
    Id: Actions/delete-artifact,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/artifacts/{artifactId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: artifact_id,
        Name: ArtifactId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: artifactId,
        ArgumentName: artifactId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an artifact,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-artifactAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-artifact
  },
  {
    Id: Actions/download-artifact,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/artifacts/{artifactId}/{archiveFormat}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: artifact_id,
        Name: ArtifactId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: artifactId,
        ArgumentName: artifactId
      },
      {
        Id: archive_format,
        Name: ArchiveFormat,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: archiveFormat,
        ArgumentName: archiveFormat
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Download an artifact,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/download-artifactAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/download-artifact
  },
  {
    Id: Actions/get-actions-cache-usage,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/cache/usage",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get GitHub Actions cache usage for a repository,
    RequestType: ,
    ResponseType: actions-cache-usage-by-repository,
    MethodName: Actions/get-actions-cache-usageAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-actions-cache-usage
  },
  {
    Id: Actions/get-actions-cache-list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/caches?per_page={perPage}&page={page}&ref={ref}&key={key}&sort={sort}&direction={direction}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: key,
        Name: Key,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: key,
        ArgumentName: key
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            CreatedAt,
            LastAccessedAt,
            SizeInBytes
          ],
          EnumValues: [
            created_at,
            last_accessed_at,
            size_in_bytes
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.LastAccessedAt,
        Summary:
<br/>Default Value: last_accessed_at,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List GitHub Actions caches for a repository,
    RequestType: ,
    ResponseType: actions-cache-list,
    MethodName: Actions/get-actions-cache-listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-actions-cache-list
  },
  {
    Id: Actions/delete-actions-cache-by-key,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/caches?key={key}&ref={ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: key,
        Name: Key,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: key,
        ArgumentName: key
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete GitHub Actions caches for a repository (using a cache key),
    RequestType: ,
    ResponseType: actions-cache-list,
    MethodName: Actions/delete-actions-cache-by-keyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-actions-cache-by-key
  },
  {
    Id: Actions/delete-actions-cache-by-id,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/caches/{cacheId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: cache_id,
        Name: CacheId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: cacheId,
        ArgumentName: cacheId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a GitHub Actions cache for a repository (using a cache ID),
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-actions-cache-by-idAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-actions-cache-by-id
  },
  {
    Id: Actions/get-job-for-workflow-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/jobs/{jobId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: job_id,
        Name: JobId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: jobId,
        ArgumentName: jobId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a job for a workflow run,
    RequestType: ,
    ResponseType: job,
    MethodName: Actions/get-job-for-workflow-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-job-for-workflow-run
  },
  {
    Id: Actions/download-job-logs-for-workflow-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/jobs/{jobId}/logs",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: job_id,
        Name: JobId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: jobId,
        ArgumentName: jobId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Download job logs for a workflow run,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/download-job-logs-for-workflow-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/download-job-logs-for-workflow-run
  },
  {
    Id: Actions/re-run-job-for-workflow-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/jobs/{jobId}/rerun",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: job_id,
        Name: JobId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: jobId,
        ArgumentName: jobId
      },
      {
        Id: enable_debug_logging,
        Name: EnableDebugLogging,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether to enable debug logging for the re-run.
<br/>Default Value: false,
        ParameterName: enableDebugLogging,
        ArgumentName: enableDebugLogging
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Re-run a job from a workflow run,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/re-run-job-for-workflow-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/re-run-job-for-workflow-run
  },
  {
    Id: Actions/get-custom-oidc-sub-claim-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/oidc/customization/sub",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the customization template for an OIDC subject claim for a repository,
    RequestType: ,
    ResponseType: oidc-custom-sub-repo,
    MethodName: Actions/get-custom-oidc-sub-claim-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-custom-oidc-sub-claim-for-repo
  },
  {
    Id: Actions/set-custom-oidc-sub-claim-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/oidc/customization/sub",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: use_default,
        Name: UseDefault,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.,
        ParameterName: useDefault,
        ArgumentName: useDefault
      },
      {
        Id: include_claim_keys,
        Name: IncludeClaimKeys,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.,
        ParameterName: includeClaimKeys,
        ArgumentName: includeClaimKeys
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set the customization template for an OIDC subject claim for a repository,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/set-custom-oidc-sub-claim-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-custom-oidc-sub-claim-for-repo
  },
  {
    Id: Actions/list-repo-organization-secrets,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/organization-secrets?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository organization secrets,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-repo-organization-secretsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-repo-organization-secrets
  },
  {
    Id: Actions/list-repo-organization-variables,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/organization-variables?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 10,
        Summary:
<br/>Default Value: 10,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository organization variables,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-repo-organization-variablesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-repo-organization-variables
  },
  {
    Id: Actions/get-github-actions-permissions-repository,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/permissions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get GitHub Actions permissions for a repository,
    RequestType: ,
    ResponseType: actions-repository-permissions,
    MethodName: Actions/get-github-actions-permissions-repositoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-github-actions-permissions-repository
  },
  {
    Id: Actions/set-github-actions-permissions-repository,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/permissions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: enabled,
        Name: Enabled,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: Whether GitHub Actions is enabled on the repository.,
        ParameterName: enabled,
        ArgumentName: enabled
      },
      {
        Id: allowed_actions,
        Name: AllowedActions,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            LocalOnly,
            Selected
          ],
          EnumValues: [
            all,
            local_only,
            selected
          ]
        },
        IsRequired: false,
        Summary: The permissions policy that controls the actions and reusable workflows that are allowed to run.,
        ParameterName: allowedActions,
        ArgumentName: allowedActions
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set GitHub Actions permissions for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/set-github-actions-permissions-repositoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-github-actions-permissions-repository
  },
  {
    Id: Actions/get-workflow-access-to-repository,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/permissions/access",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the level of access for workflows outside of the repository,
    RequestType: ,
    ResponseType: actions-workflow-access-to-repository,
    MethodName: Actions/get-workflow-access-to-repositoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-workflow-access-to-repository
  },
  {
    Id: Actions/set-workflow-access-to-repository,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/permissions/access",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: access_level,
        Name: AccessLevel,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            None,
            User,
            Organization
          ],
          EnumValues: [
            none,
            user,
            organization
          ]
        },
        IsRequired: true,
        Summary:
Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
repository.

`none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.,
        ParameterName: accessLevel,
        ArgumentName: accessLevel
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set the level of access for workflows outside of the repository,
    RequestType: ActionsWorkflowAccessToRepository,
    ResponseType: ,
    MethodName: Actions/set-workflow-access-to-repositoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-workflow-access-to-repository
  },
  {
    Id: Actions/get-allowed-actions-repository,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/permissions/selected-actions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get allowed actions and reusable workflows for a repository,
    RequestType: ,
    ResponseType: selected-actions,
    MethodName: Actions/get-allowed-actions-repositoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-allowed-actions-repository
  },
  {
    Id: Actions/set-allowed-actions-repository,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/permissions/selected-actions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: github_owned_allowed,
        Name: GithubOwnedAllowed,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.,
        ParameterName: githubOwnedAllowed,
        ArgumentName: githubOwnedAllowed
      },
      {
        Id: verified_allowed,
        Name: VerifiedAllowed,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.,
        ParameterName: verifiedAllowed,
        ArgumentName: verifiedAllowed
      },
      {
        Id: patterns_allowed,
        Name: PatternsAllowed,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.

**Note**: The `patterns_allowed` setting only applies to public repositories.,
        ParameterName: patternsAllowed,
        ArgumentName: patternsAllowed
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set allowed actions and reusable workflows for a repository,
    RequestType: SelectedActions,
    ResponseType: ,
    MethodName: Actions/set-allowed-actions-repositoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-allowed-actions-repository
  },
  {
    Id: Actions/get-github-actions-default-workflow-permissions-repository,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/permissions/workflow",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get default workflow permissions for a repository,
    RequestType: ,
    ResponseType: actions-get-default-workflow-permissions,
    MethodName: Actions/get-github-actions-default-workflow-permissions-repositoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-github-actions-default-workflow-permissions-repository
  },
  {
    Id: Actions/set-github-actions-default-workflow-permissions-repository,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/permissions/workflow",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: default_workflow_permissions,
        Name: DefaultWorkflowPermissions,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Read,
            Write
          ],
          EnumValues: [
            read,
            write
          ]
        },
        IsRequired: false,
        Summary: The default workflow permissions granted to the GITHUB_TOKEN when running workflows.,
        ParameterName: defaultWorkflowPermissions,
        ArgumentName: defaultWorkflowPermissions
      },
      {
        Id: can_approve_pull_request_reviews,
        Name: CanApprovePullRequestReviews,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.,
        ParameterName: canApprovePullRequestReviews,
        ArgumentName: canApprovePullRequestReviews
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set default workflow permissions for a repository,
    RequestType: ActionsSetDefaultWorkflowPermissions,
    ResponseType: ,
    MethodName: Actions/set-github-actions-default-workflow-permissions-repositoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-github-actions-default-workflow-permissions-repository
  },
  {
    Id: Actions/list-self-hosted-runners-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners?name={name}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List self-hosted runners for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-self-hosted-runners-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-self-hosted-runners-for-repo
  },
  {
    Id: Actions/list-runner-applications-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners/downloads",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List runner applications for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-runner-applications-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-runner-applications-for-repo
  },
  {
    Id: Actions/generate-runner-jitconfig-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners/generate-jitconfig",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the new runner.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: runner_group_id,
        Name: RunnerGroupId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The ID of the runner group to register the runner to.,
        ParameterName: runnerGroupId,
        ArgumentName: runnerGroupId
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.,
        ParameterName: labels,
        ArgumentName: labels
      },
      {
        Id: work_folder,
        Name: WorkFolder,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "_work",
        Summary:
The working directory to be used for job execution, relative to the runner install directory.
<br/>Default Value: _work,
        ParameterName: workFolder,
        ArgumentName: workFolder
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create configuration for a just-in-time runner for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/generate-runner-jitconfig-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/generate-runner-jitconfig-for-repo
  },
  {
    Id: Actions/create-registration-token-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners/registration-token",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a registration token for a repository,
    RequestType: ,
    ResponseType: authentication-token,
    MethodName: Actions/create-registration-token-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/create-registration-token-for-repo
  },
  {
    Id: Actions/create-remove-token-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners/remove-token",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a remove token for a repository,
    RequestType: ,
    ResponseType: authentication-token,
    MethodName: Actions/create-remove-token-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/create-remove-token-for-repo
  },
  {
    Id: Actions/get-self-hosted-runner-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners/{runnerId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a self-hosted runner for a repository,
    RequestType: ,
    ResponseType: runner,
    MethodName: Actions/get-self-hosted-runner-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-self-hosted-runner-for-repo
  },
  {
    Id: Actions/delete-self-hosted-runner-from-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners/{runnerId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a self-hosted runner from a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-self-hosted-runner-from-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-self-hosted-runner-from-repo
  },
  {
    Id: Actions/list-labels-for-self-hosted-runner-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners/{runnerId}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List labels for a self-hosted runner for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-labels-for-self-hosted-runner-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-labels-for-self-hosted-runner-for-repo
  },
  {
    Id: Actions/add-custom-labels-to-self-hosted-runner-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners/{runnerId}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The names of the custom labels to add to the runner.,
        ParameterName: labels,
        ArgumentName: labels
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add custom labels to a self-hosted runner for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/add-custom-labels-to-self-hosted-runner-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/add-custom-labels-to-self-hosted-runner-for-repo
  },
  {
    Id: Actions/set-custom-labels-for-self-hosted-runner-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners/{runnerId}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.,
        ParameterName: labels,
        ArgumentName: labels
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set custom labels for a self-hosted runner for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/set-custom-labels-for-self-hosted-runner-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/set-custom-labels-for-self-hosted-runner-for-repo
  },
  {
    Id: Actions/remove-all-custom-labels-from-self-hosted-runner-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners/{runnerId}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove all custom labels from a self-hosted runner for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/remove-all-custom-labels-from-self-hosted-runner-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/remove-all-custom-labels-from-self-hosted-runner-for-repo
  },
  {
    Id: Actions/remove-custom-label-from-self-hosted-runner-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runners/{runnerId}/labels/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: runner_id,
        Name: RunnerId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runnerId,
        ArgumentName: runnerId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a custom label from a self-hosted runner for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/remove-custom-label-from-self-hosted-runner-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/remove-custom-label-from-self-hosted-runner-for-repo
  },
  {
    Id: Actions/list-workflow-runs-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs?actor={actor}&branch={branch}&event={@event}&status={status}&per_page={perPage}&page={page}&created={created}&exclude_pull_requests={excludePullRequests}&check_suite_id={checkSuiteId}&head_sha={headSha}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: actor,
        Name: Actor,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: actor,
        ArgumentName: actor
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      },
      {
        Id: event,
        Name: Event,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: @event,
        ArgumentName: @event
      },
      {
        Id: status,
        Name: Status,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Completed,
            ActionRequired,
            Cancelled,
            Failure,
            Neutral,
            Skipped,
            Stale,
            Success,
            TimedOut,
            InProgress,
            Queued,
            Requested,
            Waiting,
            Pending
          ],
          EnumValues: [
            completed,
            action_required,
            cancelled,
            failure,
            neutral,
            skipped,
            stale,
            success,
            timed_out,
            in_progress,
            queued,
            requested,
            waiting,
            pending
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: status,
        ArgumentName: status
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: created,
        Name: Created,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: created,
        ArgumentName: created
      },
      {
        Id: exclude_pull_requests,
        Name: ExcludePullRequests,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: false,
        Summary:
<br/>Default Value: false,
        ParameterName: excludePullRequests,
        ArgumentName: excludePullRequests
      },
      {
        Id: check_suite_id,
        Name: CheckSuiteId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: checkSuiteId,
        ArgumentName: checkSuiteId
      },
      {
        Id: head_sha,
        Name: HeadSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: headSha,
        ArgumentName: headSha
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List workflow runs for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-workflow-runs-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-workflow-runs-for-repo
  },
  {
    Id: Actions/get-workflow-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}?exclude_pull_requests={excludePullRequests}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      },
      {
        Id: exclude_pull_requests,
        Name: ExcludePullRequests,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: false,
        Summary:
<br/>Default Value: false,
        ParameterName: excludePullRequests,
        ArgumentName: excludePullRequests
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a workflow run,
    RequestType: ,
    ResponseType: workflow-run,
    MethodName: Actions/get-workflow-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-workflow-run
  },
  {
    Id: Actions/delete-workflow-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a workflow run,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-workflow-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-workflow-run
  },
  {
    Id: Actions/get-reviews-for-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/approvals",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the review history for a workflow run,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/get-reviews-for-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-reviews-for-run
  },
  {
    Id: Actions/approve-workflow-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/approve",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Approve a workflow run for a fork pull request,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/approve-workflow-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/approve-workflow-run
  },
  {
    Id: Actions/list-workflow-run-artifacts,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/artifacts?per_page={perPage}&page={page}&name={name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List workflow run artifacts,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-workflow-run-artifactsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-workflow-run-artifacts
  },
  {
    Id: Actions/get-workflow-run-attempt,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}?exclude_pull_requests={excludePullRequests}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      },
      {
        Id: attempt_number,
        Name: AttemptNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: attemptNumber,
        ArgumentName: attemptNumber
      },
      {
        Id: exclude_pull_requests,
        Name: ExcludePullRequests,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: false,
        Summary:
<br/>Default Value: false,
        ParameterName: excludePullRequests,
        ArgumentName: excludePullRequests
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a workflow run attempt,
    RequestType: ,
    ResponseType: workflow-run,
    MethodName: Actions/get-workflow-run-attemptAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-workflow-run-attempt
  },
  {
    Id: Actions/list-jobs-for-workflow-run-attempt,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}/jobs?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      },
      {
        Id: attempt_number,
        Name: AttemptNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: attemptNumber,
        ArgumentName: attemptNumber
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List jobs for a workflow run attempt,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-jobs-for-workflow-run-attemptAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-jobs-for-workflow-run-attempt
  },
  {
    Id: Actions/download-workflow-run-attempt-logs,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/attempts/{attemptNumber}/logs",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      },
      {
        Id: attempt_number,
        Name: AttemptNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: attemptNumber,
        ArgumentName: attemptNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Download workflow run attempt logs,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/download-workflow-run-attempt-logsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/download-workflow-run-attempt-logs
  },
  {
    Id: Actions/cancel-workflow-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/cancel",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Cancel a workflow run,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/cancel-workflow-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/cancel-workflow-run
  },
  {
    Id: Actions/review-custom-gates-for-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/deployment_protection_rule",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Review custom deployment protection rules for a workflow run,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/review-custom-gates-for-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/review-custom-gates-for-run
  },
  {
    Id: Actions/force-cancel-workflow-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/force-cancel",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Force cancel a workflow run,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/force-cancel-workflow-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/force-cancel-workflow-run
  },
  {
    Id: Actions/list-jobs-for-workflow-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/jobs?filter={filter}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      },
      {
        Id: filter,
        Name: Filter,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Latest,
            All
          ],
          EnumValues: [
            latest,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Filter.Latest,
        Summary:
<br/>Default Value: latest,
        ParameterName: filter,
        ArgumentName: filter
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List jobs for a workflow run,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-jobs-for-workflow-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-jobs-for-workflow-run
  },
  {
    Id: Actions/download-workflow-run-logs,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/logs",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Download workflow run logs,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/download-workflow-run-logsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/download-workflow-run-logs
  },
  {
    Id: Actions/delete-workflow-run-logs,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/logs",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete workflow run logs,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-workflow-run-logsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-workflow-run-logs
  },
  {
    Id: Actions/get-pending-deployments-for-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/pending_deployments",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get pending deployments for a workflow run,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/get-pending-deployments-for-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-pending-deployments-for-run
  },
  {
    Id: Actions/review-pending-deployments-for-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/pending_deployments",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      },
      {
        Id: environment_ids,
        Name: EnvironmentIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The list of environment ids to approve or reject
<br/>Example: [161171787, 161171795],
        ParameterName: environmentIds,
        ArgumentName: environmentIds
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Approved,
            Rejected
          ],
          EnumValues: [
            approved,
            rejected
          ]
        },
        IsRequired: true,
        Summary:
Whether to approve or reject deployment to the specified environments.
<br/>Example: approved,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: comment,
        Name: Comment,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
A comment to accompany the deployment review
<br/>Example: Ship it!,
        ParameterName: comment,
        ArgumentName: comment
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Review pending deployments for a workflow run,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/review-pending-deployments-for-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/review-pending-deployments-for-run
  },
  {
    Id: Actions/re-run-workflow,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/rerun",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      },
      {
        Id: enable_debug_logging,
        Name: EnableDebugLogging,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether to enable debug logging for the re-run.
<br/>Default Value: false,
        ParameterName: enableDebugLogging,
        ArgumentName: enableDebugLogging
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Re-run a workflow,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/re-run-workflowAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/re-run-workflow
  },
  {
    Id: Actions/re-run-workflow-failed-jobs,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/rerun-failed-jobs",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      },
      {
        Id: enable_debug_logging,
        Name: EnableDebugLogging,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether to enable debug logging for the re-run.
<br/>Default Value: false,
        ParameterName: enableDebugLogging,
        ArgumentName: enableDebugLogging
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Re-run failed jobs from a workflow run,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/re-run-workflow-failed-jobsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/re-run-workflow-failed-jobs
  },
  {
    Id: Actions/get-workflow-run-usage,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/runs/{runId}/timing",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: run_id,
        Name: RunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: runId,
        ArgumentName: runId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get workflow run usage,
    RequestType: ,
    ResponseType: workflow-run-usage,
    MethodName: Actions/get-workflow-run-usageAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-workflow-run-usage
  },
  {
    Id: Actions/list-repo-secrets,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/secrets?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository secrets,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-repo-secretsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-repo-secrets
  },
  {
    Id: Actions/get-repo-public-key,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/secrets/public-key",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository public key,
    RequestType: ,
    ResponseType: actions-public-key,
    MethodName: Actions/get-repo-public-keyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-repo-public-key
  },
  {
    Id: Actions/get-repo-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository secret,
    RequestType: ,
    ResponseType: actions-secret,
    MethodName: Actions/get-repo-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-repo-secret
  },
  {
    Id: Actions/create-or-update-repo-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: encrypted_value,
        Name: EncryptedValue,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.,
        ParameterName: encryptedValue,
        ArgumentName: encryptedValue
      },
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ID of the key you used to encrypt the secret.,
        ParameterName: keyId,
        ArgumentName: keyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Create or update a repository secret,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/create-or-update-repo-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/create-or-update-repo-secret
  },
  {
    Id: Actions/delete-repo-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a repository secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-repo-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-repo-secret
  },
  {
    Id: Actions/list-repo-variables,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/variables?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 10,
        Summary:
<br/>Default Value: 10,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository variables,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-repo-variablesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-repo-variables
  },
  {
    Id: Actions/create-repo-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/variables",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the variable.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: value,
        Name: Value,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The value of the variable.,
        ParameterName: value,
        ArgumentName: value
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a repository variable,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/create-repo-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/create-repo-variable
  },
  {
    Id: Actions/get-repo-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/variables/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository variable,
    RequestType: ,
    ResponseType: actions-variable,
    MethodName: Actions/get-repo-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-repo-variable
  },
  {
    Id: Actions/update-repo-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/variables/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the variable.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: value,
        Name: Value,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The value of the variable.,
        ParameterName: value,
        ArgumentName: value
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a repository variable,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/update-repo-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/update-repo-variable
  },
  {
    Id: Actions/delete-repo-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/variables/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a repository variable,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-repo-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-repo-variable
  },
  {
    Id: Actions/list-repo-workflows,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/workflows?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository workflows,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-repo-workflowsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-repo-workflows
  },
  {
    Id: Actions/get-workflow,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/workflows/{workflowId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: workflow_id,
        Name: WorkflowId,
        Type: {
          CSharpType: object,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: workflowId,
        ArgumentName: workflowId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a workflow,
    RequestType: ,
    ResponseType: workflow,
    MethodName: Actions/get-workflowAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-workflow
  },
  {
    Id: Actions/disable-workflow,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/workflows/{workflowId}/disable",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: workflow_id,
        Name: WorkflowId,
        Type: {
          CSharpType: object,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: workflowId,
        ArgumentName: workflowId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Disable a workflow,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/disable-workflowAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/disable-workflow
  },
  {
    Id: Actions/create-workflow-dispatch,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/workflows/{workflowId}/dispatches",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: workflow_id,
        Name: WorkflowId,
        Type: {
          CSharpType: object,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: workflowId,
        ArgumentName: workflowId
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The git reference for the workflow. The reference can be a branch or tag name.,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: inputs,
        Name: Inputs,
        Type: {
          CSharpType: TestInputs?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.,
        ParameterName: inputs,
        ArgumentName: inputs
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a workflow dispatch event,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/create-workflow-dispatchAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/create-workflow-dispatch
  },
  {
    Id: Actions/enable-workflow,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/workflows/{workflowId}/enable",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: workflow_id,
        Name: WorkflowId,
        Type: {
          CSharpType: object,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: workflowId,
        ArgumentName: workflowId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Enable a workflow,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/enable-workflowAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/enable-workflow
  },
  {
    Id: Actions/list-workflow-runs,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/workflows/{workflowId}/runs?actor={actor}&branch={branch}&event={@event}&status={status}&per_page={perPage}&page={page}&created={created}&exclude_pull_requests={excludePullRequests}&check_suite_id={checkSuiteId}&head_sha={headSha}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: workflow_id,
        Name: WorkflowId,
        Type: {
          CSharpType: object,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: workflowId,
        ArgumentName: workflowId
      },
      {
        Id: actor,
        Name: Actor,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: actor,
        ArgumentName: actor
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      },
      {
        Id: event,
        Name: Event,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: @event,
        ArgumentName: @event
      },
      {
        Id: status,
        Name: Status,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Completed,
            ActionRequired,
            Cancelled,
            Failure,
            Neutral,
            Skipped,
            Stale,
            Success,
            TimedOut,
            InProgress,
            Queued,
            Requested,
            Waiting,
            Pending
          ],
          EnumValues: [
            completed,
            action_required,
            cancelled,
            failure,
            neutral,
            skipped,
            stale,
            success,
            timed_out,
            in_progress,
            queued,
            requested,
            waiting,
            pending
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: status,
        ArgumentName: status
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: created,
        Name: Created,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: created,
        ArgumentName: created
      },
      {
        Id: exclude_pull_requests,
        Name: ExcludePullRequests,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: false,
        Summary:
<br/>Default Value: false,
        ParameterName: excludePullRequests,
        ArgumentName: excludePullRequests
      },
      {
        Id: check_suite_id,
        Name: CheckSuiteId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: checkSuiteId,
        ArgumentName: checkSuiteId
      },
      {
        Id: head_sha,
        Name: HeadSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: headSha,
        ArgumentName: headSha
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List workflow runs for a workflow,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-workflow-runsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-workflow-runs
  },
  {
    Id: Actions/get-workflow-usage,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/actions/workflows/{workflowId}/timing",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: workflow_id,
        Name: WorkflowId,
        Type: {
          CSharpType: object,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: workflowId,
        ArgumentName: workflowId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get workflow usage,
    RequestType: ,
    ResponseType: workflow-usage,
    MethodName: Actions/get-workflow-usageAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-workflow-usage
  },
  {
    Id: Repos/list-activities,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/activity?direction={direction}&per_page={perPage}&before={before}&after={after}&ref={ref}&actor={actor}&time_period={timePeriod}&activity_type={activityType}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: after,
        Name: After,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: after,
        ArgumentName: after
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: actor,
        Name: Actor,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: actor,
        ArgumentName: actor
      },
      {
        Id: time_period,
        Name: TimePeriod,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Day,
            Week,
            Month,
            Quarter,
            Year
          ],
          EnumValues: [
            day,
            week,
            month,
            quarter,
            year
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: timePeriod,
        ArgumentName: timePeriod
      },
      {
        Id: activity_type,
        Name: ActivityType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Push,
            ForcePush,
            BranchCreation,
            BranchDeletion,
            PrMerge,
            MergeQueueMerge
          ],
          EnumValues: [
            push,
            force_push,
            branch_creation,
            branch_deletion,
            pr_merge,
            merge_queue_merge
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: activityType,
        ArgumentName: activityType
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository activities,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-activitiesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-activities
  },
  {
    Id: Issues/list-assignees,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/assignees?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List assignees,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-assigneesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-assignees
  },
  {
    Id: Issues/check-user-can-be-assigned,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/assignees/{assignee}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: assignee,
        Name: Assignee,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: assignee,
        ArgumentName: assignee
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if a user can be assigned,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/check-user-can-be-assignedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/check-user-can-be-assigned
  },
  {
    Id: Repos/list-autolinks,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/autolinks",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all autolinks of a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-autolinksAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-autolinks
  },
  {
    Id: Repos/create-autolink,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/autolinks",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: key_prefix,
        Name: KeyPrefix,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.,
        ParameterName: keyPrefix,
        ArgumentName: keyPrefix
      },
      {
        Id: url_template,
        Name: UrlTemplate,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The URL must contain `&lt;num&gt;` for the reference number. `&lt;num&gt;` matches different characters depending on the value of `is_alphanumeric`.,
        ParameterName: urlTemplate,
        ArgumentName: urlTemplate
      },
      {
        Id: is_alphanumeric,
        Name: IsAlphanumeric,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether this autolink reference matches alphanumeric characters. If true, the `&lt;num&gt;` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
<br/>Default Value: true,
        ParameterName: isAlphanumeric,
        ArgumentName: isAlphanumeric
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create an autolink reference for a repository,
    RequestType: ,
    ResponseType: autolink,
    MethodName: Repos/create-autolinkAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-autolink
  },
  {
    Id: Repos/get-autolink,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/autolinks/{autolinkId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: autolink_id,
        Name: AutolinkId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: autolinkId,
        ArgumentName: autolinkId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an autolink reference of a repository,
    RequestType: ,
    ResponseType: autolink,
    MethodName: Repos/get-autolinkAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-autolink
  },
  {
    Id: Repos/delete-autolink,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/autolinks/{autolinkId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: autolink_id,
        Name: AutolinkId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: autolinkId,
        ArgumentName: autolinkId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an autolink reference from a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-autolinkAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-autolink
  },
  {
    Id: Repos/check-automated-security-fixes,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/automated-security-fixes",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if automated security fixes are enabled for a repository,
    RequestType: ,
    ResponseType: check-automated-security-fixes,
    MethodName: Repos/check-automated-security-fixesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/check-automated-security-fixes
  },
  {
    Id: Repos/enable-automated-security-fixes,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/automated-security-fixes",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Enable automated security fixes,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/enable-automated-security-fixesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/enable-automated-security-fixes
  },
  {
    Id: Repos/disable-automated-security-fixes,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/automated-security-fixes",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Disable automated security fixes,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/disable-automated-security-fixesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/disable-automated-security-fixes
  },
  {
    Id: Repos/list-branches,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches?protected={protected}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: protected,
        Name: Protected,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: protected,
        ArgumentName: protected
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List branches,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-branchesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-branches
  },
  {
    Id: Repos/get-branch,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a branch,
    RequestType: ,
    ResponseType: branch-with-protection,
    MethodName: Repos/get-branchAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-branch
  },
  {
    Id: Repos/get-branch-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get branch protection,
    RequestType: ,
    ResponseType: branch-protection,
    MethodName: Repos/get-branch-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-branch-protection
  },
  {
    Id: Repos/update-branch-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      },
      {
        Id: required_status_checks,
        Name: RequiredStatusChecks,
        Type: {
          CSharpType: TestRequiredStatusChecks?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: Require status checks to pass before merging. Set to `null` to disable.,
        ParameterName: requiredStatusChecks,
        ArgumentName: requiredStatusChecks
      },
      {
        Id: enforce_admins,
        Name: EnforceAdmins,
        Type: {
          CSharpType: bool?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.,
        ParameterName: enforceAdmins,
        ArgumentName: enforceAdmins
      },
      {
        Id: required_pull_request_reviews,
        Name: RequiredPullRequestReviews,
        Type: {
          CSharpType: TestRequiredPullRequestReviews?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: Require at least one approving review on a pull request, before merging. Set to `null` to disable.,
        ParameterName: requiredPullRequestReviews,
        ArgumentName: requiredPullRequestReviews
      },
      {
        Id: restrictions,
        Name: Restrictions,
        Type: {
          CSharpType: TestRestrictions?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.,
        ParameterName: restrictions,
        ArgumentName: restrictions
      },
      {
        Id: required_linear_history,
        Name: RequiredLinearHistory,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.,
        ParameterName: requiredLinearHistory,
        ArgumentName: requiredLinearHistory
      },
      {
        Id: allow_force_pushes,
        Name: AllowForcePushes,
        Type: {
          CSharpType: bool?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.",
        ParameterName: allowForcePushes,
        ArgumentName: allowForcePushes
      },
      {
        Id: allow_deletions,
        Name: AllowDeletions,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.,
        ParameterName: allowDeletions,
        ArgumentName: allowDeletions
      },
      {
        Id: block_creations,
        Name: BlockCreations,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.,
        ParameterName: blockCreations,
        ArgumentName: blockCreations
      },
      {
        Id: required_conversation_resolution,
        Name: RequiredConversationResolution,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.,
        ParameterName: requiredConversationResolution,
        ArgumentName: requiredConversationResolution
      },
      {
        Id: lock_branch,
        Name: LockBranch,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
<br/>Default Value: false,
        ParameterName: lockBranch,
        ArgumentName: lockBranch
      },
      {
        Id: allow_fork_syncing,
        Name: AllowForkSyncing,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
<br/>Default Value: false,
        ParameterName: allowForkSyncing,
        ArgumentName: allowForkSyncing
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Update branch protection,
    RequestType: ,
    ResponseType: protected-branch,
    MethodName: Repos/update-branch-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-branch-protection
  },
  {
    Id: Repos/delete-branch-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete branch protection,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-branch-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-branch-protection
  },
  {
    Id: Repos/get-admin-branch-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get admin branch protection,
    RequestType: ,
    ResponseType: protected-branch-admin-enforced,
    MethodName: Repos/get-admin-branch-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-admin-branch-protection
  },
  {
    Id: Repos/set-admin-branch-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Set admin branch protection,
    RequestType: ,
    ResponseType: protected-branch-admin-enforced,
    MethodName: Repos/set-admin-branch-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/set-admin-branch-protection
  },
  {
    Id: Repos/delete-admin-branch-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete admin branch protection,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-admin-branch-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-admin-branch-protection
  },
  {
    Id: Repos/get-pull-request-review-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get pull request review protection,
    RequestType: ,
    ResponseType: protected-branch-pull-request-review,
    MethodName: Repos/get-pull-request-review-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-pull-request-review-protection
  },
  {
    Id: Repos/update-pull-request-review-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      },
      {
        Id: dismissal_restrictions,
        Name: DismissalRestrictions,
        Type: {
          CSharpType: TestDismissalRestrictions?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.,
        ParameterName: dismissalRestrictions,
        ArgumentName: dismissalRestrictions
      },
      {
        Id: dismiss_stale_reviews,
        Name: DismissStaleReviews,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.,
        ParameterName: dismissStaleReviews,
        ArgumentName: dismissStaleReviews
      },
      {
        Id: require_code_owner_reviews,
        Name: RequireCodeOwnerReviews,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.,
        ParameterName: requireCodeOwnerReviews,
        ArgumentName: requireCodeOwnerReviews
      },
      {
        Id: required_approving_review_count,
        Name: RequiredApprovingReviewCount,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.,
        ParameterName: requiredApprovingReviewCount,
        ArgumentName: requiredApprovingReviewCount
      },
      {
        Id: require_last_push_approval,
        Name: RequireLastPushApproval,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
<br/>Default Value: false,
        ParameterName: requireLastPushApproval,
        ArgumentName: requireLastPushApproval
      },
      {
        Id: bypass_pull_request_allowances,
        Name: BypassPullRequestAllowances,
        Type: {
          CSharpType: TestBypassPullRequestAllowances?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Allow specific users, teams, or apps to bypass pull request requirements.,
        ParameterName: bypassPullRequestAllowances,
        ArgumentName: bypassPullRequestAllowances
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update pull request review protection,
    RequestType: ,
    ResponseType: protected-branch-pull-request-review,
    MethodName: Repos/update-pull-request-review-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-pull-request-review-protection
  },
  {
    Id: Repos/delete-pull-request-review-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete pull request review protection,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-pull-request-review-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-pull-request-review-protection
  },
  {
    Id: Repos/get-commit-signature-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get commit signature protection,
    RequestType: ,
    ResponseType: protected-branch-admin-enforced,
    MethodName: Repos/get-commit-signature-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-commit-signature-protection
  },
  {
    Id: Repos/create-commit-signature-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create commit signature protection,
    RequestType: ,
    ResponseType: protected-branch-admin-enforced,
    MethodName: Repos/create-commit-signature-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-commit-signature-protection
  },
  {
    Id: Repos/delete-commit-signature-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete commit signature protection,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-commit-signature-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-commit-signature-protection
  },
  {
    Id: Repos/get-status-checks-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get status checks protection,
    RequestType: ,
    ResponseType: status-check-policy,
    MethodName: Repos/get-status-checks-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-status-checks-protection
  },
  {
    Id: Repos/update-status-check-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      },
      {
        Id: strict,
        Name: Strict,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Require branches to be up to date before merging.,
        ParameterName: strict,
        ArgumentName: strict
      },
      {
        Id: contexts,
        Name: Contexts,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
,
        ParameterName: contexts,
        ArgumentName: contexts
      },
      {
        Id: checks,
        Name: Checks,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<TestChecks?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The list of status checks to require in order to merge into this branch.,
        ParameterName: checks,
        ArgumentName: checks
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update status check protection,
    RequestType: ,
    ResponseType: status-check-policy,
    MethodName: Repos/update-status-check-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-status-check-protection
  },
  {
    Id: Repos/remove-status-check-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove status check protection,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/remove-status-check-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/remove-status-check-protection
  },
  {
    Id: Repos/get-all-status-check-contexts,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all status check contexts,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-all-status-check-contextsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-all-status-check-contexts
  },
  {
    Id: Repos/add-status-check-contexts,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add status check contexts,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/add-status-check-contextsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/add-status-check-contexts
  },
  {
    Id: Repos/set-status-check-contexts,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set status check contexts,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/set-status-check-contextsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/set-status-check-contexts
  },
  {
    Id: Repos/remove-status-check-contexts,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove status check contexts,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/remove-status-check-contextsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/remove-status-check-contexts
  },
  {
    Id: Repos/get-access-restrictions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get access restrictions,
    RequestType: ,
    ResponseType: branch-restriction-policy,
    MethodName: Repos/get-access-restrictionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-access-restrictions
  },
  {
    Id: Repos/delete-access-restrictions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete access restrictions,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-access-restrictionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-access-restrictions
  },
  {
    Id: Repos/get-apps-with-access-to-protected-branch,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get apps with access to the protected branch,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-apps-with-access-to-protected-branchAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-apps-with-access-to-protected-branch
  },
  {
    Id: Repos/add-app-access-restrictions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add app access restrictions,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/add-app-access-restrictionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/add-app-access-restrictions
  },
  {
    Id: Repos/set-app-access-restrictions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set app access restrictions,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/set-app-access-restrictionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/set-app-access-restrictions
  },
  {
    Id: Repos/remove-app-access-restrictions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove app access restrictions,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/remove-app-access-restrictionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/remove-app-access-restrictions
  },
  {
    Id: Repos/get-teams-with-access-to-protected-branch,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get teams with access to the protected branch,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-teams-with-access-to-protected-branchAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-teams-with-access-to-protected-branch
  },
  {
    Id: Repos/add-team-access-restrictions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add team access restrictions,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/add-team-access-restrictionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/add-team-access-restrictions
  },
  {
    Id: Repos/set-team-access-restrictions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set team access restrictions,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/set-team-access-restrictionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/set-team-access-restrictions
  },
  {
    Id: Repos/remove-team-access-restrictions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove team access restrictions,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/remove-team-access-restrictionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/remove-team-access-restrictions
  },
  {
    Id: Repos/get-users-with-access-to-protected-branch,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get users with access to the protected branch,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-users-with-access-to-protected-branchAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-users-with-access-to-protected-branch
  },
  {
    Id: Repos/add-user-access-restrictions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add user access restrictions,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/add-user-access-restrictionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/add-user-access-restrictions
  },
  {
    Id: Repos/set-user-access-restrictions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set user access restrictions,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/set-user-access-restrictionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/set-user-access-restrictions
  },
  {
    Id: Repos/remove-user-access-restrictions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove user access restrictions,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/remove-user-access-restrictionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/remove-user-access-restrictions
  },
  {
    Id: Repos/rename-branch,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/branches/{branch}/rename",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      },
      {
        Id: new_name,
        Name: NewName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The new name of the branch.,
        ParameterName: newName,
        ArgumentName: newName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Rename a branch,
    RequestType: ,
    ResponseType: branch-with-protection,
    MethodName: Repos/rename-branchAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/rename-branch
  },
  {
    Id: Checks/create,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/check-runs",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the check. For example, "code-coverage".,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: head_sha,
        Name: HeadSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The SHA of the commit.,
        ParameterName: headSha,
        ArgumentName: headSha
      },
      {
        Id: details_url,
        Name: DetailsUrl,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.,
        ParameterName: detailsUrl,
        ArgumentName: detailsUrl
      },
      {
        Id: external_id,
        Name: ExternalId,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A reference for the run on the integrator's system.,
        ParameterName: externalId,
        ArgumentName: externalId
      },
      {
        Id: status,
        Name: Status,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Queued,
            InProgress,
            Completed,
            Waiting,
            Requested,
            Pending
          ],
          EnumValues: [
            queued,
            in_progress,
            completed,
            waiting,
            requested,
            pending
          ]
        },
        IsRequired: false,
        DefaultValue: TestStatus.Queued,
        Summary:
The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
<br/>Default Value: queued,
        ParameterName: status,
        ArgumentName: status
      },
      {
        Id: started_at,
        Name: StartedAt,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.,
        ParameterName: startedAt,
        ArgumentName: startedAt
      },
      {
        Id: conclusion,
        Name: Conclusion,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            ActionRequired,
            Cancelled,
            Failure,
            Neutral,
            Success,
            Skipped,
            Stale,
            TimedOut
          ],
          EnumValues: [
            action_required,
            cancelled,
            failure,
            neutral,
            success,
            skipped,
            stale,
            timed_out
          ]
        },
        IsRequired: false,
        Summary:
**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.,
        ParameterName: conclusion,
        ArgumentName: conclusion
      },
      {
        Id: completed_at,
        Name: CompletedAt,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.,
        ParameterName: completedAt,
        ArgumentName: completedAt
      },
      {
        Id: output,
        Name: Output,
        Type: {
          CSharpType: TestOutput?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.,
        ParameterName: output,
        ArgumentName: output
      },
      {
        Id: actions,
        Name: Actions,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<TestActions?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions).",
        ParameterName: actions,
        ArgumentName: actions
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a check run,
    RequestType: ,
    ResponseType: check-run,
    MethodName: Checks/createAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/create
  },
  {
    Id: Checks/get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/check-runs/{checkRunId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: check_run_id,
        Name: CheckRunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: checkRunId,
        ArgumentName: checkRunId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a check run,
    RequestType: ,
    ResponseType: check-run,
    MethodName: Checks/getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/get
  },
  {
    Id: Checks/update,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/check-runs/{checkRunId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: check_run_id,
        Name: CheckRunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: checkRunId,
        ArgumentName: checkRunId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the check. For example, "code-coverage".,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: details_url,
        Name: DetailsUrl,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The URL of the integrator's site that has the full details of the check.,
        ParameterName: detailsUrl,
        ArgumentName: detailsUrl
      },
      {
        Id: external_id,
        Name: ExternalId,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A reference for the run on the integrator's system.,
        ParameterName: externalId,
        ArgumentName: externalId
      },
      {
        Id: started_at,
        Name: StartedAt,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.,
        ParameterName: startedAt,
        ArgumentName: startedAt
      },
      {
        Id: status,
        Name: Status,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Queued,
            InProgress,
            Completed,
            Waiting,
            Requested,
            Pending
          ],
          EnumValues: [
            queued,
            in_progress,
            completed,
            waiting,
            requested,
            pending
          ]
        },
        IsRequired: false,
        Summary: The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.,
        ParameterName: status,
        ArgumentName: status
      },
      {
        Id: conclusion,
        Name: Conclusion,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            ActionRequired,
            Cancelled,
            Failure,
            Neutral,
            Success,
            Skipped,
            Stale,
            TimedOut
          ],
          EnumValues: [
            action_required,
            cancelled,
            failure,
            neutral,
            success,
            skipped,
            stale,
            timed_out
          ]
        },
        IsRequired: false,
        Summary:
**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.,
        ParameterName: conclusion,
        ArgumentName: conclusion
      },
      {
        Id: completed_at,
        Name: CompletedAt,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.,
        ParameterName: completedAt,
        ArgumentName: completedAt
      },
      {
        Id: output,
        Name: Output,
        Type: {
          CSharpType: TestOutput?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.,
        ParameterName: output,
        ArgumentName: output
      },
      {
        Id: actions,
        Name: Actions,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<TestActions?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions).",
        ParameterName: actions,
        ArgumentName: actions
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a check run,
    RequestType: ,
    ResponseType: check-run,
    MethodName: Checks/updateAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/update
  },
  {
    Id: Checks/list-annotations,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/check-runs/{checkRunId}/annotations?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: check_run_id,
        Name: CheckRunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: checkRunId,
        ArgumentName: checkRunId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List check run annotations,
    RequestType: ,
    ResponseType: ,
    MethodName: Checks/list-annotationsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/list-annotations
  },
  {
    Id: Checks/rerequest-run,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/check-runs/{checkRunId}/rerequest",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: check_run_id,
        Name: CheckRunId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: checkRunId,
        ArgumentName: checkRunId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Rerequest a check run,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Checks/rerequest-runAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/rerequest-run
  },
  {
    Id: Checks/create-suite,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/check-suites",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: head_sha,
        Name: HeadSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The sha of the head commit.,
        ParameterName: headSha,
        ArgumentName: headSha
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a check suite,
    RequestType: ,
    ResponseType: check-suite,
    MethodName: Checks/create-suiteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/create-suite
  },
  {
    Id: Checks/set-suites-preferences,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/check-suites/preferences",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: auto_trigger_checks,
        Name: AutoTriggerChecks,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<TestAutoTriggerChecks?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.,
        ParameterName: autoTriggerChecks,
        ArgumentName: autoTriggerChecks
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update repository preferences for check suites,
    RequestType: ,
    ResponseType: check-suite-preference,
    MethodName: Checks/set-suites-preferencesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/set-suites-preferences
  },
  {
    Id: Checks/get-suite,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/check-suites/{checkSuiteId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: check_suite_id,
        Name: CheckSuiteId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: checkSuiteId,
        ArgumentName: checkSuiteId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a check suite,
    RequestType: ,
    ResponseType: check-suite,
    MethodName: Checks/get-suiteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/get-suite
  },
  {
    Id: Checks/list-for-suite,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/check-suites/{checkSuiteId}/check-runs?check_name={checkName}&status={status}&filter={filter}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: check_suite_id,
        Name: CheckSuiteId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: checkSuiteId,
        ArgumentName: checkSuiteId
      },
      {
        Id: check_name,
        Name: CheckName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: checkName,
        ArgumentName: checkName
      },
      {
        Id: status,
        Name: Status,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Queued,
            InProgress,
            Completed
          ],
          EnumValues: [
            queued,
            in_progress,
            completed
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: status,
        ArgumentName: status
      },
      {
        Id: filter,
        Name: Filter,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Latest,
            All
          ],
          EnumValues: [
            latest,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Filter.Latest,
        Summary:
<br/>Default Value: latest,
        ParameterName: filter,
        ArgumentName: filter
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List check runs in a check suite,
    RequestType: ,
    ResponseType: ,
    MethodName: Checks/list-for-suiteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/list-for-suite
  },
  {
    Id: Checks/rerequest-suite,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/check-suites/{checkSuiteId}/rerequest",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: check_suite_id,
        Name: CheckSuiteId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: checkSuiteId,
        ArgumentName: checkSuiteId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Rerequest a check suite,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Checks/rerequest-suiteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/rerequest-suite
  },
  {
    Id: Code-scanning/list-alerts-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/alerts?tool_name={toolName}&tool_guid={toolGuid}&page={page}&per_page={perPage}&ref={ref}&direction={direction}&sort={sort}&state={state}&severity={severity}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: tool_name,
        Name: ToolName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: The name of the tool used to generate the code scanning analysis.,
        ParameterName: toolName,
        ArgumentName: toolName
      },
      {
        Id: tool_guid,
        Name: ToolGuid,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.,
        ParameterName: toolGuid,
        ArgumentName: toolGuid
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
The Git reference, formatted as `refs/pull/&lt;number&gt;/merge`, `refs/pull/&lt;number&gt;/head`,
`refs/heads/&lt;branch name&gt;` or simply `&lt;branch name&gt;`.,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed,
            Dismissed,
            Fixed
          ],
          EnumValues: [
            open,
            closed,
            dismissed,
            fixed
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: State of a code scanning alert.,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: severity,
        Name: Severity,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Critical,
            High,
            Medium,
            Low,
            Warning,
            Note,
            Error
          ],
          EnumValues: [
            critical,
            high,
            medium,
            low,
            warning,
            note,
            error
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: Severity of a code scanning alert.,
        ParameterName: severity,
        ArgumentName: severity
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List code scanning alerts for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Code-scanning/list-alerts-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/list-alerts-for-repo
  },
  {
    Id: Code-scanning/get-alert,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: alert_number,
        Name: AlertNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: The security alert number.,
        ParameterName: alertNumber,
        ArgumentName: alertNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a code scanning alert,
    RequestType: ,
    ResponseType: code-scanning-alert,
    MethodName: Code-scanning/get-alertAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/get-alert
  },
  {
    Id: Code-scanning/update-alert,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: alert_number,
        Name: AlertNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: The security alert number.,
        ParameterName: alertNumber,
        ArgumentName: alertNumber
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Dismissed
          ],
          EnumValues: [
            open,
            dismissed
          ]
        },
        IsRequired: true,
        Summary: Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: dismissed_reason,
        Name: DismissedReason,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            ,
            FalsePositive,
            Won'tFix,
            UsedInTests
          ],
          EnumValues: [
            ,
            false positive,
            won't fix,
            used in tests
          ]
        },
        IsRequired: false,
        Summary: **Required when the state is dismissed.** The reason for dismissing or closing the alert.,
        ParameterName: dismissedReason,
        ArgumentName: dismissedReason
      },
      {
        Id: dismissed_comment,
        Name: DismissedComment,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The dismissal comment associated with the dismissal of the alert.,
        ParameterName: dismissedComment,
        ArgumentName: dismissedComment
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a code scanning alert,
    RequestType: ,
    ResponseType: code-scanning-alert,
    MethodName: Code-scanning/update-alertAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/update-alert
  },
  {
    Id: Code-scanning/list-alert-instances,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}/instances?page={page}&per_page={perPage}&ref={ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: alert_number,
        Name: AlertNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: The security alert number.,
        ParameterName: alertNumber,
        ArgumentName: alertNumber
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
The Git reference, formatted as `refs/pull/&lt;number&gt;/merge`, `refs/pull/&lt;number&gt;/head`,
`refs/heads/&lt;branch name&gt;` or simply `&lt;branch name&gt;`.,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List instances of a code scanning alert,
    RequestType: ,
    ResponseType: ,
    MethodName: Code-scanning/list-alert-instancesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/list-alert-instances
  },
  {
    Id: Code-scanning/list-recent-analyses,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/analyses?tool_name={toolName}&tool_guid={toolGuid}&page={page}&per_page={perPage}&ref={ref}&sarif_id={sarifId}&direction={direction}&sort={sort}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: tool_name,
        Name: ToolName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: The name of the tool used to generate the code scanning analysis.,
        ParameterName: toolName,
        ArgumentName: toolName
      },
      {
        Id: tool_guid,
        Name: ToolGuid,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.,
        ParameterName: toolGuid,
        ArgumentName: toolGuid
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
The Git reference, formatted as `refs/pull/&lt;number&gt;/merge`, `refs/pull/&lt;number&gt;/head`,
`refs/heads/&lt;branch name&gt;` or simply `&lt;branch name&gt;`.,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: sarif_id,
        Name: SarifId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
An identifier for the upload.
<br/>Example: 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53,
        ParameterName: sarifId,
        ArgumentName: sarifId
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created
          ],
          EnumValues: [
            created
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List code scanning analyses for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Code-scanning/list-recent-analysesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/list-recent-analyses
  },
  {
    Id: Code-scanning/get-analysis,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/analyses/{analysisId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: analysis_id,
        Name: AnalysisId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: analysisId,
        ArgumentName: analysisId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a code scanning analysis for a repository,
    RequestType: ,
    ResponseType: code-scanning-analysis,
    MethodName: Code-scanning/get-analysisAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/get-analysis
  },
  {
    Id: Code-scanning/delete-analysis,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/analyses/{analysisId}?confirm_delete={confirmDelete}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: analysis_id,
        Name: AnalysisId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: analysisId,
        ArgumentName: analysisId
      },
      {
        Id: confirm_delete,
        Name: ConfirmDelete,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: confirmDelete,
        ArgumentName: confirmDelete
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a code scanning analysis from a repository,
    RequestType: ,
    ResponseType: code-scanning-analysis-deletion,
    MethodName: Code-scanning/delete-analysisAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/delete-analysis
  },
  {
    Id: Code-scanning/list-codeql-databases,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/codeql/databases",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List CodeQL databases for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Code-scanning/list-codeql-databasesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/list-codeql-databases
  },
  {
    Id: Code-scanning/get-codeql-database,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: language,
        Name: Language,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: language,
        ArgumentName: language
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a CodeQL database for a repository,
    RequestType: ,
    ResponseType: code-scanning-codeql-database,
    MethodName: Code-scanning/get-codeql-databaseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/get-codeql-database
  },
  {
    Id: Code-scanning/create-variant-analysis,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: language,
        Name: Language,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Cpp,
            Csharp,
            Go,
            Java,
            Javascript,
            Python,
            Ruby,
            Swift
          ],
          EnumValues: [
            cpp,
            csharp,
            go,
            java,
            javascript,
            python,
            ruby,
            swift
          ]
        },
        IsRequired: true,
        Summary: The language targeted by the CodeQL query,
        ParameterName: language,
        ArgumentName: language
      },
      {
        Id: query_pack,
        Name: QueryPack,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A Base64-encoded tarball containing a CodeQL query and all its dependencies,
        ParameterName: queryPack,
        ArgumentName: queryPack
      },
      {
        Id: repositories,
        Name: Repositories,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: List of repository names (in the form `owner/repo-name`) to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.,
        ParameterName: repositories,
        ArgumentName: repositories
      },
      {
        Id: repository_lists,
        Name: RepositoryLists,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: List of repository lists to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.,
        ParameterName: repositoryLists,
        ArgumentName: repositoryLists
      },
      {
        Id: repository_owners,
        Name: RepositoryOwners,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: List of organization or user names whose repositories the query should be run against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.,
        ParameterName: repositoryOwners,
        ArgumentName: repositoryOwners
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a CodeQL variant analysis,
    RequestType: ,
    ResponseType: code-scanning-variant-analysis,
    MethodName: Code-scanning/create-variant-analysisAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/create-variant-analysis
  },
  {
    Id: Code-scanning/get-variant-analysis,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeqlVariantAnalysisId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: codeql_variant_analysis_id,
        Name: CodeqlVariantAnalysisId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codeqlVariantAnalysisId,
        ArgumentName: codeqlVariantAnalysisId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the summary of a CodeQL variant analysis,
    RequestType: ,
    ResponseType: code-scanning-variant-analysis,
    MethodName: Code-scanning/get-variant-analysisAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/get-variant-analysis
  },
  {
    Id: Code-scanning/get-variant-analysis-repo-task,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeqlVariantAnalysisId}/repos/{repoOwner}/{repoName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: codeql_variant_analysis_id,
        Name: CodeqlVariantAnalysisId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codeqlVariantAnalysisId,
        ArgumentName: codeqlVariantAnalysisId
      },
      {
        Id: repo_owner,
        Name: RepoOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repoOwner,
        ArgumentName: repoOwner
      },
      {
        Id: repo_name,
        Name: RepoName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repoName,
        ArgumentName: repoName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the analysis status of a repository in a CodeQL variant analysis,
    RequestType: ,
    ResponseType: code-scanning-variant-analysis-repo-task,
    MethodName: Code-scanning/get-variant-analysis-repo-taskAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/get-variant-analysis-repo-task
  },
  {
    Id: Code-scanning/get-default-setup,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/default-setup",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a code scanning default setup configuration,
    RequestType: ,
    ResponseType: code-scanning-default-setup,
    MethodName: Code-scanning/get-default-setupAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/get-default-setup
  },
  {
    Id: Code-scanning/update-default-setup,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/default-setup",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Configured,
            NotConfigured
          ],
          EnumValues: [
            configured,
            not-configured
          ]
        },
        IsRequired: false,
        Summary: The desired state of code scanning default setup.,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: query_suite,
        Name: QuerySuite,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Default,
            Extended
          ],
          EnumValues: [
            default,
            extended
          ]
        },
        IsRequired: false,
        Summary: CodeQL query suite to be used.,
        ParameterName: querySuite,
        ArgumentName: querySuite
      },
      {
        Id: languages,
        Name: Languages,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: CodeQL languages to be analyzed.,
        ParameterName: languages,
        ArgumentName: languages
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a code scanning default setup configuration,
    RequestType: CodeScanningDefaultSetupUpdate,
    ResponseType: empty-object,
    MethodName: Code-scanning/update-default-setupAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/update-default-setup
  },
  {
    Id: Code-scanning/upload-sarif,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/sarifs",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: commit_sha,
        Name: CommitSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The SHA of the commit to which the analysis you are uploading relates.,
        ParameterName: commitSha,
        ArgumentName: commitSha
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The full Git reference, formatted as `refs/heads/&lt;branch name&gt;`,
`refs/tags/&lt;tag&gt;`, `refs/pull/&lt;number&gt;/merge`, or `refs/pull/&lt;number&gt;/head`.
<br/>Example: refs/heads/main,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: sarif,
        Name: Sarif,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning).",
        ParameterName: sarif,
        ArgumentName: sarif
      },
      {
        Id: checkout_uri,
        Name: CheckoutUri,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The base directory used in the analysis, as it appears in the SARIF file.
This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
<br/>Example: file:///github/workspace/,
        ParameterName: checkoutUri,
        ArgumentName: checkoutUri
      },
      {
        Id: started_at,
        Name: StartedAt,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.,
        ParameterName: startedAt,
        ArgumentName: startedAt
      },
      {
        Id: tool_name,
        Name: ToolName,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.,
        ParameterName: toolName,
        ArgumentName: toolName
      },
      {
        Id: validate,
        Name: Validate,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Whether the SARIF file will be validated according to the code scanning specifications.
This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.,
        ParameterName: validate,
        ArgumentName: validate
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Upload an analysis as SARIF data,
    RequestType: ,
    ResponseType: code-scanning-sarifs-receipt,
    MethodName: Code-scanning/upload-sarifAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/upload-sarif
  },
  {
    Id: Code-scanning/get-sarif,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/code-scanning/sarifs/{sarifId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: sarif_id,
        Name: SarifId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: sarifId,
        ArgumentName: sarifId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get information about a SARIF upload,
    RequestType: ,
    ResponseType: code-scanning-sarifs-status,
    MethodName: Code-scanning/get-sarifAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Code-scanning/get-sarif
  },
  {
    Id: Repos/codeowners-errors,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codeowners/errors?ref={ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List CODEOWNERS errors,
    RequestType: ,
    ResponseType: codeowners-errors,
    MethodName: Repos/codeowners-errorsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/codeowners-errors
  },
  {
    Id: Codespaces/list-in-repository-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codespaces?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List codespaces in a repository for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/list-in-repository-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/list-in-repository-for-authenticated-user
  },
  {
    Id: Codespaces/create-with-repo-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codespaces",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Git ref (typically a branch name) for this codespace,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: location,
        Name: Location,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.,
        ParameterName: location,
        ArgumentName: location
      },
      {
        Id: geo,
        Name: Geo,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            EuropeWest,
            SoutheastAsia,
            UsEast,
            UsWest
          ],
          EnumValues: [
            EuropeWest,
            SoutheastAsia,
            UsEast,
            UsWest
          ]
        },
        IsRequired: false,
        Summary: The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.,
        ParameterName: geo,
        ArgumentName: geo
      },
      {
        Id: client_ip,
        Name: ClientIp,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: IP for location auto-detection when proxying a request,
        ParameterName: clientIp,
        ArgumentName: clientIp
      },
      {
        Id: machine,
        Name: Machine,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Machine type to use for this codespace,
        ParameterName: machine,
        ArgumentName: machine
      },
      {
        Id: devcontainer_path,
        Name: DevcontainerPath,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Path to devcontainer.json config to use for this codespace,
        ParameterName: devcontainerPath,
        ArgumentName: devcontainerPath
      },
      {
        Id: multi_repo_permissions_opt_out,
        Name: MultiRepoPermissionsOptOut,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether to authorize requested permissions from devcontainer.json,
        ParameterName: multiRepoPermissionsOptOut,
        ArgumentName: multiRepoPermissionsOptOut
      },
      {
        Id: working_directory,
        Name: WorkingDirectory,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Working directory for this codespace,
        ParameterName: workingDirectory,
        ArgumentName: workingDirectory
      },
      {
        Id: idle_timeout_minutes,
        Name: IdleTimeoutMinutes,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Time in minutes before codespace stops from inactivity,
        ParameterName: idleTimeoutMinutes,
        ArgumentName: idleTimeoutMinutes
      },
      {
        Id: display_name,
        Name: DisplayName,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Display name for this codespace,
        ParameterName: displayName,
        ArgumentName: displayName
      },
      {
        Id: retention_period_minutes,
        Name: RetentionPeriodMinutes,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).,
        ParameterName: retentionPeriodMinutes,
        ArgumentName: retentionPeriodMinutes
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a codespace in a repository,
    RequestType: ,
    ResponseType: codespace,
    MethodName: Codespaces/create-with-repo-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/create-with-repo-for-authenticated-user
  },
  {
    Id: Codespaces/list-devcontainers-in-repository-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codespaces/devcontainers?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List devcontainer configurations in a repository for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/list-devcontainers-in-repository-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/list-devcontainers-in-repository-for-authenticated-user
  },
  {
    Id: Codespaces/repo-machines-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codespaces/machines?location={location}&client_ip={clientIp}&ref={ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: location,
        Name: Location,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: WestUs2,
        ParameterName: location,
        ArgumentName: location
      },
      {
        Id: client_ip,
        Name: ClientIp,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: clientIp,
        ArgumentName: clientIp
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: main,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List available machine types for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/repo-machines-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/repo-machines-for-authenticated-user
  },
  {
    Id: Codespaces/pre-flight-with-repo-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codespaces/new?ref={ref}&client_ip={clientIp}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: main,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: client_ip,
        Name: ClientIp,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: 1.2.3.4,
        ParameterName: clientIp,
        ArgumentName: clientIp
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get default attributes for a codespace,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/pre-flight-with-repo-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/pre-flight-with-repo-for-authenticated-user
  },
  {
    Id: Codespaces/check-permissions-for-devcontainer,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codespaces/permissions_check?ref={ref}&devcontainer_path={devcontainerPath}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: master,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: devcontainer_path,
        Name: DevcontainerPath,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
<br/>Example: .devcontainer/example/devcontainer.json,
        ParameterName: devcontainerPath,
        ArgumentName: devcontainerPath
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if permissions defined by a devcontainer have been accepted by the authenticated user,
    RequestType: ,
    ResponseType: codespaces-permissions-check-for-devcontainer,
    MethodName: Codespaces/check-permissions-for-devcontainerAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/check-permissions-for-devcontainer
  },
  {
    Id: Codespaces/list-repo-secrets,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codespaces/secrets?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository secrets,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/list-repo-secretsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/list-repo-secrets
  },
  {
    Id: Codespaces/get-repo-public-key,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codespaces/secrets/public-key",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository public key,
    RequestType: ,
    ResponseType: codespaces-public-key,
    MethodName: Codespaces/get-repo-public-keyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/get-repo-public-key
  },
  {
    Id: Codespaces/get-repo-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codespaces/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository secret,
    RequestType: ,
    ResponseType: repo-codespaces-secret,
    MethodName: Codespaces/get-repo-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/get-repo-secret
  },
  {
    Id: Codespaces/create-or-update-repo-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codespaces/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: encrypted_value,
        Name: EncryptedValue,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.,
        ParameterName: encryptedValue,
        ArgumentName: encryptedValue
      },
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ID of the key you used to encrypt the secret.,
        ParameterName: keyId,
        ArgumentName: keyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Create or update a repository secret,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Codespaces/create-or-update-repo-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/create-or-update-repo-secret
  },
  {
    Id: Codespaces/delete-repo-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/codespaces/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a repository secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/delete-repo-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/delete-repo-secret
  },
  {
    Id: Repos/list-collaborators,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/collaborators?affiliation={affiliation}&permission={permission}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: affiliation,
        Name: Affiliation,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Outside,
            Direct,
            All
          ],
          EnumValues: [
            outside,
            direct,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Affiliation.All,
        Summary:
<br/>Default Value: all,
        ParameterName: affiliation,
        ArgumentName: affiliation
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Pull,
            Triage,
            Push,
            Maintain,
            Admin
          ],
          EnumValues: [
            pull,
            triage,
            push,
            maintain,
            admin
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: permission,
        ArgumentName: permission
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository collaborators,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-collaboratorsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-collaborators
  },
  {
    Id: Repos/check-collaborator,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/collaborators/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if a user is a repository collaborator,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/check-collaboratorAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/check-collaborator
  },
  {
    Id: Repos/add-collaborator,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/collaborators/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "push",
        Summary:
The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
<br/>Default Value: push,
        ParameterName: permission,
        ArgumentName: permission
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add a repository collaborator,
    RequestType: ,
    ResponseType: repository-invitation,
    MethodName: Repos/add-collaboratorAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/add-collaborator
  },
  {
    Id: Repos/remove-collaborator,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/collaborators/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a repository collaborator,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/remove-collaboratorAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/remove-collaborator
  },
  {
    Id: Repos/get-collaborator-permission-level,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/collaborators/{username}/permission",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get repository permissions for a user,
    RequestType: ,
    ResponseType: repository-collaborator-permission,
    MethodName: Repos/get-collaborator-permission-levelAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-collaborator-permission-level
  },
  {
    Id: Repos/list-commit-comments-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/comments?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List commit comments for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-commit-comments-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-commit-comments-for-repo
  },
  {
    Id: Repos/get-commit-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a commit comment,
    RequestType: ,
    ResponseType: commit-comment,
    MethodName: Repos/get-commit-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-commit-comment
  },
  {
    Id: Repos/update-commit-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The contents of the comment,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a commit comment,
    RequestType: ,
    ResponseType: commit-comment,
    MethodName: Repos/update-commit-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-commit-comment
  },
  {
    Id: Repos/delete-commit-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a commit comment,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-commit-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-commit-comment
  },
  {
    Id: Reactions/list-for-commit-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/comments/{commentId}/reactions?content={content}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: content,
        ArgumentName: content
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List reactions for a commit comment,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/list-for-commit-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/list-for-commit-comment
  },
  {
    Id: Reactions/create-for-commit-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/comments/{commentId}/reactions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: true,
        Summary: The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment.,
        ParameterName: content,
        ArgumentName: content
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create reaction for a commit comment,
    RequestType: ,
    ResponseType: reaction,
    MethodName: Reactions/create-for-commit-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/create-for-commit-comment
  },
  {
    Id: Reactions/delete-for-commit-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/comments/{commentId}/reactions/{reactionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: reaction_id,
        Name: ReactionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reactionId,
        ArgumentName: reactionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a commit comment reaction,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/delete-for-commit-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/delete-for-commit-comment
  },
  {
    Id: Repos/list-commits,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/commits?sha={sha}&path={path}&author={author}&committer={committer}&since={since}&until={until}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: sha,
        Name: Sha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: sha,
        ArgumentName: sha
      },
      {
        Id: path,
        Name: Path,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: path,
        ArgumentName: path
      },
      {
        Id: author,
        Name: Author,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: author,
        ArgumentName: author
      },
      {
        Id: committer,
        Name: Committer,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: committer,
        ArgumentName: committer
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: until,
        Name: Until,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: until,
        ArgumentName: until
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List commits,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-commitsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-commits
  },
  {
    Id: Repos/list-branches-for-head-commit,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/commits/{commitSha}/branches-where-head",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: commit_sha,
        Name: CommitSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commitSha,
        ArgumentName: commitSha
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List branches for HEAD commit,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-branches-for-head-commitAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-branches-for-head-commit
  },
  {
    Id: Repos/list-comments-for-commit,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/commits/{commitSha}/comments?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: commit_sha,
        Name: CommitSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commitSha,
        ArgumentName: commitSha
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List commit comments,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-comments-for-commitAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-comments-for-commit
  },
  {
    Id: Repos/create-commit-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/commits/{commitSha}/comments",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: commit_sha,
        Name: CommitSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commitSha,
        ArgumentName: commitSha
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The contents of the comment.,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: path,
        Name: Path,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Relative path of the file to comment on.,
        ParameterName: path,
        ArgumentName: path
      },
      {
        Id: position,
        Name: Position,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Line index in the diff to comment on.,
        ParameterName: position,
        ArgumentName: position
      },
      {
        Id: line,
        Name: Line,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.,
        ParameterName: line,
        ArgumentName: line
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a commit comment,
    RequestType: ,
    ResponseType: commit-comment,
    MethodName: Repos/create-commit-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-commit-comment
  },
  {
    Id: Repos/list-pull-requests-associated-with-commit,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/commits/{commitSha}/pulls?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: commit_sha,
        Name: CommitSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commitSha,
        ArgumentName: commitSha
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List pull requests associated with a commit,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-pull-requests-associated-with-commitAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-pull-requests-associated-with-commit
  },
  {
    Id: Repos/get-commit,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/commits/{ref}?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a commit,
    RequestType: ,
    ResponseType: commit,
    MethodName: Repos/get-commitAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-commit
  },
  {
    Id: Checks/list-for-ref,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/commits/{ref}/check-runs?check_name={checkName}&status={status}&filter={filter}&per_page={perPage}&page={page}&app_id={appId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: check_name,
        Name: CheckName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: checkName,
        ArgumentName: checkName
      },
      {
        Id: status,
        Name: Status,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Queued,
            InProgress,
            Completed
          ],
          EnumValues: [
            queued,
            in_progress,
            completed
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: status,
        ArgumentName: status
      },
      {
        Id: filter,
        Name: Filter,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Latest,
            All
          ],
          EnumValues: [
            latest,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Filter.Latest,
        Summary:
<br/>Default Value: latest,
        ParameterName: filter,
        ArgumentName: filter
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: app_id,
        Name: AppId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: appId,
        ArgumentName: appId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List check runs for a Git reference,
    RequestType: ,
    ResponseType: ,
    MethodName: Checks/list-for-refAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/list-for-ref
  },
  {
    Id: Checks/list-suites-for-ref,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/commits/{ref}/check-suites?app_id={appId}&check_name={checkName}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: app_id,
        Name: AppId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: appId,
        ArgumentName: appId
      },
      {
        Id: check_name,
        Name: CheckName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: checkName,
        ArgumentName: checkName
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List check suites for a Git reference,
    RequestType: ,
    ResponseType: ,
    MethodName: Checks/list-suites-for-refAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Checks/list-suites-for-ref
  },
  {
    Id: Repos/get-combined-status-for-ref,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/commits/{ref}/status?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the combined status for a specific reference,
    RequestType: ,
    ResponseType: combined-commit-status,
    MethodName: Repos/get-combined-status-for-refAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-combined-status-for-ref
  },
  {
    Id: Repos/list-commit-statuses-for-ref,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/commits/{ref}/statuses?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List commit statuses for a reference,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-commit-statuses-for-refAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-commit-statuses-for-ref
  },
  {
    Id: Repos/get-community-profile-metrics,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/community/profile",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get community profile metrics,
    RequestType: ,
    ResponseType: community-profile,
    MethodName: Repos/get-community-profile-metricsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-community-profile-metrics
  },
  {
    Id: Repos/compare-commits,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/compare/{basehead}?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: basehead,
        Name: Basehead,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: basehead,
        ArgumentName: basehead
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Compare two commits,
    RequestType: ,
    ResponseType: commit-comparison,
    MethodName: Repos/compare-commitsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/compare-commits
  },
  {
    Id: Repos/get-content,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/contents/{path}?ref={ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: path,
        Name: Path,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: path,
        ArgumentName: path
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get repository content,
    RequestType: ,
    ResponseType: content-tree,
    MethodName: Repos/get-contentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-content
  },
  {
    Id: Repos/create-or-update-file-contents,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/contents/{path}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: path,
        Name: Path,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: path,
        ArgumentName: path
      },
      {
        Id: message,
        Name: Message,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The commit message.,
        ParameterName: message,
        ArgumentName: message
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The new file content, using Base64 encoding.,
        ParameterName: content,
        ArgumentName: content
      },
      {
        Id: sha,
        Name: Sha,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: **Required if you are updating a file**. The blob SHA of the file being replaced.,
        ParameterName: sha,
        ArgumentName: sha
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The branch name. Default: the repository’s default branch.,
        ParameterName: branch,
        ArgumentName: branch
      },
      {
        Id: committer,
        Name: Committer,
        Type: {
          CSharpType: TestCommitter?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The person that committed the file. Default: the authenticated user.,
        ParameterName: committer,
        ArgumentName: committer
      },
      {
        Id: author,
        Name: Author,
        Type: {
          CSharpType: TestAuthor?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.,
        ParameterName: author,
        ArgumentName: author
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Create or update file contents,
    RequestType: ,
    ResponseType: file-commit,
    MethodName: Repos/create-or-update-file-contentsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-or-update-file-contents
  },
  {
    Id: Repos/delete-file,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/contents/{path}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: path,
        Name: Path,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: path,
        ArgumentName: path
      },
      {
        Id: message,
        Name: Message,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The commit message.,
        ParameterName: message,
        ArgumentName: message
      },
      {
        Id: sha,
        Name: Sha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The blob SHA of the file being deleted.,
        ParameterName: sha,
        ArgumentName: sha
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The branch name. Default: the repository’s default branch,
        ParameterName: branch,
        ArgumentName: branch
      },
      {
        Id: committer,
        Name: Committer,
        Type: {
          CSharpType: TestCommitter?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: object containing information about the committer.,
        ParameterName: committer,
        ArgumentName: committer
      },
      {
        Id: author,
        Name: Author,
        Type: {
          CSharpType: TestAuthor?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: object containing information about the author.,
        ParameterName: author,
        ArgumentName: author
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a file,
    RequestType: ,
    ResponseType: file-commit,
    MethodName: Repos/delete-fileAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-file
  },
  {
    Id: Repos/list-contributors,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/contributors?anon={anon}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: anon,
        Name: Anon,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: anon,
        ArgumentName: anon
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository contributors,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-contributorsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-contributors
  },
  {
    Id: Dependabot/list-alerts-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dependabot/alerts?state={state}&severity={severity}&ecosystem={ecosystem}&package={package}&manifest={manifest}&scope={scope}&sort={sort}&direction={direction}&page={page}&per_page={perPage}&before={before}&after={after}&first={first}&last={last}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: severity,
        Name: Severity,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: severity,
        ArgumentName: severity
      },
      {
        Id: ecosystem,
        Name: Ecosystem,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ecosystem,
        ArgumentName: ecosystem
      },
      {
        Id: package,
        Name: Package,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: package,
        ArgumentName: package
      },
      {
        Id: manifest,
        Name: Manifest,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: manifest,
        ArgumentName: manifest
      },
      {
        Id: scope,
        Name: Scope,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Development,
            Runtime
          ],
          EnumValues: [
            development,
            runtime
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: scope,
        ArgumentName: scope
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: after,
        Name: After,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: after,
        ArgumentName: after
      },
      {
        Id: first,
        Name: First,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: first,
        ArgumentName: first
      },
      {
        Id: last,
        Name: Last,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: last,
        ArgumentName: last
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List Dependabot alerts for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Dependabot/list-alerts-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/list-alerts-for-repo
  },
  {
    Id: Dependabot/get-alert,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dependabot/alerts/{alertNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: alert_number,
        Name: AlertNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: The security alert number.,
        ParameterName: alertNumber,
        ArgumentName: alertNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a Dependabot alert,
    RequestType: ,
    ResponseType: dependabot-alert,
    MethodName: Dependabot/get-alertAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/get-alert
  },
  {
    Id: Dependabot/update-alert,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dependabot/alerts/{alertNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: alert_number,
        Name: AlertNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: The security alert number.,
        ParameterName: alertNumber,
        ArgumentName: alertNumber
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Dismissed,
            Open
          ],
          EnumValues: [
            dismissed,
            open
          ]
        },
        IsRequired: true,
        Summary:
The state of the Dependabot alert.
A `dismissed_reason` must be provided when setting the state to `dismissed`.,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: dismissed_reason,
        Name: DismissedReason,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            FixStarted,
            Inaccurate,
            NoBandwidth,
            NotUsed,
            TolerableRisk
          ],
          EnumValues: [
            fix_started,
            inaccurate,
            no_bandwidth,
            not_used,
            tolerable_risk
          ]
        },
        IsRequired: false,
        Summary: **Required when `state` is `dismissed`.** A reason for dismissing the alert.,
        ParameterName: dismissedReason,
        ArgumentName: dismissedReason
      },
      {
        Id: dismissed_comment,
        Name: DismissedComment,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An optional comment associated with dismissing the alert.,
        ParameterName: dismissedComment,
        ArgumentName: dismissedComment
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a Dependabot alert,
    RequestType: ,
    ResponseType: dependabot-alert,
    MethodName: Dependabot/update-alertAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/update-alert
  },
  {
    Id: Dependabot/list-repo-secrets,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dependabot/secrets?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository secrets,
    RequestType: ,
    ResponseType: ,
    MethodName: Dependabot/list-repo-secretsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/list-repo-secrets
  },
  {
    Id: Dependabot/get-repo-public-key,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dependabot/secrets/public-key",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository public key,
    RequestType: ,
    ResponseType: dependabot-public-key,
    MethodName: Dependabot/get-repo-public-keyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/get-repo-public-key
  },
  {
    Id: Dependabot/get-repo-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dependabot/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository secret,
    RequestType: ,
    ResponseType: dependabot-secret,
    MethodName: Dependabot/get-repo-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/get-repo-secret
  },
  {
    Id: Dependabot/create-or-update-repo-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dependabot/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: encrypted_value,
        Name: EncryptedValue,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.,
        ParameterName: encryptedValue,
        ArgumentName: encryptedValue
      },
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ID of the key you used to encrypt the secret.,
        ParameterName: keyId,
        ArgumentName: keyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Create or update a repository secret,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Dependabot/create-or-update-repo-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/create-or-update-repo-secret
  },
  {
    Id: Dependabot/delete-repo-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dependabot/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a repository secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Dependabot/delete-repo-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependabot/delete-repo-secret
  },
  {
    Id: Dependency-graph/diff-range,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dependency-graph/compare/{basehead}?name={name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: basehead,
        Name: Basehead,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: basehead,
        ArgumentName: basehead
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a diff of the dependencies between commits,
    RequestType: ,
    ResponseType: dependency-graph-diff,
    MethodName: Dependency-graph/diff-rangeAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependency-graph/diff-range
  },
  {
    Id: Dependency-graph/export-sbom,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dependency-graph/sbom",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Export a software bill of materials (SBOM) for a repository.,
    RequestType: ,
    ResponseType: dependency-graph-spdx-sbom,
    MethodName: Dependency-graph/export-sbomAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependency-graph/export-sbom
  },
  {
    Id: Dependency-graph/create-repository-snapshot,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dependency-graph/snapshots",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: version,
        Name: Version,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The version of the repository snapshot submission.,
        ParameterName: version,
        ArgumentName: version
      },
      {
        Id: job,
        Name: Job,
        Type: {
          CSharpType: SnapshotJob,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: ,
        ParameterName: job,
        ArgumentName: job
      },
      {
        Id: sha,
        Name: Sha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
<br/>Example: ddc951f4b1293222421f2c8df679786153acf689,
        ParameterName: sha,
        ArgumentName: sha
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The repository branch that triggered this snapshot.
<br/>Example: refs/heads/main,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: detector,
        Name: Detector,
        Type: {
          CSharpType: SnapshotDetector,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A description of the detector used.,
        ParameterName: detector,
        ArgumentName: detector
      },
      {
        Id: metadata,
        Name: Metadata,
        Type: {
          CSharpType: Metadata?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: User-defined metadata to store domain-specific information limited to 8 keys with scalar values.,
        ParameterName: metadata,
        ArgumentName: metadata
      },
      {
        Id: manifests,
        Name: Manifests,
        Type: {
          CSharpType: SnapshotManifests?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.,
        ParameterName: manifests,
        ArgumentName: manifests
      },
      {
        Id: scanned,
        Name: Scanned,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The time at which the snapshot was scanned.
<br/>Example: ,
        ParameterName: scanned,
        ArgumentName: scanned
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a snapshot of dependencies for a repository,
    RequestType: Snapshot,
    ResponseType: ,
    MethodName: Dependency-graph/create-repository-snapshotAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Dependency-graph/create-repository-snapshot
  },
  {
    Id: Repos/list-deployments,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/deployments?sha={sha}&ref={ref}&task={task}&environment={environment}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: sha,
        Name: Sha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: "none",
        Summary:
<br/>Default Value: none,
        ParameterName: sha,
        ArgumentName: sha
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: "none",
        Summary:
<br/>Default Value: none,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: task,
        Name: Task,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: "none",
        Summary:
<br/>Default Value: none,
        ParameterName: task,
        ArgumentName: task
      },
      {
        Id: environment,
        Name: Environment,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: "none",
        Summary:
<br/>Default Value: none,
        ParameterName: environment,
        ArgumentName: environment
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List deployments,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-deploymentsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-deployments
  },
  {
    Id: Repos/create-deployment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/deployments",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The ref to deploy. This can be a branch, tag, or SHA.,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: task,
        Name: Task,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "deploy",
        Summary:
Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
<br/>Default Value: deploy,
        ParameterName: task,
        ArgumentName: task
      },
      {
        Id: auto_merge,
        Name: AutoMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
<br/>Default Value: true,
        ParameterName: autoMerge,
        ArgumentName: autoMerge
      },
      {
        Id: required_contexts,
        Name: RequiredContexts,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.,
        ParameterName: requiredContexts,
        ArgumentName: requiredContexts
      },
      {
        Id: payload,
        Name: Payload,
        Type: {
          CSharpType: object?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: ,
        Summary: ,
        ParameterName: payload,
        ArgumentName: payload
      },
      {
        Id: environment,
        Name: Environment,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "production",
        Summary:
Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
<br/>Default Value: production,
        ParameterName: environment,
        ArgumentName: environment
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "",
        Summary:
Short description of the deployment.
<br/>Default Value: ,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: transient_environment,
        Name: TransientEnvironment,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
<br/>Default Value: false,
        ParameterName: transientEnvironment,
        ArgumentName: transientEnvironment
      },
      {
        Id: production_environment,
        Name: ProductionEnvironment,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.,
        ParameterName: productionEnvironment,
        ArgumentName: productionEnvironment
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a deployment,
    RequestType: ,
    ResponseType: deployment,
    MethodName: Repos/create-deploymentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-deployment
  },
  {
    Id: Repos/get-deployment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/deployments/{deploymentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: deployment_id,
        Name: DeploymentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentId,
        ArgumentName: deploymentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a deployment,
    RequestType: ,
    ResponseType: deployment,
    MethodName: Repos/get-deploymentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-deployment
  },
  {
    Id: Repos/delete-deployment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/deployments/{deploymentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: deployment_id,
        Name: DeploymentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentId,
        ArgumentName: deploymentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a deployment,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-deploymentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-deployment
  },
  {
    Id: Repos/list-deployment-statuses,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/deployments/{deploymentId}/statuses?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: deployment_id,
        Name: DeploymentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentId,
        ArgumentName: deploymentId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List deployment statuses,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-deployment-statusesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-deployment-statuses
  },
  {
    Id: Repos/create-deployment-status,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/deployments/{deploymentId}/statuses",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: deployment_id,
        Name: DeploymentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentId,
        ArgumentName: deploymentId
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Error,
            Failure,
            Inactive,
            InProgress,
            Queued,
            Pending,
            Success
          ],
          EnumValues: [
            error,
            failure,
            inactive,
            in_progress,
            queued,
            pending,
            success
          ]
        },
        IsRequired: true,
        Summary: The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: target_url,
        Name: TargetUrl,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "",
        Summary:
The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
<br/>Default Value: ,
        ParameterName: targetUrl,
        ArgumentName: targetUrl
      },
      {
        Id: log_url,
        Name: LogUrl,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "",
        Summary:
The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
<br/>Default Value: ,
        ParameterName: logUrl,
        ArgumentName: logUrl
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "",
        Summary:
A short description of the status. The maximum description length is 140 characters.
<br/>Default Value: ,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: environment,
        Name: Environment,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used.,
        ParameterName: environment,
        ArgumentName: environment
      },
      {
        Id: environment_url,
        Name: EnvironmentUrl,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "",
        Summary:
Sets the URL for accessing your environment. Default: `""`
<br/>Default Value: ,
        ParameterName: environmentUrl,
        ArgumentName: environmentUrl
      },
      {
        Id: auto_inactive,
        Name: AutoInactive,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`,
        ParameterName: autoInactive,
        ArgumentName: autoInactive
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a deployment status,
    RequestType: ,
    ResponseType: deployment-status,
    MethodName: Repos/create-deployment-statusAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-deployment-status
  },
  {
    Id: Repos/get-deployment-status,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/deployments/{deploymentId}/statuses/{statusId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: deployment_id,
        Name: DeploymentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deploymentId,
        ArgumentName: deploymentId
      },
      {
        Id: status_id,
        Name: StatusId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: statusId,
        ArgumentName: statusId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a deployment status,
    RequestType: ,
    ResponseType: deployment-status,
    MethodName: Repos/get-deployment-statusAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-deployment-status
  },
  {
    Id: Repos/create-dispatch-event,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/dispatches",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: event_type,
        Name: EventType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A custom webhook event name. Must be 100 characters or fewer.,
        ParameterName: eventType,
        ArgumentName: eventType
      },
      {
        Id: client_payload,
        Name: ClientPayload,
        Type: {
          CSharpType: TestClientPayload?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10.,
        ParameterName: clientPayload,
        ArgumentName: clientPayload
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a repository dispatch event,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/create-dispatch-eventAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-dispatch-event
  },
  {
    Id: Repos/get-all-environments,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List environments,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-all-environmentsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-all-environments
  },
  {
    Id: Repos/get-environment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an environment,
    RequestType: ,
    ResponseType: environment,
    MethodName: Repos/get-environmentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-environment
  },
  {
    Id: Repos/create-or-update-environment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: wait_timer,
        Name: WaitTimer,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
<br/>Example: 30,
        ParameterName: waitTimer,
        ArgumentName: waitTimer
      },
      {
        Id: prevent_self_review,
        Name: PreventSelfReview,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Whether or not a user who created the job is prevented from approving their own job.
<br/>Example: false,
        ParameterName: preventSelfReview,
        ArgumentName: preventSelfReview
      },
      {
        Id: reviewers,
        Name: Reviewers,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<TestReviewers?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.,
        ParameterName: reviewers,
        ArgumentName: reviewers
      },
      {
        Id: deployment_branch_policy,
        Name: DeploymentBranchPolicy,
        Type: {
          CSharpType: DeploymentBranchPolicySettings?,
          IsArray: false,
          IsEnum: false,
          Properties: [
            protected_branches,
            custom_branch_policies
          ],
          EnumValues: null
        },
        IsRequired: false,
        Summary: The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.,
        ParameterName: deploymentBranchPolicy,
        ArgumentName: deploymentBranchPolicy
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Create or update an environment,
    RequestType: ,
    ResponseType: environment,
    MethodName: Repos/create-or-update-environmentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-or-update-environment
  },
  {
    Id: Repos/delete-an-environment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an environment,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-an-environmentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-an-environment
  },
  {
    Id: Repos/list-deployment-branch-policies,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List deployment branch policies,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-deployment-branch-policiesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-deployment-branch-policies
  },
  {
    Id: Repos/create-deployment-branch-policy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The name pattern that branches or tags must match in order to deploy to the environment.

Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.
For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
<br/>Example: release/*,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: type,
        Name: Type,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Branch,
            Tag
          ],
          EnumValues: [
            branch,
            tag
          ]
        },
        IsRequired: false,
        Summary:
Whether this rule targets a branch or tag
<br/>Example: branch,
        ParameterName: type,
        ArgumentName: type
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a deployment branch policy,
    RequestType: DeploymentBranchPolicyNamePatternWithType,
    ResponseType: deployment-branch-policy,
    MethodName: Repos/create-deployment-branch-policyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-deployment-branch-policy
  },
  {
    Id: Repos/get-deployment-branch-policy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies/{branchPolicyId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: branch_policy_id,
        Name: BranchPolicyId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branchPolicyId,
        ArgumentName: branchPolicyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a deployment branch policy,
    RequestType: ,
    ResponseType: deployment-branch-policy,
    MethodName: Repos/get-deployment-branch-policyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-deployment-branch-policy
  },
  {
    Id: Repos/update-deployment-branch-policy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies/{branchPolicyId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: branch_policy_id,
        Name: BranchPolicyId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branchPolicyId,
        ArgumentName: branchPolicyId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The name pattern that branches must match in order to deploy to the environment.

Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.
For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
<br/>Example: release/*,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Update a deployment branch policy,
    RequestType: DeploymentBranchPolicyNamePattern,
    ResponseType: deployment-branch-policy,
    MethodName: Repos/update-deployment-branch-policyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-deployment-branch-policy
  },
  {
    Id: Repos/delete-deployment-branch-policy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/deployment-branch-policies/{branchPolicyId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: branch_policy_id,
        Name: BranchPolicyId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branchPolicyId,
        ArgumentName: branchPolicyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a deployment branch policy,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-deployment-branch-policyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-deployment-branch-policy
  },
  {
    Id: Repos/get-all-deployment-protection-rules,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/deployment_protection_rules",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all deployment protection rules for an environment,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-all-deployment-protection-rulesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-all-deployment-protection-rules
  },
  {
    Id: Repos/create-deployment-protection-rule,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/deployment_protection_rules",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: integration_id,
        Name: IntegrationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The ID of the custom app that will be enabled on the environment.,
        ParameterName: integrationId,
        ArgumentName: integrationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a custom deployment protection rule on an environment,
    RequestType: ,
    ResponseType: deployment-protection-rule,
    MethodName: Repos/create-deployment-protection-ruleAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-deployment-protection-rule
  },
  {
    Id: Repos/list-custom-deployment-rule-integrations,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/deployment_protection_rules/apps?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List custom deployment rule integrations available for an environment,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-custom-deployment-rule-integrationsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-custom-deployment-rule-integrations
  },
  {
    Id: Repos/get-custom-deployment-protection-rule,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/deployment_protection_rules/{protectionRuleId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: protection_rule_id,
        Name: ProtectionRuleId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: protectionRuleId,
        ArgumentName: protectionRuleId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a custom deployment protection rule,
    RequestType: ,
    ResponseType: deployment-protection-rule,
    MethodName: Repos/get-custom-deployment-protection-ruleAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-custom-deployment-protection-rule
  },
  {
    Id: Repos/disable-deployment-protection-rule,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/deployment_protection_rules/{protectionRuleId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: protection_rule_id,
        Name: ProtectionRuleId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: protectionRuleId,
        ArgumentName: protectionRuleId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Disable a custom protection rule for an environment,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/disable-deployment-protection-ruleAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/disable-deployment-protection-rule
  },
  {
    Id: Actions/list-environment-secrets,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/secrets?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List environment secrets,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-environment-secretsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-environment-secrets
  },
  {
    Id: Actions/get-environment-public-key,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/secrets/public-key",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an environment public key,
    RequestType: ,
    ResponseType: actions-public-key,
    MethodName: Actions/get-environment-public-keyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-environment-public-key
  },
  {
    Id: Actions/get-environment-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an environment secret,
    RequestType: ,
    ResponseType: actions-secret,
    MethodName: Actions/get-environment-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-environment-secret
  },
  {
    Id: Actions/create-or-update-environment-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: encrypted_value,
        Name: EncryptedValue,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint.,
        ParameterName: encryptedValue,
        ArgumentName: encryptedValue
      },
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: ID of the key you used to encrypt the secret.,
        ParameterName: keyId,
        ArgumentName: keyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Create or update an environment secret,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/create-or-update-environment-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/create-or-update-environment-secret
  },
  {
    Id: Actions/delete-environment-secret,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an environment secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-environment-secretAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-environment-secret
  },
  {
    Id: Actions/list-environment-variables,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/variables?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 10,
        Summary:
<br/>Default Value: 10,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List environment variables,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/list-environment-variablesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/list-environment-variables
  },
  {
    Id: Actions/create-environment-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/variables",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the variable.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: value,
        Name: Value,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The value of the variable.,
        ParameterName: value,
        ArgumentName: value
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create an environment variable,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Actions/create-environment-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/create-environment-variable
  },
  {
    Id: Actions/get-environment-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/variables/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an environment variable,
    RequestType: ,
    ResponseType: actions-variable,
    MethodName: Actions/get-environment-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/get-environment-variable
  },
  {
    Id: Actions/update-environment-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/variables/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the variable.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: value,
        Name: Value,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The value of the variable.,
        ParameterName: value,
        ArgumentName: value
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update an environment variable,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/update-environment-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/update-environment-variable
  },
  {
    Id: Actions/delete-environment-variable,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/environments/{environmentName}/variables/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: environment_name,
        Name: EnvironmentName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: environmentName,
        ArgumentName: environmentName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an environment variable,
    RequestType: ,
    ResponseType: ,
    MethodName: Actions/delete-environment-variableAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Actions/delete-environment-variable
  },
  {
    Id: Activity/list-repo-events,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/events?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository events,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-repo-eventsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-repo-events
  },
  {
    Id: Repos/list-forks,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/forks?sort={sort}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Newest,
            Oldest,
            Stargazers,
            Watchers
          ],
          EnumValues: [
            newest,
            oldest,
            stargazers,
            watchers
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Newest,
        Summary:
<br/>Default Value: newest,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List forks,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-forksAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-forks
  },
  {
    Id: Repos/create-fork,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/forks",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: organization,
        Name: Organization,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Optional parameter to specify the organization name if forking into an organization.,
        ParameterName: organization,
        ArgumentName: organization
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: When forking from an existing repository, a new name for the fork.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: default_branch_only,
        Name: DefaultBranchOnly,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: When forking from an existing repository, fork with only the default branch.,
        ParameterName: defaultBranchOnly,
        ArgumentName: defaultBranchOnly
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a fork,
    RequestType: ,
    ResponseType: full-repository,
    MethodName: Repos/create-forkAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-fork
  },
  {
    Id: Git/create-blob,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/blobs",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The new blob's content.,
        ParameterName: content,
        ArgumentName: content
      },
      {
        Id: encoding,
        Name: Encoding,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "utf-8",
        Summary:
The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
<br/>Default Value: utf-8,
        ParameterName: encoding,
        ArgumentName: encoding
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a blob,
    RequestType: ,
    ResponseType: short-blob,
    MethodName: Git/create-blobAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/create-blob
  },
  {
    Id: Git/get-blob,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/blobs/{fileSha}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: file_sha,
        Name: FileSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: fileSha,
        ArgumentName: fileSha
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a blob,
    RequestType: ,
    ResponseType: blob,
    MethodName: Git/get-blobAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/get-blob
  },
  {
    Id: Git/create-commit,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/commits",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: message,
        Name: Message,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The commit message,
        ParameterName: message,
        ArgumentName: message
      },
      {
        Id: tree,
        Name: Tree,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The SHA of the tree object this commit points to,
        ParameterName: tree,
        ArgumentName: tree
      },
      {
        Id: parents,
        Name: Parents,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.,
        ParameterName: parents,
        ArgumentName: parents
      },
      {
        Id: author,
        Name: Author,
        Type: {
          CSharpType: TestAuthor?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.,
        ParameterName: author,
        ArgumentName: author
      },
      {
        Id: committer,
        Name: Committer,
        Type: {
          CSharpType: TestCommitter?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.,
        ParameterName: committer,
        ArgumentName: committer
      },
      {
        Id: signature,
        Name: Signature,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.,
        ParameterName: signature,
        ArgumentName: signature
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a commit,
    RequestType: ,
    ResponseType: git-commit,
    MethodName: Git/create-commitAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/create-commit
  },
  {
    Id: Git/get-commit,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/commits/{commitSha}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: commit_sha,
        Name: CommitSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commitSha,
        ArgumentName: commitSha
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a commit object,
    RequestType: ,
    ResponseType: git-commit,
    MethodName: Git/get-commitAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/get-commit
  },
  {
    Id: Git/list-matching-refs,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/matching-refs/{ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List matching references,
    RequestType: ,
    ResponseType: ,
    MethodName: Git/list-matching-refsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/list-matching-refs
  },
  {
    Id: Git/get-ref,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/ref/{ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a reference,
    RequestType: ,
    ResponseType: git-ref,
    MethodName: Git/get-refAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/get-ref
  },
  {
    Id: Git/create-ref,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/refs",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: sha,
        Name: Sha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The SHA1 value for this reference.,
        ParameterName: sha,
        ArgumentName: sha
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a reference,
    RequestType: ,
    ResponseType: git-ref,
    MethodName: Git/create-refAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/create-ref
  },
  {
    Id: Git/update-ref,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/refs/{ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: sha,
        Name: Sha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The SHA1 value to set this reference to,
        ParameterName: sha,
        ArgumentName: sha
      },
      {
        Id: force,
        Name: Force,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
<br/>Default Value: false,
        ParameterName: force,
        ArgumentName: force
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a reference,
    RequestType: ,
    ResponseType: git-ref,
    MethodName: Git/update-refAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/update-ref
  },
  {
    Id: Git/delete-ref,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/refs/{ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a reference,
    RequestType: ,
    ResponseType: ,
    MethodName: Git/delete-refAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/delete-ref
  },
  {
    Id: Git/create-tag,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/tags",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: tag,
        Name: Tag,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The tag's name. This is typically a version (e.g., "v0.0.1").,
        ParameterName: tag,
        ArgumentName: tag
      },
      {
        Id: message,
        Name: Message,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The tag message.,
        ParameterName: message,
        ArgumentName: message
      },
      {
        Id: object,
        Name: Object,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The SHA of the git object this is tagging.,
        ParameterName: object,
        ArgumentName: object
      },
      {
        Id: type,
        Name: Type,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Commit,
            Tree,
            Blob
          ],
          EnumValues: [
            commit,
            tree,
            blob
          ]
        },
        IsRequired: true,
        Summary: The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.,
        ParameterName: type,
        ArgumentName: type
      },
      {
        Id: tagger,
        Name: Tagger,
        Type: {
          CSharpType: TestTagger?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An object with information about the individual creating the tag.,
        ParameterName: tagger,
        ArgumentName: tagger
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a tag object,
    RequestType: ,
    ResponseType: git-tag,
    MethodName: Git/create-tagAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/create-tag
  },
  {
    Id: Git/get-tag,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/tags/{tagSha}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: tag_sha,
        Name: TagSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: tagSha,
        ArgumentName: tagSha
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a tag,
    RequestType: ,
    ResponseType: git-tag,
    MethodName: Git/get-tagAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/get-tag
  },
  {
    Id: Git/create-tree,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/trees",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: tree,
        Name: Tree,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<TestTree>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.,
        ParameterName: tree,
        ArgumentName: tree
      },
      {
        Id: base_tree,
        Name: BaseTree,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
,
        ParameterName: baseTree,
        ArgumentName: baseTree
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a tree,
    RequestType: ,
    ResponseType: git-tree,
    MethodName: Git/create-treeAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/create-tree
  },
  {
    Id: Git/get-tree,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/git/trees/{treeSha}?recursive={recursive}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: tree_sha,
        Name: TreeSha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: treeSha,
        ArgumentName: treeSha
      },
      {
        Id: recursive,
        Name: Recursive,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: recursive,
        ArgumentName: recursive
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a tree,
    RequestType: ,
    ResponseType: git-tree,
    MethodName: Git/get-treeAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Git/get-tree
  },
  {
    Id: Repos/list-webhooks,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository webhooks,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-webhooksAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-webhooks
  },
  {
    Id: Repos/create-webhook,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: config,
        Name: Config,
        Type: {
          CSharpType: TestConfig?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Key/value pairs to provide settings for this webhook.,
        ParameterName: config,
        ArgumentName: config
      },
      {
        Id: events,
        Name: Events,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: ,
        Summary:
Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
<br/>Default Value: [push],
        ParameterName: events,
        ArgumentName: events
      },
      {
        Id: active,
        Name: Active,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
<br/>Default Value: true,
        ParameterName: active,
        ArgumentName: active
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a repository webhook,
    RequestType: ,
    ResponseType: hook,
    MethodName: Repos/create-webhookAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-webhook
  },
  {
    Id: Repos/get-webhook,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks/{hookId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository webhook,
    RequestType: ,
    ResponseType: hook,
    MethodName: Repos/get-webhookAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-webhook
  },
  {
    Id: Repos/update-webhook,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks/{hookId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      },
      {
        Id: config,
        Name: Config,
        Type: {
          CSharpType: WebhookConfig?,
          IsArray: false,
          IsEnum: false,
          Properties: [
            url,
            content_type,
            secret,
            insecure_ssl
          ],
          EnumValues: null
        },
        IsRequired: false,
        Summary: Configuration object of the webhook,
        ParameterName: config,
        ArgumentName: config
      },
      {
        Id: events,
        Name: Events,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: ,
        Summary:
Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
<br/>Default Value: [push],
        ParameterName: events,
        ArgumentName: events
      },
      {
        Id: add_events,
        Name: AddEvents,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Determines a list of events to be added to the list of events that the Hook triggers for.,
        ParameterName: addEvents,
        ArgumentName: addEvents
      },
      {
        Id: remove_events,
        Name: RemoveEvents,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Determines a list of events to be removed from the list of events that the Hook triggers for.,
        ParameterName: removeEvents,
        ArgumentName: removeEvents
      },
      {
        Id: active,
        Name: Active,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
<br/>Default Value: true,
        ParameterName: active,
        ArgumentName: active
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a repository webhook,
    RequestType: ,
    ResponseType: hook,
    MethodName: Repos/update-webhookAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-webhook
  },
  {
    Id: Repos/delete-webhook,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks/{hookId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a repository webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-webhookAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-webhook
  },
  {
    Id: Repos/get-webhook-config-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks/{hookId}/config",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a webhook configuration for a repository,
    RequestType: ,
    ResponseType: webhook-config,
    MethodName: Repos/get-webhook-config-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-webhook-config-for-repo
  },
  {
    Id: Repos/update-webhook-config-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks/{hookId}/config",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      },
      {
        Id: url,
        Name: Url,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The URL to which the payloads will be delivered.
<br/>Example: https://example.com/webhook,
        ParameterName: url,
        ArgumentName: url
      },
      {
        Id: content_type,
        Name: ContentType,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
<br/>Example: "json",
        ParameterName: contentType,
        ArgumentName: contentType
      },
      {
        Id: secret,
        Name: Secret,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
<br/>Example: "********",
        ParameterName: secret,
        ArgumentName: secret
      },
      {
        Id: insecure_ssl,
        Name: InsecureSsl,
        Type: {
          CSharpType: WebhookConfigInsecureSsl?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ,
        ParameterName: insecureSsl,
        ArgumentName: insecureSsl
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a webhook configuration for a repository,
    RequestType: ,
    ResponseType: webhook-config,
    MethodName: Repos/update-webhook-config-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-webhook-config-for-repo
  },
  {
    Id: Repos/list-webhook-deliveries,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks/{hookId}/deliveries?per_page={perPage}&cursor={cursor}&redelivery={redelivery}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: cursor,
        Name: Cursor,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: cursor,
        ArgumentName: cursor
      },
      {
        Id: redelivery,
        Name: Redelivery,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: redelivery,
        ArgumentName: redelivery
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List deliveries for a repository webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-webhook-deliveriesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-webhook-deliveries
  },
  {
    Id: Repos/get-webhook-delivery,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks/{hookId}/deliveries/{deliveryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      },
      {
        Id: delivery_id,
        Name: DeliveryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deliveryId,
        ArgumentName: deliveryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a delivery for a repository webhook,
    RequestType: ,
    ResponseType: hook-delivery,
    MethodName: Repos/get-webhook-deliveryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-webhook-delivery
  },
  {
    Id: Repos/redeliver-webhook-delivery,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks/{hookId}/deliveries/{deliveryId}/attempts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      },
      {
        Id: delivery_id,
        Name: DeliveryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: deliveryId,
        ArgumentName: deliveryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Redeliver a delivery for a repository webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/redeliver-webhook-deliveryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/redeliver-webhook-delivery
  },
  {
    Id: Repos/ping-webhook,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks/{hookId}/pings",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Ping a repository webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/ping-webhookAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/ping-webhook
  },
  {
    Id: Repos/test-push-webhook,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/hooks/{hookId}/tests",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: hook_id,
        Name: HookId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: hookId,
        ArgumentName: hookId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Test the push repository webhook,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/test-push-webhookAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/test-push-webhook
  },
  {
    Id: Migrations/get-import-status,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/import",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an import status,
    RequestType: ,
    ResponseType: import,
    MethodName: Migrations/get-import-statusAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/get-import-status
  },
  {
    Id: Migrations/start-import,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/import",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: vcs_url,
        Name: VcsUrl,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The URL of the originating repository.,
        ParameterName: vcsUrl,
        ArgumentName: vcsUrl
      },
      {
        Id: vcs,
        Name: Vcs,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Subversion,
            Git,
            Mercurial,
            Tfvc
          ],
          EnumValues: [
            subversion,
            git,
            mercurial,
            tfvc
          ]
        },
        IsRequired: false,
        Summary: The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.,
        ParameterName: vcs,
        ArgumentName: vcs
      },
      {
        Id: vcs_username,
        Name: VcsUsername,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: If authentication is required, the username to provide to `vcs_url`.,
        ParameterName: vcsUsername,
        ArgumentName: vcsUsername
      },
      {
        Id: vcs_password,
        Name: VcsPassword,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: If authentication is required, the password to provide to `vcs_url`.,
        ParameterName: vcsPassword,
        ArgumentName: vcsPassword
      },
      {
        Id: tfvc_project,
        Name: TfvcProject,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: For a tfvc import, the name of the project that is being imported.,
        ParameterName: tfvcProject,
        ArgumentName: tfvcProject
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Start an import,
    RequestType: ,
    ResponseType: import,
    MethodName: Migrations/start-importAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/start-import
  },
  {
    Id: Migrations/update-import,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/import",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: vcs_username,
        Name: VcsUsername,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The username to provide to the originating repository.,
        ParameterName: vcsUsername,
        ArgumentName: vcsUsername
      },
      {
        Id: vcs_password,
        Name: VcsPassword,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The password to provide to the originating repository.,
        ParameterName: vcsPassword,
        ArgumentName: vcsPassword
      },
      {
        Id: vcs,
        Name: Vcs,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Subversion,
            Tfvc,
            Git,
            Mercurial
          ],
          EnumValues: [
            subversion,
            tfvc,
            git,
            mercurial
          ]
        },
        IsRequired: false,
        Summary:
The type of version control system you are migrating from.
<br/>Example: "git",
        ParameterName: vcs,
        ArgumentName: vcs
      },
      {
        Id: tfvc_project,
        Name: TfvcProject,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
For a tfvc import, the name of the project that is being imported.
<br/>Example: "project1",
        ParameterName: tfvcProject,
        ArgumentName: tfvcProject
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update an import,
    RequestType: ,
    ResponseType: import,
    MethodName: Migrations/update-importAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/update-import
  },
  {
    Id: Migrations/cancel-import,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/import",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Cancel an import,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/cancel-importAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/cancel-import
  },
  {
    Id: Migrations/get-commit-authors,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/import/authors?since={since}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get commit authors,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/get-commit-authorsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/get-commit-authors
  },
  {
    Id: Migrations/map-commit-author,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/import/authors/{authorId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: author_id,
        Name: AuthorId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: authorId,
        ArgumentName: authorId
      },
      {
        Id: email,
        Name: Email,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The new Git author email.,
        ParameterName: email,
        ArgumentName: email
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The new Git author name.,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Map a commit author,
    RequestType: ,
    ResponseType: porter-author,
    MethodName: Migrations/map-commit-authorAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/map-commit-author
  },
  {
    Id: Migrations/get-large-files,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/import/large_files",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get large files,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/get-large-filesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/get-large-files
  },
  {
    Id: Migrations/set-lfs-preference,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/import/lfs",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: use_lfs,
        Name: UseLfs,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            OptIn,
            OptOut
          ],
          EnumValues: [
            opt_in,
            opt_out
          ]
        },
        IsRequired: true,
        Summary: Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.,
        ParameterName: useLfs,
        ArgumentName: useLfs
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update Git LFS preference,
    RequestType: ,
    ResponseType: import,
    MethodName: Migrations/set-lfs-preferenceAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/set-lfs-preference
  },
  {
    Id: Apps/get-repo-installation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/installation",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository installation for the authenticated app,
    RequestType: ,
    ResponseType: installation,
    MethodName: Apps/get-repo-installationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/get-repo-installation
  },
  {
    Id: Interactions/get-restrictions-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/interaction-limits",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get interaction restrictions for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Interactions/get-restrictions-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Interactions/get-restrictions-for-repo
  },
  {
    Id: Interactions/set-restrictions-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/interaction-limits",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: limit,
        Name: Limit,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            ExistingUsers,
            ContributorsOnly,
            CollaboratorsOnly
          ],
          EnumValues: [
            existing_users,
            contributors_only,
            collaborators_only
          ]
        },
        IsRequired: true,
        Summary:
The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
<br/>Example: collaborators_only,
        ParameterName: limit,
        ArgumentName: limit
      },
      {
        Id: expiry,
        Name: Expiry,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            OneDay,
            ThreeDays,
            OneWeek,
            OneMonth,
            SixMonths
          ],
          EnumValues: [
            one_day,
            three_days,
            one_week,
            one_month,
            six_months
          ]
        },
        IsRequired: false,
        Summary:
The duration of the interaction restriction. Default: `one_day`.
<br/>Example: one_month,
        ParameterName: expiry,
        ArgumentName: expiry
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set interaction restrictions for a repository,
    RequestType: InteractionLimit,
    ResponseType: interaction-limit-response,
    MethodName: Interactions/set-restrictions-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Interactions/set-restrictions-for-repo
  },
  {
    Id: Interactions/remove-restrictions-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/interaction-limits",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove interaction restrictions for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Interactions/remove-restrictions-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Interactions/remove-restrictions-for-repo
  },
  {
    Id: Repos/list-invitations,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/invitations?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository invitations,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-invitationsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-invitations
  },
  {
    Id: Repos/update-invitation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/invitations/{invitationId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: invitation_id,
        Name: InvitationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: invitationId,
        ArgumentName: invitationId
      },
      {
        Id: permissions,
        Name: Permissions,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Read,
            Write,
            Maintain,
            Triage,
            Admin
          ],
          EnumValues: [
            read,
            write,
            maintain,
            triage,
            admin
          ]
        },
        IsRequired: false,
        Summary: The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.,
        ParameterName: permissions,
        ArgumentName: permissions
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a repository invitation,
    RequestType: ,
    ResponseType: repository-invitation,
    MethodName: Repos/update-invitationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-invitation
  },
  {
    Id: Repos/delete-invitation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/invitations/{invitationId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: invitation_id,
        Name: InvitationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: invitationId,
        ArgumentName: invitationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a repository invitation,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-invitationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-invitation
  },
  {
    Id: Issues/list-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues?milestone={milestone}&state={state}&assignee={assignee}&creator={creator}&mentioned={mentioned}&labels={labels}&sort={sort}&direction={direction}&since={since}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: milestone,
        Name: Milestone,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: milestone,
        ArgumentName: milestone
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed,
            All
          ],
          EnumValues: [
            open,
            closed,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: State.Open,
        Summary:
<br/>Default Value: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: assignee,
        Name: Assignee,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: assignee,
        ArgumentName: assignee
      },
      {
        Id: creator,
        Name: Creator,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: creator,
        ArgumentName: creator
      },
      {
        Id: mentioned,
        Name: Mentioned,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: mentioned,
        ArgumentName: mentioned
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: labels,
        ArgumentName: labels
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated,
            Comments
          ],
          EnumValues: [
            created,
            updated,
            comments
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository issues,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-for-repo
  },
  {
    Id: Issues/create,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: object,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The title of the issue.,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The contents of the issue.,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: assignee,
        Name: Assignee,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_,
        ParameterName: assignee,
        ArgumentName: assignee
      },
      {
        Id: milestone,
        Name: Milestone,
        Type: {
          CSharpType: object?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: ,
        Summary: ,
        ParameterName: milestone,
        ArgumentName: milestone
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<object?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._,
        ParameterName: labels,
        ArgumentName: labels
      },
      {
        Id: assignees,
        Name: Assignees,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._,
        ParameterName: assignees,
        ArgumentName: assignees
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create an issue,
    RequestType: ,
    ResponseType: issue,
    MethodName: Issues/createAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/create
  },
  {
    Id: Issues/list-comments-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/comments?sort={sort}&direction={direction}&since={since}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List issue comments for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-comments-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-comments-for-repo
  },
  {
    Id: Issues/get-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an issue comment,
    RequestType: ,
    ResponseType: issue-comment,
    MethodName: Issues/get-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/get-comment
  },
  {
    Id: Issues/update-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The contents of the comment.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update an issue comment,
    RequestType: ,
    ResponseType: issue-comment,
    MethodName: Issues/update-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/update-comment
  },
  {
    Id: Issues/delete-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an issue comment,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/delete-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/delete-comment
  },
  {
    Id: Reactions/list-for-issue-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/comments/{commentId}/reactions?content={content}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: content,
        ArgumentName: content
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List reactions for an issue comment,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/list-for-issue-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/list-for-issue-comment
  },
  {
    Id: Reactions/create-for-issue-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/comments/{commentId}/reactions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: true,
        Summary: The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment.,
        ParameterName: content,
        ArgumentName: content
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create reaction for an issue comment,
    RequestType: ,
    ResponseType: reaction,
    MethodName: Reactions/create-for-issue-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/create-for-issue-comment
  },
  {
    Id: Reactions/delete-for-issue-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/comments/{commentId}/reactions/{reactionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: reaction_id,
        Name: ReactionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reactionId,
        ArgumentName: reactionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an issue comment reaction,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/delete-for-issue-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/delete-for-issue-comment
  },
  {
    Id: Issues/list-events-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/events?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List issue events for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-events-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-events-for-repo
  },
  {
    Id: Issues/get-event,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/events/{eventId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: event_id,
        Name: EventId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: eventId,
        ArgumentName: eventId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an issue event,
    RequestType: ,
    ResponseType: issue-event,
    MethodName: Issues/get-eventAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/get-event
  },
  {
    Id: Issues/get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an issue,
    RequestType: ,
    ResponseType: issue,
    MethodName: Issues/getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/get
  },
  {
    Id: Issues/update,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: object?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: ,
        Summary: The title of the issue.,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The contents of the issue.,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: assignee,
        Name: Assignee,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Username to assign to this issue. **This field is deprecated.**,
        ParameterName: assignee,
        ArgumentName: assignee
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed
          ],
          EnumValues: [
            open,
            closed
          ]
        },
        IsRequired: false,
        Summary: The open or closed state of the issue.,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: state_reason,
        Name: StateReason,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Completed,
            NotPlanned,
            Reopened
          ],
          EnumValues: [
            completed,
            not_planned,
            reopened
          ]
        },
        IsRequired: false,
        Summary:
The reason for the state change. Ignored unless `state` is changed.
<br/>Example: not_planned,
        ParameterName: stateReason,
        ArgumentName: stateReason
      },
      {
        Id: milestone,
        Name: Milestone,
        Type: {
          CSharpType: object?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: ,
        Summary: ,
        ParameterName: milestone,
        ArgumentName: milestone
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<object?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.,
        ParameterName: labels,
        ArgumentName: labels
      },
      {
        Id: assignees,
        Name: Assignees,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.,
        ParameterName: assignees,
        ArgumentName: assignees
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update an issue,
    RequestType: ,
    ResponseType: issue,
    MethodName: Issues/updateAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/update
  },
  {
    Id: Issues/add-assignees,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/assignees",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: assignees,
        Name: Assignees,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._,
        ParameterName: assignees,
        ArgumentName: assignees
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add assignees to an issue,
    RequestType: ,
    ResponseType: issue,
    MethodName: Issues/add-assigneesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/add-assignees
  },
  {
    Id: Issues/remove-assignees,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/assignees",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: assignees,
        Name: Assignees,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._,
        ParameterName: assignees,
        ArgumentName: assignees
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove assignees from an issue,
    RequestType: ,
    ResponseType: issue,
    MethodName: Issues/remove-assigneesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/remove-assignees
  },
  {
    Id: Issues/check-user-can-be-assigned-to-issue,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/assignees/{assignee}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: assignee,
        Name: Assignee,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: assignee,
        ArgumentName: assignee
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if a user can be assigned to a issue,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/check-user-can-be-assigned-to-issueAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/check-user-can-be-assigned-to-issue
  },
  {
    Id: Issues/list-comments,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/comments?since={since}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List issue comments,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-commentsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-comments
  },
  {
    Id: Issues/create-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/comments",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The contents of the comment.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create an issue comment,
    RequestType: ,
    ResponseType: issue-comment,
    MethodName: Issues/create-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/create-comment
  },
  {
    Id: Issues/list-events,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/events?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List issue events,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-eventsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-events
  },
  {
    Id: Issues/list-labels-on-issue,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/labels?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List labels for an issue,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-labels-on-issueAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-labels-on-issue
  },
  {
    Id: Issues/add-labels,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add labels to an issue,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/add-labelsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/add-labels
  },
  {
    Id: Issues/set-labels,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set labels for an issue,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/set-labelsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/set-labels
  },
  {
    Id: Issues/remove-all-labels,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove all labels from an issue,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/remove-all-labelsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/remove-all-labels
  },
  {
    Id: Issues/remove-label,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/labels/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a label from an issue,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/remove-labelAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/remove-label
  },
  {
    Id: Issues/lock,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/lock",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: lock_reason,
        Name: LockReason,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            OffTopic,
            TooHeated,
            Resolved,
            Spam
          ],
          EnumValues: [
            off-topic,
            too heated,
            resolved,
            spam
          ]
        },
        IsRequired: false,
        Summary:
The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
 * `off-topic`  
 * `too heated`  
 * `resolved`  
 * `spam`,
        ParameterName: lockReason,
        ArgumentName: lockReason
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Lock an issue,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/lockAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/lock
  },
  {
    Id: Issues/unlock,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/lock",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Unlock an issue,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/unlockAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/unlock
  },
  {
    Id: Reactions/list-for-issue,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/reactions?content={content}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: content,
        ArgumentName: content
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List reactions for an issue,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/list-for-issueAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/list-for-issue
  },
  {
    Id: Reactions/create-for-issue,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/reactions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: true,
        Summary: The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue.,
        ParameterName: content,
        ArgumentName: content
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create reaction for an issue,
    RequestType: ,
    ResponseType: reaction,
    MethodName: Reactions/create-for-issueAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/create-for-issue
  },
  {
    Id: Reactions/delete-for-issue,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/reactions/{reactionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: reaction_id,
        Name: ReactionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reactionId,
        ArgumentName: reactionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an issue reaction,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/delete-for-issueAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/delete-for-issue
  },
  {
    Id: Issues/list-events-for-timeline,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/issues/{issueNumber}/timeline?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: issue_number,
        Name: IssueNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: issueNumber,
        ArgumentName: issueNumber
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List timeline events for an issue,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-events-for-timelineAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-events-for-timeline
  },
  {
    Id: Repos/list-deploy-keys,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/keys?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List deploy keys,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-deploy-keysAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-deploy-keys
  },
  {
    Id: Repos/create-deploy-key,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/keys",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A name for the key.,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: key,
        Name: Key,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The contents of the key.,
        ParameterName: key,
        ArgumentName: key
      },
      {
        Id: read_only,
        Name: ReadOnly,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
  
Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/).",
        ParameterName: readOnly,
        ArgumentName: readOnly
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a deploy key,
    RequestType: ,
    ResponseType: deploy-key,
    MethodName: Repos/create-deploy-keyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-deploy-key
  },
  {
    Id: Repos/get-deploy-key,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/keys/{keyId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: keyId,
        ArgumentName: keyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a deploy key,
    RequestType: ,
    ResponseType: deploy-key,
    MethodName: Repos/get-deploy-keyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-deploy-key
  },
  {
    Id: Repos/delete-deploy-key,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/keys/{keyId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: keyId,
        ArgumentName: keyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a deploy key,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-deploy-keyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-deploy-key
  },
  {
    Id: Issues/list-labels-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/labels?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List labels for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-labels-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-labels-for-repo
  },
  {
    Id: Issues/create-label,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/labels",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).",
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: color,
        Name: Color,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.,
        ParameterName: color,
        ArgumentName: color
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A short description of the label. Must be 100 characters or fewer.,
        ParameterName: description,
        ArgumentName: description
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a label,
    RequestType: ,
    ResponseType: label,
    MethodName: Issues/create-labelAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/create-label
  },
  {
    Id: Issues/get-label,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/labels/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a label,
    RequestType: ,
    ResponseType: label,
    MethodName: Issues/get-labelAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/get-label
  },
  {
    Id: Issues/update-label,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/labels/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: new_name,
        Name: NewName,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).",
        ParameterName: newName,
        ArgumentName: newName
      },
      {
        Id: color,
        Name: Color,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.,
        ParameterName: color,
        ArgumentName: color
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A short description of the label. Must be 100 characters or fewer.,
        ParameterName: description,
        ArgumentName: description
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a label,
    RequestType: ,
    ResponseType: label,
    MethodName: Issues/update-labelAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/update-label
  },
  {
    Id: Issues/delete-label,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/labels/{name}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a label,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/delete-labelAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/delete-label
  },
  {
    Id: Repos/list-languages,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/languages",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository languages,
    RequestType: ,
    ResponseType: language,
    MethodName: Repos/list-languagesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-languages
  },
  {
    Id: Licenses/get-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/license?ref={ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary:
The Git reference, formatted as `refs/pull/&lt;number&gt;/merge`, `refs/pull/&lt;number&gt;/head`,
`refs/heads/&lt;branch name&gt;` or simply `&lt;branch name&gt;`.,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the license for a repository,
    RequestType: ,
    ResponseType: license-content,
    MethodName: Licenses/get-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Licenses/get-for-repo
  },
  {
    Id: Repos/merge-upstream,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/merge-upstream",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the branch which should be updated to match upstream.,
        ParameterName: branch,
        ArgumentName: branch
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Sync a fork branch with the upstream repository,
    RequestType: ,
    ResponseType: merged-upstream,
    MethodName: Repos/merge-upstreamAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/merge-upstream
  },
  {
    Id: Repos/merge,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/merges",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: base,
        Name: Base,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the base branch that the head will be merged into.,
        ParameterName: base,
        ArgumentName: base
      },
      {
        Id: head,
        Name: Head,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The head to merge. This can be a branch name or a commit SHA1.,
        ParameterName: head,
        ArgumentName: head
      },
      {
        Id: commit_message,
        Name: CommitMessage,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Commit message to use for the merge commit. If omitted, a default message will be used.,
        ParameterName: commitMessage,
        ArgumentName: commitMessage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Merge a branch,
    RequestType: ,
    ResponseType: commit,
    MethodName: Repos/mergeAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/merge
  },
  {
    Id: Issues/list-milestones,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/milestones?state={state}&sort={sort}&direction={direction}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed,
            All
          ],
          EnumValues: [
            open,
            closed,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: State.Open,
        Summary:
<br/>Default Value: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            DueOn,
            Completeness
          ],
          EnumValues: [
            due_on,
            completeness
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.DueOn,
        Summary:
<br/>Default Value: due_on,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Asc,
        Summary:
<br/>Default Value: asc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List milestones,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-milestonesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-milestones
  },
  {
    Id: Issues/create-milestone,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/milestones",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The title of the milestone.,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed
          ],
          EnumValues: [
            open,
            closed
          ]
        },
        IsRequired: false,
        DefaultValue: TestState.Open,
        Summary:
The state of the milestone. Either `open` or `closed`.
<br/>Default Value: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A description of the milestone.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: due_on,
        Name: DueOn,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.,
        ParameterName: dueOn,
        ArgumentName: dueOn
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a milestone,
    RequestType: ,
    ResponseType: milestone,
    MethodName: Issues/create-milestoneAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/create-milestone
  },
  {
    Id: Issues/get-milestone,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: milestone_number,
        Name: MilestoneNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: milestoneNumber,
        ArgumentName: milestoneNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a milestone,
    RequestType: ,
    ResponseType: milestone,
    MethodName: Issues/get-milestoneAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/get-milestone
  },
  {
    Id: Issues/update-milestone,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: milestone_number,
        Name: MilestoneNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: milestoneNumber,
        ArgumentName: milestoneNumber
      },
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The title of the milestone.,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed
          ],
          EnumValues: [
            open,
            closed
          ]
        },
        IsRequired: false,
        DefaultValue: TestState.Open,
        Summary:
The state of the milestone. Either `open` or `closed`.
<br/>Default Value: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A description of the milestone.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: due_on,
        Name: DueOn,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.,
        ParameterName: dueOn,
        ArgumentName: dueOn
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a milestone,
    RequestType: ,
    ResponseType: milestone,
    MethodName: Issues/update-milestoneAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/update-milestone
  },
  {
    Id: Issues/delete-milestone,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: milestone_number,
        Name: MilestoneNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: milestoneNumber,
        ArgumentName: milestoneNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a milestone,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/delete-milestoneAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/delete-milestone
  },
  {
    Id: Issues/list-labels-for-milestone,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/milestones/{milestoneNumber}/labels?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: milestone_number,
        Name: MilestoneNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: milestoneNumber,
        ArgumentName: milestoneNumber
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List labels for issues in a milestone,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-labels-for-milestoneAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-labels-for-milestone
  },
  {
    Id: Activity/list-repo-notifications-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/notifications?all={all}&participating={participating}&since={since}&before={before}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: all,
        Name: All,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: false,
        Summary:
<br/>Default Value: false,
        ParameterName: all,
        ArgumentName: all
      },
      {
        Id: participating,
        Name: Participating,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: false,
        Summary:
<br/>Default Value: false,
        ParameterName: participating,
        ArgumentName: participating
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository notifications for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-repo-notifications-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-repo-notifications-for-authenticated-user
  },
  {
    Id: Activity/mark-repo-notifications-as-read,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/notifications",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: last_read_at,
        Name: LastReadAt,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.,
        ParameterName: lastReadAt,
        ArgumentName: lastReadAt
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Mark repository notifications as read,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/mark-repo-notifications-as-readAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/mark-repo-notifications-as-read
  },
  {
    Id: Repos/get-pages,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a GitHub Pages site,
    RequestType: ,
    ResponseType: page,
    MethodName: Repos/get-pagesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-pages
  },
  {
    Id: Repos/create-pages-site,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: build_type,
        Name: BuildType,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Legacy,
            Workflow
          ],
          EnumValues: [
            legacy,
            workflow
          ]
        },
        IsRequired: false,
        Summary: The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.,
        ParameterName: buildType,
        ArgumentName: buildType
      },
      {
        Id: source,
        Name: Source,
        Type: {
          CSharpType: TestSource?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The source branch and directory used to publish your Pages site.,
        ParameterName: source,
        ArgumentName: source
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a GitHub Pages site,
    RequestType: ,
    ResponseType: page,
    MethodName: Repos/create-pages-siteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-pages-site
  },
  {
    Id: Repos/update-information-about-pages-site,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: cname,
        Name: Cname,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/pages/configuring-a-custom-domain-for-your-github-pages-site).",
        ParameterName: cname,
        ArgumentName: cname
      },
      {
        Id: https_enforced,
        Name: HttpsEnforced,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Specify whether HTTPS should be enforced for the repository.,
        ParameterName: httpsEnforced,
        ArgumentName: httpsEnforced
      },
      {
        Id: build_type,
        Name: BuildType,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Legacy,
            Workflow
          ],
          EnumValues: [
            legacy,
            workflow
          ]
        },
        IsRequired: false,
        Summary: The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.,
        ParameterName: buildType,
        ArgumentName: buildType
      },
      {
        Id: source,
        Name: Source,
        Type: {
          CSharpType: object?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: ,
        Summary: ,
        ParameterName: source,
        ArgumentName: source
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Update information about a GitHub Pages site,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/update-information-about-pages-siteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-information-about-pages-site
  },
  {
    Id: Repos/delete-pages-site,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a GitHub Pages site,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-pages-siteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-pages-site
  },
  {
    Id: Repos/list-pages-builds,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages/builds?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List GitHub Pages builds,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-pages-buildsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-pages-builds
  },
  {
    Id: Repos/request-pages-build,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages/builds",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Request a GitHub Pages build,
    RequestType: ,
    ResponseType: page-build-status,
    MethodName: Repos/request-pages-buildAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/request-pages-build
  },
  {
    Id: Repos/get-latest-pages-build,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages/builds/latest",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get latest Pages build,
    RequestType: ,
    ResponseType: page-build,
    MethodName: Repos/get-latest-pages-buildAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-latest-pages-build
  },
  {
    Id: Repos/get-pages-build,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages/builds/{buildId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: build_id,
        Name: BuildId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: buildId,
        ArgumentName: buildId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get GitHub Pages build,
    RequestType: ,
    ResponseType: page-build,
    MethodName: Repos/get-pages-buildAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-pages-build
  },
  {
    Id: Repos/create-pages-deployment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages/deployments",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: artifact_id,
        Name: ArtifactId,
        Type: {
          CSharpType: double,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.,
        ParameterName: artifactId,
        ArgumentName: artifactId
      },
      {
        Id: artifact_url,
        Name: ArtifactUrl,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.,
        ParameterName: artifactUrl,
        ArgumentName: artifactUrl
      },
      {
        Id: environment,
        Name: Environment,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "github-pages",
        Summary:
The target environment for this GitHub Pages deployment.
<br/>Default Value: github-pages,
        ParameterName: environment,
        ArgumentName: environment
      },
      {
        Id: pages_build_version,
        Name: PagesBuildVersion,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        DefaultValue: "GITHUB_SHA",
        Summary:
A unique string that represents the version of the build for this deployment.
<br/>Default Value: GITHUB_SHA,
        ParameterName: pagesBuildVersion,
        ArgumentName: pagesBuildVersion
      },
      {
        Id: oidc_token,
        Name: OidcToken,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The OIDC token issued by GitHub Actions certifying the origin of the deployment.,
        ParameterName: oidcToken,
        ArgumentName: oidcToken
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a GitHub Pages deployment,
    RequestType: ,
    ResponseType: page-deployment,
    MethodName: Repos/create-pages-deploymentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-pages-deployment
  },
  {
    Id: Repos/get-pages-deployment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages/deployments/{pagesDeploymentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pages_deployment_id,
        Name: PagesDeploymentId,
        Type: {
          CSharpType: object,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pagesDeploymentId,
        ArgumentName: pagesDeploymentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the status of a GitHub Pages deployment,
    RequestType: ,
    ResponseType: pages-deployment-status,
    MethodName: Repos/get-pages-deploymentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-pages-deployment
  },
  {
    Id: Repos/cancel-pages-deployment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages/deployments/{pagesDeploymentId}/cancel",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pages_deployment_id,
        Name: PagesDeploymentId,
        Type: {
          CSharpType: object,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pagesDeploymentId,
        ArgumentName: pagesDeploymentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Cancel a GitHub Pages deployment,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/cancel-pages-deploymentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/cancel-pages-deployment
  },
  {
    Id: Repos/get-pages-health-check,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pages/health",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a DNS health check for GitHub Pages,
    RequestType: ,
    ResponseType: pages-health-check,
    MethodName: Repos/get-pages-health-checkAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-pages-health-check
  },
  {
    Id: Repos/check-private-vulnerability-reporting,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/private-vulnerability-reporting",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if private vulnerability reporting is enabled for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/check-private-vulnerability-reportingAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/check-private-vulnerability-reporting
  },
  {
    Id: Repos/enable-private-vulnerability-reporting,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/private-vulnerability-reporting",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Enable private vulnerability reporting for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/enable-private-vulnerability-reportingAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/enable-private-vulnerability-reporting
  },
  {
    Id: Repos/disable-private-vulnerability-reporting,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/private-vulnerability-reporting",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Disable private vulnerability reporting for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/disable-private-vulnerability-reportingAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/disable-private-vulnerability-reporting
  },
  {
    Id: Projects/list-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/projects?state={state}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed,
            All
          ],
          EnumValues: [
            open,
            closed,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: State.Open,
        Summary:
<br/>Default Value: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository projects,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/list-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/list-for-repo
  },
  {
    Id: Projects/create-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/projects",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the project.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The description of the project.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a repository project,
    RequestType: ,
    ResponseType: project,
    MethodName: Projects/create-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/create-for-repo
  },
  {
    Id: Repos/get-custom-properties-values,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/properties/values",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all custom property values for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-custom-properties-valuesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-custom-properties-values
  },
  {
    Id: Repos/create-or-update-custom-properties-values,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/properties/values",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: properties,
        Name: Properties,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<CustomPropertyValue>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A list of custom property names and associated values to apply to the repositories.,
        ParameterName: properties,
        ArgumentName: properties
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Create or update custom property values for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/create-or-update-custom-properties-valuesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-or-update-custom-properties-values
  },
  {
    Id: Pulls/list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls?state={state}&head={head}&base={base}&sort={sort}&direction={direction}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed,
            All
          ],
          EnumValues: [
            open,
            closed,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: State.Open,
        Summary:
<br/>Default Value: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: head,
        Name: Head,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: head,
        ArgumentName: head
      },
      {
        Id: base,
        Name: Base,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: base,
        ArgumentName: base
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated,
            Popularity,
            LongRunning
          ],
          EnumValues: [
            created,
            updated,
            popularity,
            long-running
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List pull requests,
    RequestType: ,
    ResponseType: ,
    MethodName: Pulls/listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/list
  },
  {
    Id: Pulls/create,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The title of the new pull request. Required unless `issue` is specified.,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: head,
        Name: Head,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.,
        ParameterName: head,
        ArgumentName: head
      },
      {
        Id: head_repo,
        Name: HeadRepo,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
<br/>Example: octo-org/octo-repo,
        ParameterName: headRepo,
        ArgumentName: headRepo
      },
      {
        Id: base,
        Name: Base,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.,
        ParameterName: base,
        ArgumentName: base
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The contents of the pull request.,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: maintainer_can_modify,
        Name: MaintainerCanModify,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.,
        ParameterName: maintainerCanModify,
        ArgumentName: maintainerCanModify
      },
      {
        Id: draft,
        Name: Draft,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.,
        ParameterName: draft,
        ArgumentName: draft
      },
      {
        Id: issue,
        Name: Issue,
        Type: {
          CSharpType: long,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
<br/>Example: 1,
        ParameterName: issue,
        ArgumentName: issue
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a pull request,
    RequestType: ,
    ResponseType: pull-request,
    MethodName: Pulls/createAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/create
  },
  {
    Id: Pulls/list-review-comments-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/comments?sort={sort}&direction={direction}&since={since}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated,
            CreatedAt
          ],
          EnumValues: [
            created,
            updated,
            created_at
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List review comments in a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Pulls/list-review-comments-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/list-review-comments-for-repo
  },
  {
    Id: Pulls/get-review-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a review comment for a pull request,
    RequestType: ,
    ResponseType: pull-request-review-comment,
    MethodName: Pulls/get-review-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/get-review-comment
  },
  {
    Id: Pulls/update-review-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The text of the reply to the review comment.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a review comment for a pull request,
    RequestType: ,
    ResponseType: pull-request-review-comment,
    MethodName: Pulls/update-review-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/update-review-comment
  },
  {
    Id: Pulls/delete-review-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/comments/{commentId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a review comment for a pull request,
    RequestType: ,
    ResponseType: ,
    MethodName: Pulls/delete-review-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/delete-review-comment
  },
  {
    Id: Reactions/list-for-pull-request-review-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions?content={content}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: content,
        ArgumentName: content
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List reactions for a pull request review comment,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/list-for-pull-request-review-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/list-for-pull-request-review-comment
  },
  {
    Id: Reactions/create-for-pull-request-review-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: true,
        Summary: The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment.,
        ParameterName: content,
        ArgumentName: content
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create reaction for a pull request review comment,
    RequestType: ,
    ResponseType: reaction,
    MethodName: Reactions/create-for-pull-request-review-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/create-for-pull-request-review-comment
  },
  {
    Id: Reactions/delete-for-pull-request-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions/{reactionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: reaction_id,
        Name: ReactionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reactionId,
        ArgumentName: reactionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a pull request comment reaction,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/delete-for-pull-request-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/delete-for-pull-request-comment
  },
  {
    Id: Pulls/get,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a pull request,
    RequestType: ,
    ResponseType: pull-request,
    MethodName: Pulls/getAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/get
  },
  {
    Id: Pulls/update,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The title of the pull request.,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The contents of the pull request.,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed
          ],
          EnumValues: [
            open,
            closed
          ]
        },
        IsRequired: false,
        Summary: State of this Pull Request. Either `open` or `closed`.,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: base,
        Name: Base,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.,
        ParameterName: base,
        ArgumentName: base
      },
      {
        Id: maintainer_can_modify,
        Name: MaintainerCanModify,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.,
        ParameterName: maintainerCanModify,
        ArgumentName: maintainerCanModify
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a pull request,
    RequestType: ,
    ResponseType: pull-request,
    MethodName: Pulls/updateAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/update
  },
  {
    Id: Codespaces/create-with-pr-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/codespaces",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: location,
        Name: Location,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.,
        ParameterName: location,
        ArgumentName: location
      },
      {
        Id: geo,
        Name: Geo,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            EuropeWest,
            SoutheastAsia,
            UsEast,
            UsWest
          ],
          EnumValues: [
            EuropeWest,
            SoutheastAsia,
            UsEast,
            UsWest
          ]
        },
        IsRequired: false,
        Summary: The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.,
        ParameterName: geo,
        ArgumentName: geo
      },
      {
        Id: client_ip,
        Name: ClientIp,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: IP for location auto-detection when proxying a request,
        ParameterName: clientIp,
        ArgumentName: clientIp
      },
      {
        Id: machine,
        Name: Machine,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Machine type to use for this codespace,
        ParameterName: machine,
        ArgumentName: machine
      },
      {
        Id: devcontainer_path,
        Name: DevcontainerPath,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Path to devcontainer.json config to use for this codespace,
        ParameterName: devcontainerPath,
        ArgumentName: devcontainerPath
      },
      {
        Id: multi_repo_permissions_opt_out,
        Name: MultiRepoPermissionsOptOut,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Whether to authorize requested permissions from devcontainer.json,
        ParameterName: multiRepoPermissionsOptOut,
        ArgumentName: multiRepoPermissionsOptOut
      },
      {
        Id: working_directory,
        Name: WorkingDirectory,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Working directory for this codespace,
        ParameterName: workingDirectory,
        ArgumentName: workingDirectory
      },
      {
        Id: idle_timeout_minutes,
        Name: IdleTimeoutMinutes,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Time in minutes before codespace stops from inactivity,
        ParameterName: idleTimeoutMinutes,
        ArgumentName: idleTimeoutMinutes
      },
      {
        Id: display_name,
        Name: DisplayName,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Display name for this codespace,
        ParameterName: displayName,
        ArgumentName: displayName
      },
      {
        Id: retention_period_minutes,
        Name: RetentionPeriodMinutes,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).,
        ParameterName: retentionPeriodMinutes,
        ArgumentName: retentionPeriodMinutes
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a codespace from a pull request,
    RequestType: ,
    ResponseType: codespace,
    MethodName: Codespaces/create-with-pr-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/create-with-pr-for-authenticated-user
  },
  {
    Id: Pulls/list-review-comments,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/comments?sort={sort}&direction={direction}&since={since}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List review comments on a pull request,
    RequestType: ,
    ResponseType: ,
    MethodName: Pulls/list-review-commentsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/list-review-comments
  },
  {
    Id: Pulls/create-review-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/comments",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The text of the review comment.,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: commit_id,
        Name: CommitId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.,
        ParameterName: commitId,
        ArgumentName: commitId
      },
      {
        Id: path,
        Name: Path,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The relative path to the file that necessitates a comment.,
        ParameterName: path,
        ArgumentName: path
      },
      {
        Id: position,
        Name: Position,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: **This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.,
        ParameterName: position,
        ArgumentName: position
      },
      {
        Id: side,
        Name: Side,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            LEFT,
            RIGHT
          ],
          EnumValues: [
            LEFT,
            RIGHT
          ]
        },
        IsRequired: false,
        Summary: In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.,
        ParameterName: side,
        ArgumentName: side
      },
      {
        Id: line,
        Name: Line,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: **Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.,
        ParameterName: line,
        ArgumentName: line
      },
      {
        Id: start_line,
        Name: StartLine,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.,
        ParameterName: startLine,
        ArgumentName: startLine
      },
      {
        Id: start_side,
        Name: StartSide,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            LEFT,
            RIGHT,
            Side
          ],
          EnumValues: [
            LEFT,
            RIGHT,
            side
          ]
        },
        IsRequired: false,
        Summary: **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.,
        ParameterName: startSide,
        ArgumentName: startSide
      },
      {
        Id: in_reply_to,
        Name: InReplyTo,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
<br/>Example: 2,
        ParameterName: inReplyTo,
        ArgumentName: inReplyTo
      },
      {
        Id: subject_type,
        Name: SubjectType,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Line,
            File
          ],
          EnumValues: [
            line,
            file
          ]
        },
        IsRequired: false,
        Summary: The level at which the comment is targeted.,
        ParameterName: subjectType,
        ArgumentName: subjectType
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a review comment for a pull request,
    RequestType: ,
    ResponseType: pull-request-review-comment,
    MethodName: Pulls/create-review-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/create-review-comment
  },
  {
    Id: Pulls/create-reply-for-review-comment,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/comments/{commentId}/replies",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: comment_id,
        Name: CommentId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentId,
        ArgumentName: commentId
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The text of the review comment.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a reply for a review comment,
    RequestType: ,
    ResponseType: pull-request-review-comment,
    MethodName: Pulls/create-reply-for-review-commentAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/create-reply-for-review-comment
  },
  {
    Id: Pulls/list-commits,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/commits?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List commits on a pull request,
    RequestType: ,
    ResponseType: ,
    MethodName: Pulls/list-commitsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/list-commits
  },
  {
    Id: Pulls/list-files,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/files?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List pull requests files,
    RequestType: ,
    ResponseType: ,
    MethodName: Pulls/list-filesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/list-files
  },
  {
    Id: Pulls/check-if-merged,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/merge",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if a pull request has been merged,
    RequestType: ,
    ResponseType: ,
    MethodName: Pulls/check-if-mergedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/check-if-merged
  },
  {
    Id: Pulls/merge,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/merge",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: commit_title,
        Name: CommitTitle,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Title for the automatic commit message.,
        ParameterName: commitTitle,
        ArgumentName: commitTitle
      },
      {
        Id: commit_message,
        Name: CommitMessage,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Extra detail to append to automatic commit message.,
        ParameterName: commitMessage,
        ArgumentName: commitMessage
      },
      {
        Id: sha,
        Name: Sha,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: SHA that pull request head must match to allow merge.,
        ParameterName: sha,
        ArgumentName: sha
      },
      {
        Id: merge_method,
        Name: MergeMethod,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Merge,
            Squash,
            Rebase
          ],
          EnumValues: [
            merge,
            squash,
            rebase
          ]
        },
        IsRequired: false,
        Summary: The merge method to use.,
        ParameterName: mergeMethod,
        ArgumentName: mergeMethod
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Merge a pull request,
    RequestType: ,
    ResponseType: pull-request-merge-result,
    MethodName: Pulls/mergeAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/merge
  },
  {
    Id: Pulls/list-requested-reviewers,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all requested reviewers for a pull request,
    RequestType: ,
    ResponseType: pull-request-review-request,
    MethodName: Pulls/list-requested-reviewersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/list-requested-reviewers
  },
  {
    Id: Pulls/request-reviewers,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: reviewers,
        Name: Reviewers,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of user `login`s that will be requested.,
        ParameterName: reviewers,
        ArgumentName: reviewers
      },
      {
        Id: team_reviewers,
        Name: TeamReviewers,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of team `slug`s that will be requested.,
        ParameterName: teamReviewers,
        ArgumentName: teamReviewers
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Request reviewers for a pull request,
    RequestType: ,
    ResponseType: pull-request-simple,
    MethodName: Pulls/request-reviewersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/request-reviewers
  },
  {
    Id: Pulls/remove-requested-reviewers,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: reviewers,
        Name: Reviewers,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: An array of user `login`s that will be removed.,
        ParameterName: reviewers,
        ArgumentName: reviewers
      },
      {
        Id: team_reviewers,
        Name: TeamReviewers,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of team `slug`s that will be removed.,
        ParameterName: teamReviewers,
        ArgumentName: teamReviewers
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove requested reviewers from a pull request,
    RequestType: ,
    ResponseType: pull-request-simple,
    MethodName: Pulls/remove-requested-reviewersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/remove-requested-reviewers
  },
  {
    Id: Pulls/list-reviews,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/reviews?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List reviews for a pull request,
    RequestType: ,
    ResponseType: ,
    MethodName: Pulls/list-reviewsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/list-reviews
  },
  {
    Id: Pulls/create-review,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/reviews",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: commit_id,
        Name: CommitId,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.,
        ParameterName: commitId,
        ArgumentName: commitId
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: event,
        Name: Event,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            APPROVE,
            REQUESTCHANGES,
            COMMENT
          ],
          EnumValues: [
            APPROVE,
            REQUEST_CHANGES,
            COMMENT
          ]
        },
        IsRequired: false,
        Summary: The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.,
        ParameterName: @event,
        ArgumentName: @event
      },
      {
        Id: comments,
        Name: Comments,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<TestComments?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Use the following table to specify the location, destination, and contents of the draft review comment.,
        ParameterName: comments,
        ArgumentName: comments
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a review for a pull request,
    RequestType: ,
    ResponseType: pull-request-review,
    MethodName: Pulls/create-reviewAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/create-review
  },
  {
    Id: Pulls/get-review,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: review_id,
        Name: ReviewId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reviewId,
        ArgumentName: reviewId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a review for a pull request,
    RequestType: ,
    ResponseType: pull-request-review,
    MethodName: Pulls/get-reviewAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/get-review
  },
  {
    Id: Pulls/update-review,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: review_id,
        Name: ReviewId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reviewId,
        ArgumentName: reviewId
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The body text of the pull request review.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Update a review for a pull request,
    RequestType: ,
    ResponseType: pull-request-review,
    MethodName: Pulls/update-reviewAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/update-review
  },
  {
    Id: Pulls/delete-pending-review,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: review_id,
        Name: ReviewId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reviewId,
        ArgumentName: reviewId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a pending review for a pull request,
    RequestType: ,
    ResponseType: pull-request-review,
    MethodName: Pulls/delete-pending-reviewAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/delete-pending-review
  },
  {
    Id: Pulls/list-comments-for-review,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/comments?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: review_id,
        Name: ReviewId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reviewId,
        ArgumentName: reviewId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List comments for a pull request review,
    RequestType: ,
    ResponseType: ,
    MethodName: Pulls/list-comments-for-reviewAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/list-comments-for-review
  },
  {
    Id: Pulls/dismiss-review,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/dismissals",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: review_id,
        Name: ReviewId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reviewId,
        ArgumentName: reviewId
      },
      {
        Id: message,
        Name: Message,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The message for the pull request review dismissal,
        ParameterName: message,
        ArgumentName: message
      },
      {
        Id: event,
        Name: Event,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            DISMISS
          ],
          EnumValues: [
            DISMISS
          ]
        },
        IsRequired: false,
        Summary:
<br/>Example: "DISMISS",
        ParameterName: @event,
        ArgumentName: @event
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Dismiss a review for a pull request,
    RequestType: ,
    ResponseType: pull-request-review,
    MethodName: Pulls/dismiss-reviewAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/dismiss-review
  },
  {
    Id: Pulls/submit-review,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/events",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: review_id,
        Name: ReviewId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reviewId,
        ArgumentName: reviewId
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The body text of the pull request review,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: event,
        Name: Event,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            APPROVE,
            REQUESTCHANGES,
            COMMENT
          ],
          EnumValues: [
            APPROVE,
            REQUEST_CHANGES,
            COMMENT
          ]
        },
        IsRequired: true,
        Summary: The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.,
        ParameterName: @event,
        ArgumentName: @event
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Submit a review for a pull request,
    RequestType: ,
    ResponseType: pull-request-review,
    MethodName: Pulls/submit-reviewAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/submit-review
  },
  {
    Id: Pulls/update-branch,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/pulls/{pullNumber}/update-branch",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pull_number,
        Name: PullNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: pullNumber,
        ArgumentName: pullNumber
      },
      {
        Id: expected_head_sha,
        Name: ExpectedHeadSha,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/commits/commits#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.,
        ParameterName: expectedHeadSha,
        ArgumentName: expectedHeadSha
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Update a pull request branch,
    RequestType: ,
    ResponseType: ,
    MethodName: Pulls/update-branchAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Pulls/update-branch
  },
  {
    Id: Repos/get-readme,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/readme?ref={ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository README,
    RequestType: ,
    ResponseType: content-file,
    MethodName: Repos/get-readmeAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-readme
  },
  {
    Id: Repos/get-readme-in-directory,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/readme/{dir}?ref={ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: dir,
        Name: Dir,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: dir,
        ArgumentName: dir
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository README for a directory,
    RequestType: ,
    ResponseType: content-file,
    MethodName: Repos/get-readme-in-directoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-readme-in-directory
  },
  {
    Id: Repos/list-releases,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List releases,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-releasesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-releases
  },
  {
    Id: Repos/create-release,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: tag_name,
        Name: TagName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the tag.,
        ParameterName: tagName,
        ArgumentName: tagName
      },
      {
        Id: target_commitish,
        Name: TargetCommitish,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.,
        ParameterName: targetCommitish,
        ArgumentName: targetCommitish
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the release.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Text describing the contents of the tag.,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: draft,
        Name: Draft,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
`true` to create a draft (unpublished) release, `false` to create a published one.
<br/>Default Value: false,
        ParameterName: draft,
        ArgumentName: draft
      },
      {
        Id: prerelease,
        Name: Prerelease,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
`true` to identify the release as a prerelease. `false` to identify the release as a full release.
<br/>Default Value: false,
        ParameterName: prerelease,
        ArgumentName: prerelease
      },
      {
        Id: discussion_category_name,
        Name: DiscussionCategoryName,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).",
        ParameterName: discussionCategoryName,
        ArgumentName: discussionCategoryName
      },
      {
        Id: generate_release_notes,
        Name: GenerateReleaseNotes,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
<br/>Default Value: false,
        ParameterName: generateReleaseNotes,
        ArgumentName: generateReleaseNotes
      },
      {
        Id: make_latest,
        Name: MakeLatest,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            True,
            False,
            Legacy
          ],
          EnumValues: [
            true,
            false,
            legacy
          ]
        },
        IsRequired: false,
        DefaultValue: TestMakeLatest.True,
        Summary:
Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
<br/>Default Value: true,
        ParameterName: makeLatest,
        ArgumentName: makeLatest
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a release,
    RequestType: ,
    ResponseType: release,
    MethodName: Repos/create-releaseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-release
  },
  {
    Id: Repos/get-release-asset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/assets/{assetId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: asset_id,
        Name: AssetId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: assetId,
        ArgumentName: assetId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a release asset,
    RequestType: ,
    ResponseType: release-asset,
    MethodName: Repos/get-release-assetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-release-asset
  },
  {
    Id: Repos/update-release-asset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/assets/{assetId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: asset_id,
        Name: AssetId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: assetId,
        ArgumentName: assetId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The file name of the asset.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: label,
        Name: Label,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An alternate short description of the asset. Used in place of the filename.,
        ParameterName: label,
        ArgumentName: label
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
<br/>Example: "uploaded",
        ParameterName: state,
        ArgumentName: state
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a release asset,
    RequestType: ,
    ResponseType: release-asset,
    MethodName: Repos/update-release-assetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-release-asset
  },
  {
    Id: Repos/delete-release-asset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/assets/{assetId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: asset_id,
        Name: AssetId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: assetId,
        ArgumentName: assetId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a release asset,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-release-assetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-release-asset
  },
  {
    Id: Repos/generate-release-notes,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/generate-notes",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: tag_name,
        Name: TagName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The tag name for the release. This can be an existing tag or a new one.,
        ParameterName: tagName,
        ArgumentName: tagName
      },
      {
        Id: target_commitish,
        Name: TargetCommitish,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.,
        ParameterName: targetCommitish,
        ArgumentName: targetCommitish
      },
      {
        Id: previous_tag_name,
        Name: PreviousTagName,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.,
        ParameterName: previousTagName,
        ArgumentName: previousTagName
      },
      {
        Id: configuration_file_path,
        Name: ConfigurationFilePath,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.,
        ParameterName: configurationFilePath,
        ArgumentName: configurationFilePath
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Generate release notes content for a release,
    RequestType: ,
    ResponseType: release-notes-content,
    MethodName: Repos/generate-release-notesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/generate-release-notes
  },
  {
    Id: Repos/get-latest-release,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/latest",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the latest release,
    RequestType: ,
    ResponseType: release,
    MethodName: Repos/get-latest-releaseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-latest-release
  },
  {
    Id: Repos/get-release-by-tag,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/tags/{tag}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: tag,
        Name: Tag,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: tag,
        ArgumentName: tag
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a release by tag name,
    RequestType: ,
    ResponseType: release,
    MethodName: Repos/get-release-by-tagAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-release-by-tag
  },
  {
    Id: Repos/get-release,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/{releaseId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: release_id,
        Name: ReleaseId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: releaseId,
        ArgumentName: releaseId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a release,
    RequestType: ,
    ResponseType: release,
    MethodName: Repos/get-releaseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-release
  },
  {
    Id: Repos/update-release,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/{releaseId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: release_id,
        Name: ReleaseId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: releaseId,
        ArgumentName: releaseId
      },
      {
        Id: tag_name,
        Name: TagName,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the tag.,
        ParameterName: tagName,
        ArgumentName: tagName
      },
      {
        Id: target_commitish,
        Name: TargetCommitish,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.,
        ParameterName: targetCommitish,
        ArgumentName: targetCommitish
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the release.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Text describing the contents of the tag.,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: draft,
        Name: Draft,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: `true` makes the release a draft, and `false` publishes the release.,
        ParameterName: draft,
        ArgumentName: draft
      },
      {
        Id: prerelease,
        Name: Prerelease,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: `true` to identify the release as a prerelease, `false` to identify the release as a full release.,
        ParameterName: prerelease,
        ArgumentName: prerelease
      },
      {
        Id: make_latest,
        Name: MakeLatest,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            True,
            False,
            Legacy
          ],
          EnumValues: [
            true,
            false,
            legacy
          ]
        },
        IsRequired: false,
        DefaultValue: TestMakeLatest.True,
        Summary:
Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
<br/>Default Value: true,
        ParameterName: makeLatest,
        ArgumentName: makeLatest
      },
      {
        Id: discussion_category_name,
        Name: DiscussionCategoryName,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).",
        ParameterName: discussionCategoryName,
        ArgumentName: discussionCategoryName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a release,
    RequestType: ,
    ResponseType: release,
    MethodName: Repos/update-releaseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-release
  },
  {
    Id: Repos/delete-release,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/{releaseId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: release_id,
        Name: ReleaseId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: releaseId,
        ArgumentName: releaseId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a release,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-releaseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-release
  },
  {
    Id: Repos/list-release-assets,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/{releaseId}/assets?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: release_id,
        Name: ReleaseId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: releaseId,
        ArgumentName: releaseId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List release assets,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-release-assetsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-release-assets
  },
  {
    Id: Repos/upload-release-asset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/{releaseId}/assets?name={name}&label={label}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: release_id,
        Name: ReleaseId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: releaseId,
        ArgumentName: releaseId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: label,
        Name: Label,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: label,
        ArgumentName: label
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Upload a release asset,
    RequestType: ,
    ResponseType: release-asset,
    MethodName: Repos/upload-release-assetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/upload-release-asset
  },
  {
    Id: Reactions/list-for-release,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/{releaseId}/reactions?content={content}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: release_id,
        Name: ReleaseId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: releaseId,
        ArgumentName: releaseId
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            Laugh,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            laugh,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: content,
        ArgumentName: content
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List reactions for a release,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/list-for-releaseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/list-for-release
  },
  {
    Id: Reactions/create-for-release,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/{releaseId}/reactions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: release_id,
        Name: ReleaseId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: releaseId,
        ArgumentName: releaseId
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            Laugh,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            laugh,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: true,
        Summary: The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release.,
        ParameterName: content,
        ArgumentName: content
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create reaction for a release,
    RequestType: ,
    ResponseType: reaction,
    MethodName: Reactions/create-for-releaseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/create-for-release
  },
  {
    Id: Reactions/delete-for-release,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/releases/{releaseId}/reactions/{reactionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: release_id,
        Name: ReleaseId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: releaseId,
        ArgumentName: releaseId
      },
      {
        Id: reaction_id,
        Name: ReactionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: reactionId,
        ArgumentName: reactionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a release reaction,
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/delete-for-releaseAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/delete-for-release
  },
  {
    Id: Repos/get-branch-rules,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/rules/branches/{branch}?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: branch,
        Name: Branch,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: branch,
        ArgumentName: branch
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get rules for a branch,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-branch-rulesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-branch-rules
  },
  {
    Id: Repos/get-repo-rulesets,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/rulesets?per_page={perPage}&page={page}&includes_parents={includesParents}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: includes_parents,
        Name: IncludesParents,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: true,
        Summary:
<br/>Default Value: true,
        ParameterName: includesParents,
        ArgumentName: includesParents
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all repository rulesets,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-repo-rulesetsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-repo-rulesets
  },
  {
    Id: Repos/create-repo-ruleset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/rulesets",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the ruleset.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: target,
        Name: Target,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Branch,
            Tag,
            Push
          ],
          EnumValues: [
            branch,
            tag,
            push
          ]
        },
        IsRequired: false,
        Summary:
The target of the ruleset

**Note**: The `push` target is in beta and is subject to change.,
        ParameterName: target,
        ArgumentName: target
      },
      {
        Id: enforcement,
        Name: Enforcement,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Disabled,
            Active,
            Evaluate
          ],
          EnumValues: [
            disabled,
            active,
            evaluate
          ]
        },
        IsRequired: true,
        Summary: The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).,
        ParameterName: enforcement,
        ArgumentName: enforcement
      },
      {
        Id: bypass_actors,
        Name: BypassActors,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryRulesetBypassActor>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The actors that can bypass the rules in this ruleset,
        ParameterName: bypassActors,
        ArgumentName: bypassActors
      },
      {
        Id: conditions,
        Name: Conditions,
        Type: {
          CSharpType: RepositoryRulesetConditions?,
          IsArray: false,
          IsEnum: false,
          Properties: [
            ref_name
          ],
          EnumValues: null
        },
        IsRequired: false,
        Summary: Parameters for a repository ruleset ref name condition,
        ParameterName: conditions,
        ArgumentName: conditions
      },
      {
        Id: rules,
        Name: Rules,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryRule>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of rules within the ruleset.,
        ParameterName: rules,
        ArgumentName: rules
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a repository ruleset,
    RequestType: ,
    ResponseType: repository-ruleset,
    MethodName: Repos/create-repo-rulesetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-repo-ruleset
  },
  {
    Id: Repos/get-repo-rule-suites,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/rulesets/rule-suites?ref={ref}&time_period={timePeriod}&actor_name={actorName}&rule_suite_result={ruleSuiteResult}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      },
      {
        Id: time_period,
        Name: TimePeriod,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Hour,
            Day,
            Week,
            Month
          ],
          EnumValues: [
            hour,
            day,
            week,
            month
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: TimePeriod.Day,
        Summary:
<br/>Default Value: day,
        ParameterName: timePeriod,
        ArgumentName: timePeriod
      },
      {
        Id: actor_name,
        Name: ActorName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: actorName,
        ArgumentName: actorName
      },
      {
        Id: rule_suite_result,
        Name: RuleSuiteResult,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Pass,
            Fail,
            Bypass,
            All
          ],
          EnumValues: [
            pass,
            fail,
            bypass,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: RuleSuiteResult.All,
        Summary:
<br/>Default Value: all,
        ParameterName: ruleSuiteResult,
        ArgumentName: ruleSuiteResult
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository rule suites,
    RequestType: ,
    ResponseType: rule-suites,
    MethodName: Repos/get-repo-rule-suitesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-repo-rule-suites
  },
  {
    Id: Repos/get-repo-rule-suite,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/rulesets/rule-suites/{ruleSuiteId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: rule_suite_id,
        Name: RuleSuiteId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ruleSuiteId,
        ArgumentName: ruleSuiteId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository rule suite,
    RequestType: ,
    ResponseType: rule-suite,
    MethodName: Repos/get-repo-rule-suiteAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-repo-rule-suite
  },
  {
    Id: Repos/get-repo-ruleset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/rulesets/{rulesetId}?includes_parents={includesParents}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ruleset_id,
        Name: RulesetId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: rulesetId,
        ArgumentName: rulesetId
      },
      {
        Id: includes_parents,
        Name: IncludesParents,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: true,
        Summary:
<br/>Default Value: true,
        ParameterName: includesParents,
        ArgumentName: includesParents
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository ruleset,
    RequestType: ,
    ResponseType: repository-ruleset,
    MethodName: Repos/get-repo-rulesetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-repo-ruleset
  },
  {
    Id: Repos/update-repo-ruleset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/rulesets/{rulesetId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ruleset_id,
        Name: RulesetId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: rulesetId,
        ArgumentName: rulesetId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The name of the ruleset.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: target,
        Name: Target,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Branch,
            Tag,
            Push
          ],
          EnumValues: [
            branch,
            tag,
            push
          ]
        },
        IsRequired: false,
        Summary:
The target of the ruleset

**Note**: The `push` target is in beta and is subject to change.,
        ParameterName: target,
        ArgumentName: target
      },
      {
        Id: enforcement,
        Name: Enforcement,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Disabled,
            Active,
            Evaluate
          ],
          EnumValues: [
            disabled,
            active,
            evaluate
          ]
        },
        IsRequired: false,
        Summary: The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).,
        ParameterName: enforcement,
        ArgumentName: enforcement
      },
      {
        Id: bypass_actors,
        Name: BypassActors,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryRulesetBypassActor>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The actors that can bypass the rules in this ruleset,
        ParameterName: bypassActors,
        ArgumentName: bypassActors
      },
      {
        Id: conditions,
        Name: Conditions,
        Type: {
          CSharpType: RepositoryRulesetConditions?,
          IsArray: false,
          IsEnum: false,
          Properties: [
            ref_name
          ],
          EnumValues: null
        },
        IsRequired: false,
        Summary: Parameters for a repository ruleset ref name condition,
        ParameterName: conditions,
        ArgumentName: conditions
      },
      {
        Id: rules,
        Name: Rules,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryRule>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of rules within the ruleset.,
        ParameterName: rules,
        ArgumentName: rules
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Update a repository ruleset,
    RequestType: ,
    ResponseType: repository-ruleset,
    MethodName: Repos/update-repo-rulesetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/update-repo-ruleset
  },
  {
    Id: Repos/delete-repo-ruleset,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/rulesets/{rulesetId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ruleset_id,
        Name: RulesetId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: rulesetId,
        ArgumentName: rulesetId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a repository ruleset,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-repo-rulesetAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-repo-ruleset
  },
  {
    Id: Secret-scanning/list-alerts-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/secret-scanning/alerts?state={state}&secret_type={secretType}&resolution={resolution}&sort={sort}&direction={direction}&page={page}&per_page={perPage}&before={before}&after={after}&validity={validity}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Resolved
          ],
          EnumValues: [
            open,
            resolved
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: secret_type,
        Name: SecretType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: secretType,
        ArgumentName: secretType
      },
      {
        Id: resolution,
        Name: Resolution,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: resolution,
        ArgumentName: resolution
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: after,
        Name: After,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: after,
        ArgumentName: after
      },
      {
        Id: validity,
        Name: Validity,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: validity,
        ArgumentName: validity
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List secret scanning alerts for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Secret-scanning/list-alerts-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Secret-scanning/list-alerts-for-repo
  },
  {
    Id: Secret-scanning/get-alert,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: alert_number,
        Name: AlertNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: The security alert number.,
        ParameterName: alertNumber,
        ArgumentName: alertNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a secret scanning alert,
    RequestType: ,
    ResponseType: secret-scanning-alert,
    MethodName: Secret-scanning/get-alertAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Secret-scanning/get-alert
  },
  {
    Id: Secret-scanning/update-alert,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: alert_number,
        Name: AlertNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: The security alert number.,
        ParameterName: alertNumber,
        ArgumentName: alertNumber
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Resolved
          ],
          EnumValues: [
            open,
            resolved
          ]
        },
        IsRequired: true,
        Summary: Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: resolution,
        Name: Resolution,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            FalsePositive,
            WontFix,
            Revoked,
            UsedInTests
          ],
          EnumValues: [
            false_positive,
            wont_fix,
            revoked,
            used_in_tests
          ]
        },
        IsRequired: false,
        Summary: **Required when the `state` is `resolved`.** The reason for resolving the alert.,
        ParameterName: resolution,
        ArgumentName: resolution
      },
      {
        Id: resolution_comment,
        Name: ResolutionComment,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`.,
        ParameterName: resolutionComment,
        ArgumentName: resolutionComment
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a secret scanning alert,
    RequestType: ,
    ResponseType: secret-scanning-alert,
    MethodName: Secret-scanning/update-alertAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Secret-scanning/update-alert
  },
  {
    Id: Secret-scanning/list-locations-for-alert,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}/locations?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: alert_number,
        Name: AlertNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: The security alert number.,
        ParameterName: alertNumber,
        ArgumentName: alertNumber
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List locations for a secret scanning alert,
    RequestType: ,
    ResponseType: ,
    MethodName: Secret-scanning/list-locations-for-alertAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Secret-scanning/list-locations-for-alert
  },
  {
    Id: Security-advisories/list-repository-advisories,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/security-advisories?direction={direction}&sort={sort}&before={before}&after={after}&per_page={perPage}&state={state}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated,
            Published
          ],
          EnumValues: [
            created,
            updated,
            published
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      },
      {
        Id: after,
        Name: After,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: after,
        ArgumentName: after
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Triage,
            Draft,
            Published,
            Closed
          ],
          EnumValues: [
            triage,
            draft,
            published,
            closed
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: state,
        ArgumentName: state
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository security advisories,
    RequestType: ,
    ResponseType: ,
    MethodName: Security-advisories/list-repository-advisoriesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Security-advisories/list-repository-advisories
  },
  {
    Id: Security-advisories/create-repository-advisory,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/security-advisories",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: summary,
        Name: Summary,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A short summary of the advisory.,
        ParameterName: summary,
        ArgumentName: summary
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A detailed description of what the advisory impacts.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: cve_id,
        Name: CveId,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The Common Vulnerabilities and Exposures (CVE) ID.,
        ParameterName: cveId,
        ArgumentName: cveId
      },
      {
        Id: vulnerabilities,
        Name: Vulnerabilities,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryAdvisoryCreateVulnerabilities>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A product affected by the vulnerability detailed in a repository security advisory.,
        ParameterName: vulnerabilities,
        ArgumentName: vulnerabilities
      },
      {
        Id: cwe_ids,
        Name: CweIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A list of Common Weakness Enumeration (CWE) IDs.,
        ParameterName: cweIds,
        ArgumentName: cweIds
      },
      {
        Id: credits,
        Name: Credits,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryAdvisoryCreateCredits?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A list of users receiving credit for their participation in the security advisory.,
        ParameterName: credits,
        ArgumentName: credits
      },
      {
        Id: severity,
        Name: Severity,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Critical,
            High,
            Medium,
            Low
          ],
          EnumValues: [
            critical,
            high,
            medium,
            low
          ]
        },
        IsRequired: false,
        Summary: The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.,
        ParameterName: severity,
        ArgumentName: severity
      },
      {
        Id: cvss_vector_string,
        Name: CvssVectorString,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.,
        ParameterName: cvssVectorString,
        ArgumentName: cvssVectorString
      },
      {
        Id: start_private_fork,
        Name: StartPrivateFork,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether to create a temporary private fork of the repository to collaborate on a fix.
<br/>Default Value: false,
        ParameterName: startPrivateFork,
        ArgumentName: startPrivateFork
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a repository security advisory,
    RequestType: RepositoryAdvisoryCreate,
    ResponseType: repository-advisory,
    MethodName: Security-advisories/create-repository-advisoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Security-advisories/create-repository-advisory
  },
  {
    Id: Security-advisories/create-private-vulnerability-report,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/security-advisories/reports",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: summary,
        Name: Summary,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A short summary of the advisory.,
        ParameterName: summary,
        ArgumentName: summary
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A detailed description of what the advisory impacts.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: vulnerabilities,
        Name: Vulnerabilities,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<PrivateVulnerabilityReportCreateVulnerabilities?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of products affected by the vulnerability detailed in a repository security advisory.,
        ParameterName: vulnerabilities,
        ArgumentName: vulnerabilities
      },
      {
        Id: cwe_ids,
        Name: CweIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A list of Common Weakness Enumeration (CWE) IDs.,
        ParameterName: cweIds,
        ArgumentName: cweIds
      },
      {
        Id: severity,
        Name: Severity,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Critical,
            High,
            Medium,
            Low
          ],
          EnumValues: [
            critical,
            high,
            medium,
            low
          ]
        },
        IsRequired: false,
        Summary: The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.,
        ParameterName: severity,
        ArgumentName: severity
      },
      {
        Id: cvss_vector_string,
        Name: CvssVectorString,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.,
        ParameterName: cvssVectorString,
        ArgumentName: cvssVectorString
      },
      {
        Id: start_private_fork,
        Name: StartPrivateFork,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether to create a temporary private fork of the repository to collaborate on a fix.
<br/>Default Value: false,
        ParameterName: startPrivateFork,
        ArgumentName: startPrivateFork
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Privately report a security vulnerability,
    RequestType: PrivateVulnerabilityReportCreate,
    ResponseType: repository-advisory,
    MethodName: Security-advisories/create-private-vulnerability-reportAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Security-advisories/create-private-vulnerability-report
  },
  {
    Id: Security-advisories/get-repository-advisory,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/security-advisories/{ghsaId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ghsa_id,
        Name: GhsaId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ghsaId,
        ArgumentName: ghsaId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository security advisory,
    RequestType: ,
    ResponseType: repository-advisory,
    MethodName: Security-advisories/get-repository-advisoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Security-advisories/get-repository-advisory
  },
  {
    Id: Security-advisories/update-repository-advisory,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/security-advisories/{ghsaId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ghsa_id,
        Name: GhsaId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ghsaId,
        ArgumentName: ghsaId
      },
      {
        Id: summary,
        Name: Summary,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A short summary of the advisory.,
        ParameterName: summary,
        ArgumentName: summary
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A detailed description of what the advisory impacts.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: cve_id,
        Name: CveId,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The Common Vulnerabilities and Exposures (CVE) ID.,
        ParameterName: cveId,
        ArgumentName: cveId
      },
      {
        Id: vulnerabilities,
        Name: Vulnerabilities,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryAdvisoryUpdateVulnerabilities?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A product affected by the vulnerability detailed in a repository security advisory.,
        ParameterName: vulnerabilities,
        ArgumentName: vulnerabilities
      },
      {
        Id: cwe_ids,
        Name: CweIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A list of Common Weakness Enumeration (CWE) IDs.,
        ParameterName: cweIds,
        ArgumentName: cweIds
      },
      {
        Id: credits,
        Name: Credits,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<RepositoryAdvisoryUpdateCredits?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A list of users receiving credit for their participation in the security advisory.,
        ParameterName: credits,
        ArgumentName: credits
      },
      {
        Id: severity,
        Name: Severity,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Critical,
            High,
            Medium,
            Low
          ],
          EnumValues: [
            critical,
            high,
            medium,
            low
          ]
        },
        IsRequired: false,
        Summary: The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.,
        ParameterName: severity,
        ArgumentName: severity
      },
      {
        Id: cvss_vector_string,
        Name: CvssVectorString,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.,
        ParameterName: cvssVectorString,
        ArgumentName: cvssVectorString
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Published,
            Closed,
            Draft
          ],
          EnumValues: [
            published,
            closed,
            draft
          ]
        },
        IsRequired: false,
        Summary: The state of the advisory.,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: collaborating_users,
        Name: CollaboratingUsers,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A list of usernames who have been granted write access to the advisory.,
        ParameterName: collaboratingUsers,
        ArgumentName: collaboratingUsers
      },
      {
        Id: collaborating_teams,
        Name: CollaboratingTeams,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A list of team slugs which have been granted write access to the advisory.,
        ParameterName: collaboratingTeams,
        ArgumentName: collaboratingTeams
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a repository security advisory,
    RequestType: RepositoryAdvisoryUpdate,
    ResponseType: repository-advisory,
    MethodName: Security-advisories/update-repository-advisoryAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Security-advisories/update-repository-advisory
  },
  {
    Id: Security-advisories/create-repository-advisory-cve-request,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/security-advisories/{ghsaId}/cve",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ghsa_id,
        Name: GhsaId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ghsaId,
        ArgumentName: ghsaId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Request a CVE for a repository security advisory,
    RequestType: ,
    ResponseType: ,
    MethodName: Security-advisories/create-repository-advisory-cve-requestAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Security-advisories/create-repository-advisory-cve-request
  },
  {
    Id: Security-advisories/create-fork,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/security-advisories/{ghsaId}/forks",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ghsa_id,
        Name: GhsaId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ghsaId,
        ArgumentName: ghsaId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a temporary private fork,
    RequestType: ,
    ResponseType: full-repository,
    MethodName: Security-advisories/create-forkAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Security-advisories/create-fork
  },
  {
    Id: Activity/list-stargazers-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/stargazers?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List stargazers,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-stargazers-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-stargazers-for-repo
  },
  {
    Id: Repos/get-code-frequency-stats,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/stats/code_frequency",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the weekly commit activity,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-code-frequency-statsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-code-frequency-stats
  },
  {
    Id: Repos/get-commit-activity-stats,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/stats/commit_activity",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the last year of commit activity,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-commit-activity-statsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-commit-activity-stats
  },
  {
    Id: Repos/get-contributors-stats,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/stats/contributors",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all contributor commit activity,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-contributors-statsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-contributors-stats
  },
  {
    Id: Repos/get-participation-stats,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/stats/participation",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the weekly commit count,
    RequestType: ,
    ResponseType: participation-stats,
    MethodName: Repos/get-participation-statsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-participation-stats
  },
  {
    Id: Repos/get-punch-card-stats,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/stats/punch_card",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the hourly commit count for each day,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-punch-card-statsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-punch-card-stats
  },
  {
    Id: Repos/create-commit-status,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/statuses/{sha}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: sha,
        Name: Sha,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: sha,
        ArgumentName: sha
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Error,
            Failure,
            Pending,
            Success
          ],
          EnumValues: [
            error,
            failure,
            pending,
            success
          ]
        },
        IsRequired: true,
        Summary: The state of the status.,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: target_url,
        Name: TargetUrl,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
`http://ci.example.com/user/repo/build/sha`,
        ParameterName: targetUrl,
        ArgumentName: targetUrl
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A short description of the status.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: context,
        Name: Context,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: "default",
        Summary:
A string label to differentiate this status from the status of other systems. This field is case-insensitive.
<br/>Default Value: default,
        ParameterName: context,
        ArgumentName: context
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a commit status,
    RequestType: ,
    ResponseType: status,
    MethodName: Repos/create-commit-statusAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-commit-status
  },
  {
    Id: Activity/list-watchers-for-repo,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/subscribers?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List watchers,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-watchers-for-repoAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-watchers-for-repo
  },
  {
    Id: Activity/get-repo-subscription,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/subscription",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a repository subscription,
    RequestType: ,
    ResponseType: repository-subscription,
    MethodName: Activity/get-repo-subscriptionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/get-repo-subscription
  },
  {
    Id: Activity/set-repo-subscription,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/subscription",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: subscribed,
        Name: Subscribed,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Determines if notifications should be received from this repository.,
        ParameterName: subscribed,
        ArgumentName: subscribed
      },
      {
        Id: ignored,
        Name: Ignored,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Determines if all notifications should be blocked from this repository.,
        ParameterName: ignored,
        ArgumentName: ignored
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set a repository subscription,
    RequestType: ,
    ResponseType: repository-subscription,
    MethodName: Activity/set-repo-subscriptionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/set-repo-subscription
  },
  {
    Id: Activity/delete-repo-subscription,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/subscription",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a repository subscription,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/delete-repo-subscriptionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/delete-repo-subscription
  },
  {
    Id: Repos/list-tags,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/tags?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository tags,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-tagsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-tags
  },
  {
    Id: Repos/list-tag-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/tags/protection",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List tag protection states for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-tag-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-tag-protection
  },
  {
    Id: Repos/create-tag-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/tags/protection",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: pattern,
        Name: Pattern,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: An optional glob pattern to match against when enforcing tag protection.,
        ParameterName: pattern,
        ArgumentName: pattern
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a tag protection state for a repository,
    RequestType: ,
    ResponseType: tag-protection,
    MethodName: Repos/create-tag-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-tag-protection
  },
  {
    Id: Repos/delete-tag-protection,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/tags/protection/{tagProtectionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: tag_protection_id,
        Name: TagProtectionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: tagProtectionId,
        ArgumentName: tagProtectionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a tag protection state for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/delete-tag-protectionAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/delete-tag-protection
  },
  {
    Id: Repos/download-tarball-archive,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/tarball/{ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Download a repository archive (tar),
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/download-tarball-archiveAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/download-tarball-archive
  },
  {
    Id: Repos/list-teams,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/teams?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository teams,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-teamsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-teams
  },
  {
    Id: Repos/get-all-topics,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/topics?page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all repository topics,
    RequestType: ,
    ResponseType: topic,
    MethodName: Repos/get-all-topicsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-all-topics
  },
  {
    Id: Repos/replace-all-topics,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/topics",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: names,
        Name: Names,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.,
        ParameterName: names,
        ArgumentName: names
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Replace all repository topics,
    RequestType: ,
    ResponseType: topic,
    MethodName: Repos/replace-all-topicsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/replace-all-topics
  },
  {
    Id: Repos/get-clones,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/traffic/clones?per={per}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per,
        Name: Per,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Day,
            Week
          ],
          EnumValues: [
            day,
            week
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Per.Day,
        Summary:
<br/>Default Value: day,
        ParameterName: per,
        ArgumentName: per
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get repository clones,
    RequestType: ,
    ResponseType: clone-traffic,
    MethodName: Repos/get-clonesAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-clones
  },
  {
    Id: Repos/get-top-paths,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/traffic/popular/paths",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get top referral paths,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-top-pathsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-top-paths
  },
  {
    Id: Repos/get-top-referrers,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/traffic/popular/referrers",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get top referral sources,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/get-top-referrersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-top-referrers
  },
  {
    Id: Repos/get-views,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/traffic/views?per={per}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: per,
        Name: Per,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Day,
            Week
          ],
          EnumValues: [
            day,
            week
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Per.Day,
        Summary:
<br/>Default Value: day,
        ParameterName: per,
        ArgumentName: per
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get page views,
    RequestType: ,
    ResponseType: view-traffic,
    MethodName: Repos/get-viewsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/get-views
  },
  {
    Id: Repos/transfer,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/transfer",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: new_owner,
        Name: NewOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The username or organization name the repository will be transferred to.,
        ParameterName: newOwner,
        ArgumentName: newOwner
      },
      {
        Id: new_name,
        Name: NewName,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The new name to be given to the repository.,
        ParameterName: newName,
        ArgumentName: newName
      },
      {
        Id: team_ids,
        Name: TeamIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.,
        ParameterName: teamIds,
        ArgumentName: teamIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Transfer a repository,
    RequestType: ,
    ResponseType: minimal-repository,
    MethodName: Repos/transferAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/transfer
  },
  {
    Id: Repos/check-vulnerability-alerts,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/vulnerability-alerts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if vulnerability alerts are enabled for a repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/check-vulnerability-alertsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/check-vulnerability-alerts
  },
  {
    Id: Repos/enable-vulnerability-alerts,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/vulnerability-alerts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Enable vulnerability alerts,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/enable-vulnerability-alertsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/enable-vulnerability-alerts
  },
  {
    Id: Repos/disable-vulnerability-alerts,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/vulnerability-alerts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Disable vulnerability alerts,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/disable-vulnerability-alertsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/disable-vulnerability-alerts
  },
  {
    Id: Repos/download-zipball-archive,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{owner}/{repo}/zipball/{ref}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: ref,
        Name: Ref,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: ref,
        ArgumentName: ref
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Download a repository archive (zip),
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/download-zipball-archiveAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/download-zipball-archive
  },
  {
    Id: Repos/create-using-template,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repos/{templateOwner}/{templateRepo}/generate",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: template_owner,
        Name: TemplateOwner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: templateOwner,
        ArgumentName: templateOwner
      },
      {
        Id: template_repo,
        Name: TemplateRepo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: templateRepo,
        ArgumentName: templateRepo
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the new repository.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A short description of the new repository.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: include_all_branches,
        Name: IncludeAllBranches,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
<br/>Default Value: false,
        ParameterName: includeAllBranches,
        ArgumentName: includeAllBranches
      },
      {
        Id: private,
        Name: Private,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Either `true` to create a new private repository or `false` to create a new public one.
<br/>Default Value: false,
        ParameterName: private,
        ArgumentName: private
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a repository using a template,
    RequestType: ,
    ResponseType: full-repository,
    MethodName: Repos/create-using-templateAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-using-template
  },
  {
    Id: Repos/list-public,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/repositories?since={since}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List public repositories,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-publicAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-public
  },
  {
    Id: Search/code,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/search/code?q={q}&sort={sort}&order={order}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: q,
        Name: Q,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: q,
        ArgumentName: q
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Indexed
          ],
          EnumValues: [
            indexed
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: order,
        Name: Order,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Desc,
            Asc
          ],
          EnumValues: [
            desc,
            asc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Order.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: order,
        ArgumentName: order
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Search code,
    RequestType: ,
    ResponseType: ,
    MethodName: Search/codeAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Search/code
  },
  {
    Id: Search/commits,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/search/commits?q={q}&sort={sort}&order={order}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: q,
        Name: Q,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: q,
        ArgumentName: q
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            AuthorDate,
            CommitterDate
          ],
          EnumValues: [
            author-date,
            committer-date
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: order,
        Name: Order,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Desc,
            Asc
          ],
          EnumValues: [
            desc,
            asc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Order.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: order,
        ArgumentName: order
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Search commits,
    RequestType: ,
    ResponseType: ,
    MethodName: Search/commitsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Search/commits
  },
  {
    Id: Search/issues-and-pull-requests,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/search/issues?q={q}&sort={sort}&order={order}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: q,
        Name: Q,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: q,
        ArgumentName: q
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Comments,
            Reactions,
            Reactions+1,
            Reactions1,
            ReactionsSmile,
            ReactionsThinkingFace,
            ReactionsHeart,
            ReactionsTada,
            Interactions,
            Created,
            Updated
          ],
          EnumValues: [
            comments,
            reactions,
            reactions-+1,
            reactions--1,
            reactions-smile,
            reactions-thinking_face,
            reactions-heart,
            reactions-tada,
            interactions,
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: order,
        Name: Order,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Desc,
            Asc
          ],
          EnumValues: [
            desc,
            asc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Order.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: order,
        ArgumentName: order
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Search issues and pull requests,
    RequestType: ,
    ResponseType: ,
    MethodName: Search/issues-and-pull-requestsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Search/issues-and-pull-requests
  },
  {
    Id: Search/labels,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/search/labels?repository_id={repositoryId}&q={q}&sort={sort}&order={order}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      },
      {
        Id: q,
        Name: Q,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: q,
        ArgumentName: q
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: order,
        Name: Order,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Desc,
            Asc
          ],
          EnumValues: [
            desc,
            asc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Order.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: order,
        ArgumentName: order
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Search labels,
    RequestType: ,
    ResponseType: ,
    MethodName: Search/labelsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Search/labels
  },
  {
    Id: Search/repos,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/search/repositories?q={q}&sort={sort}&order={order}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: q,
        Name: Q,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: q,
        ArgumentName: q
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Stars,
            Forks,
            HelpWantedIssues,
            Updated
          ],
          EnumValues: [
            stars,
            forks,
            help-wanted-issues,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: order,
        Name: Order,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Desc,
            Asc
          ],
          EnumValues: [
            desc,
            asc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Order.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: order,
        ArgumentName: order
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Search repositories,
    RequestType: ,
    ResponseType: ,
    MethodName: Search/reposAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Search/repos
  },
  {
    Id: Search/topics,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/search/topics?q={q}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: q,
        Name: Q,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: q,
        ArgumentName: q
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Search topics,
    RequestType: ,
    ResponseType: ,
    MethodName: Search/topicsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Search/topics
  },
  {
    Id: Search/users,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/search/users?q={q}&sort={sort}&order={order}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: q,
        Name: Q,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: q,
        ArgumentName: q
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Followers,
            Repositories,
            Joined
          ],
          EnumValues: [
            followers,
            repositories,
            joined
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: order,
        Name: Order,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Desc,
            Asc
          ],
          EnumValues: [
            desc,
            asc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Order.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: order,
        ArgumentName: order
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Search users,
    RequestType: ,
    ResponseType: ,
    MethodName: Search/usersAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Search/users
  },
  {
    Id: Teams/get-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a team (Legacy),
    RequestType: ,
    ResponseType: team-full,
    MethodName: Teams/get-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/get-legacy
  },
  {
    Id: Teams/update-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The name of the team.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The description of the team.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: privacy,
        Name: Privacy,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Secret,
            Closed
          ],
          EnumValues: [
            secret,
            closed
          ]
        },
        IsRequired: false,
        Summary:
The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
**For a non-nested team:**  
 * `secret` - only visible to organization owners and members of this team.  
 * `closed` - visible to all members of this organization.  
**For a parent or child team:**  
 * `closed` - visible to all members of this organization.,
        ParameterName: privacy,
        ArgumentName: privacy
      },
      {
        Id: notification_setting,
        Name: NotificationSetting,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            NotificationsEnabled,
            NotificationsDisabled
          ],
          EnumValues: [
            notifications_enabled,
            notifications_disabled
          ]
        },
        IsRequired: false,
        Summary:
The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
 * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
 * `notifications_disabled` - no one receives notifications.,
        ParameterName: notificationSetting,
        ArgumentName: notificationSetting
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Pull,
            Push,
            Admin
          ],
          EnumValues: [
            pull,
            push,
            admin
          ]
        },
        IsRequired: false,
        DefaultValue: TestPermission.Pull,
        Summary:
**Deprecated**. The permission that new repositories will be added to the team with when none is specified.
<br/>Default Value: pull,
        ParameterName: permission,
        ArgumentName: permission
      },
      {
        Id: parent_team_id,
        Name: ParentTeamId,
        Type: {
          CSharpType: int?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The ID of a team to set as the parent team.,
        ParameterName: parentTeamId,
        ArgumentName: parentTeamId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a team (Legacy),
    RequestType: ,
    ResponseType: team-full,
    MethodName: Teams/update-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/update-legacy
  },
  {
    Id: Teams/delete-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a team (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/delete-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/delete-legacy
  },
  {
    Id: Teams/list-discussions-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions?direction={direction}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List discussions (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-discussions-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-discussions-legacy
  },
  {
    Id: Teams/create-discussion-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The discussion post's title.,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The discussion post's body text.,
        ParameterName: body,
        ArgumentName: body
      },
      {
        Id: private,
        Name: Private,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
<br/>Default Value: false,
        ParameterName: private,
        ArgumentName: private
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a discussion (Legacy),
    RequestType: ,
    ResponseType: team-discussion,
    MethodName: Teams/create-discussion-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/create-discussion-legacy
  },
  {
    Id: Teams/get-discussion-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a discussion (Legacy),
    RequestType: ,
    ResponseType: team-discussion,
    MethodName: Teams/get-discussion-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/get-discussion-legacy
  },
  {
    Id: Teams/update-discussion-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The discussion post's title.,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The discussion post's body text.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a discussion (Legacy),
    RequestType: ,
    ResponseType: team-discussion,
    MethodName: Teams/update-discussion-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/update-discussion-legacy
  },
  {
    Id: Teams/delete-discussion-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a discussion (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/delete-discussion-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/delete-discussion-legacy
  },
  {
    Id: Teams/list-discussion-comments-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}/comments?direction={direction}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List discussion comments (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-discussion-comments-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-discussion-comments-legacy
  },
  {
    Id: Teams/create-discussion-comment-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}/comments",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The discussion comment's body text.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a discussion comment (Legacy),
    RequestType: ,
    ResponseType: team-discussion-comment,
    MethodName: Teams/create-discussion-comment-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/create-discussion-comment-legacy
  },
  {
    Id: Teams/get-discussion-comment-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: comment_number,
        Name: CommentNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentNumber,
        ArgumentName: commentNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a discussion comment (Legacy),
    RequestType: ,
    ResponseType: team-discussion-comment,
    MethodName: Teams/get-discussion-comment-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/get-discussion-comment-legacy
  },
  {
    Id: Teams/update-discussion-comment-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: comment_number,
        Name: CommentNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentNumber,
        ArgumentName: commentNumber
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The discussion comment's body text.,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a discussion comment (Legacy),
    RequestType: ,
    ResponseType: team-discussion-comment,
    MethodName: Teams/update-discussion-comment-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/update-discussion-comment-legacy
  },
  {
    Id: Teams/delete-discussion-comment-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: comment_number,
        Name: CommentNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentNumber,
        ArgumentName: commentNumber
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a discussion comment (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/delete-discussion-comment-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/delete-discussion-comment-legacy
  },
  {
    Id: Reactions/list-for-team-discussion-comment-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}/reactions?content={content}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: comment_number,
        Name: CommentNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentNumber,
        ArgumentName: commentNumber
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: content,
        ArgumentName: content
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List reactions for a team discussion comment (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/list-for-team-discussion-comment-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/list-for-team-discussion-comment-legacy
  },
  {
    Id: Reactions/create-for-team-discussion-comment-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: comment_number,
        Name: CommentNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: commentNumber,
        ArgumentName: commentNumber
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: true,
        Summary: The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.,
        ParameterName: content,
        ArgumentName: content
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create reaction for a team discussion comment (Legacy),
    RequestType: ,
    ResponseType: reaction,
    MethodName: Reactions/create-for-team-discussion-comment-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/create-for-team-discussion-comment-legacy
  },
  {
    Id: Reactions/list-for-team-discussion-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}/reactions?content={content}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: content,
        ArgumentName: content
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List reactions for a team discussion (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Reactions/list-for-team-discussion-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/list-for-team-discussion-legacy
  },
  {
    Id: Reactions/create-for-team-discussion-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/discussions/{discussionNumber}/reactions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: discussion_number,
        Name: DiscussionNumber,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: discussionNumber,
        ArgumentName: discussionNumber
      },
      {
        Id: content,
        Name: Content,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            +1,
            _1,
            Laugh,
            Confused,
            Heart,
            Hooray,
            Rocket,
            Eyes
          ],
          EnumValues: [
            +1,
            -1,
            laugh,
            confused,
            heart,
            hooray,
            rocket,
            eyes
          ]
        },
        IsRequired: true,
        Summary: The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.,
        ParameterName: content,
        ArgumentName: content
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create reaction for a team discussion (Legacy),
    RequestType: ,
    ResponseType: reaction,
    MethodName: Reactions/create-for-team-discussion-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Reactions/create-for-team-discussion-legacy
  },
  {
    Id: Teams/list-pending-invitations-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/invitations?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List pending team invitations (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-pending-invitations-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-pending-invitations-legacy
  },
  {
    Id: Teams/list-members-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/members?role={role}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: role,
        Name: Role,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Member,
            Maintainer,
            All
          ],
          EnumValues: [
            member,
            maintainer,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Role.All,
        Summary:
<br/>Default Value: all,
        ParameterName: role,
        ArgumentName: role
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List team members (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-members-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-members-legacy
  },
  {
    Id: Teams/get-member-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/members/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get team member (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/get-member-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/get-member-legacy
  },
  {
    Id: Teams/add-member-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/members/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add team member (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/add-member-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/add-member-legacy
  },
  {
    Id: Teams/remove-member-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/members/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove team member (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/remove-member-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/remove-member-legacy
  },
  {
    Id: Teams/get-membership-for-user-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/memberships/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get team membership for a user (Legacy),
    RequestType: ,
    ResponseType: team-membership,
    MethodName: Teams/get-membership-for-user-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/get-membership-for-user-legacy
  },
  {
    Id: Teams/add-or-update-membership-for-user-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/memberships/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: role,
        Name: Role,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Member,
            Maintainer
          ],
          EnumValues: [
            member,
            maintainer
          ]
        },
        IsRequired: false,
        DefaultValue: TestRole.Member,
        Summary:
The role that this user should have in the team.
<br/>Default Value: member,
        ParameterName: role,
        ArgumentName: role
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add or update team membership for a user (Legacy),
    RequestType: ,
    ResponseType: team-membership,
    MethodName: Teams/add-or-update-membership-for-user-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/add-or-update-membership-for-user-legacy
  },
  {
    Id: Teams/remove-membership-for-user-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/memberships/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove team membership for a user (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/remove-membership-for-user-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/remove-membership-for-user-legacy
  },
  {
    Id: Teams/list-projects-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/projects?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List team projects (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-projects-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-projects-legacy
  },
  {
    Id: Teams/check-permissions-for-project-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/projects/{projectId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check team permissions for a project (Legacy),
    RequestType: ,
    ResponseType: team-project,
    MethodName: Teams/check-permissions-for-project-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/check-permissions-for-project-legacy
  },
  {
    Id: Teams/add-or-update-project-permissions-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/projects/{projectId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Read,
            Write,
            Admin
          ],
          EnumValues: [
            read,
            write,
            admin
          ]
        },
        IsRequired: false,
        Summary: The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).",
        ParameterName: permission,
        ArgumentName: permission
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add or update team project permissions (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/add-or-update-project-permissions-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/add-or-update-project-permissions-legacy
  },
  {
    Id: Teams/remove-project-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/projects/{projectId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: project_id,
        Name: ProjectId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: projectId,
        ArgumentName: projectId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a project from a team (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/remove-project-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/remove-project-legacy
  },
  {
    Id: Teams/list-repos-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/repos?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List team repositories (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-repos-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-repos-legacy
  },
  {
    Id: Teams/check-permissions-for-repo-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/repos/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check team permissions for a repository (Legacy),
    RequestType: ,
    ResponseType: team-repository,
    MethodName: Teams/check-permissions-for-repo-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/check-permissions-for-repo-legacy
  },
  {
    Id: Teams/add-or-update-repo-permissions-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/repos/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      },
      {
        Id: permission,
        Name: Permission,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Pull,
            Push,
            Admin
          ],
          EnumValues: [
            pull,
            push,
            admin
          ]
        },
        IsRequired: false,
        Summary: The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.,
        ParameterName: permission,
        ArgumentName: permission
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add or update team repository permissions (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/add-or-update-repo-permissions-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/add-or-update-repo-permissions-legacy
  },
  {
    Id: Teams/remove-repo-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/repos/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a repository from a team (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/remove-repo-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/remove-repo-legacy
  },
  {
    Id: Teams/list-child-legacy,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/teams/{teamId}/teams?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List child teams (Legacy),
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-child-legacyAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-child-legacy
  },
  {
    Id: Users/get-authenticated,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/get-authenticatedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/get-authenticated
  },
  {
    Id: Users/update-authenticated,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The new name of the user.
<br/>Example: Omar Jahandar,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: email,
        Name: Email,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The publicly visible email address of the user.
<br/>Example: omar@example.com,
        ParameterName: email,
        ArgumentName: email
      },
      {
        Id: blog,
        Name: Blog,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The new blog URL of the user.
<br/>Example: blog.example.com,
        ParameterName: blog,
        ArgumentName: blog
      },
      {
        Id: twitter_username,
        Name: TwitterUsername,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The new Twitter username of the user.
<br/>Example: therealomarj,
        ParameterName: twitterUsername,
        ArgumentName: twitterUsername
      },
      {
        Id: company,
        Name: Company,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The new company of the user.
<br/>Example: Acme corporation,
        ParameterName: company,
        ArgumentName: company
      },
      {
        Id: location,
        Name: Location,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The new location of the user.
<br/>Example: Berlin, Germany,
        ParameterName: location,
        ArgumentName: location
      },
      {
        Id: hireable,
        Name: Hireable,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The new hiring availability of the user.,
        ParameterName: hireable,
        ArgumentName: hireable
      },
      {
        Id: bio,
        Name: Bio,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The new short biography of the user.,
        ParameterName: bio,
        ArgumentName: bio
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update the authenticated user,
    RequestType: ,
    ResponseType: private-user,
    MethodName: Users/update-authenticatedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/update-authenticated
  },
  {
    Id: Users/list-blocked-by-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/blocks?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List users blocked by the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-blocked-by-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-blocked-by-authenticated-user
  },
  {
    Id: Users/check-blocked,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/blocks/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if a user is blocked by the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/check-blockedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/check-blocked
  },
  {
    Id: Users/block,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/blocks/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Block a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/blockAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/block
  },
  {
    Id: Users/unblock,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/blocks/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Unblock a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/unblockAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/unblock
  },
  {
    Id: Codespaces/list-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces?per_page={perPage}&page={page}&repository_id={repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List codespaces for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/list-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/list-for-authenticated-user
  },
  {
    Id: Codespaces/create-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/codespaces",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a codespace for the authenticated user,
    RequestType: ,
    ResponseType: codespace,
    MethodName: Codespaces/create-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/create-for-authenticated-user
  },
  {
    Id: Codespaces/list-secrets-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/secrets?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List secrets for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/list-secrets-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/list-secrets-for-authenticated-user
  },
  {
    Id: Codespaces/get-public-key-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/codespaces/secrets/public-key",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get public key for the authenticated user,
    RequestType: ,
    ResponseType: codespaces-user-public-key,
    MethodName: Codespaces/get-public-key-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/get-public-key-for-authenticated-user
  },
  {
    Id: Codespaces/get-secret-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a secret for the authenticated user,
    RequestType: ,
    ResponseType: codespaces-secret,
    MethodName: Codespaces/get-secret-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/get-secret-for-authenticated-user
  },
  {
    Id: Codespaces/create-or-update-secret-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: encrypted_value,
        Name: EncryptedValue,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.,
        ParameterName: encryptedValue,
        ArgumentName: encryptedValue
      },
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: ID of the key you used to encrypt the secret.,
        ParameterName: keyId,
        ArgumentName: keyId
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<object?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Create or update a secret for the authenticated user,
    RequestType: ,
    ResponseType: empty-object,
    MethodName: Codespaces/create-or-update-secret-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/create-or-update-secret-for-authenticated-user
  },
  {
    Id: Codespaces/delete-secret-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/secrets/{secretName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a secret for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/delete-secret-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/delete-secret-for-authenticated-user
  },
  {
    Id: Codespaces/list-repositories-for-secret-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/secrets/{secretName}/repositories",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List selected repositories for a user secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/list-repositories-for-secret-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/list-repositories-for-secret-for-authenticated-user
  },
  {
    Id: Codespaces/set-repositories-for-secret-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/secrets/{secretName}/repositories",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: selected_repository_ids,
        Name: SelectedRepositoryIds,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<int>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.,
        ParameterName: selectedRepositoryIds,
        ArgumentName: selectedRepositoryIds
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set selected repositories for a user secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/set-repositories-for-secret-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/set-repositories-for-secret-for-authenticated-user
  },
  {
    Id: Codespaces/add-repository-for-secret-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/secrets/{secretName}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add a selected repository to a user secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/add-repository-for-secret-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/add-repository-for-secret-for-authenticated-user
  },
  {
    Id: Codespaces/remove-repository-for-secret-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/secrets/{secretName}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: secret_name,
        Name: SecretName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: secretName,
        ArgumentName: secretName
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a selected repository from a user secret,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/remove-repository-for-secret-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/remove-repository-for-secret-for-authenticated-user
  },
  {
    Id: Codespaces/get-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/{codespaceName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: codespace_name,
        Name: CodespaceName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codespaceName,
        ArgumentName: codespaceName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a codespace for the authenticated user,
    RequestType: ,
    ResponseType: codespace,
    MethodName: Codespaces/get-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/get-for-authenticated-user
  },
  {
    Id: Codespaces/update-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/{codespaceName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: codespace_name,
        Name: CodespaceName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codespaceName,
        ArgumentName: codespaceName
      },
      {
        Id: machine,
        Name: Machine,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A valid machine to transition this codespace to.,
        ParameterName: machine,
        ArgumentName: machine
      },
      {
        Id: display_name,
        Name: DisplayName,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Display name for this codespace,
        ParameterName: displayName,
        ArgumentName: displayName
      },
      {
        Id: recent_folders,
        Name: RecentFolders,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.,
        ParameterName: recentFolders,
        ArgumentName: recentFolders
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update a codespace for the authenticated user,
    RequestType: ,
    ResponseType: codespace,
    MethodName: Codespaces/update-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/update-for-authenticated-user
  },
  {
    Id: Codespaces/delete-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/{codespaceName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: codespace_name,
        Name: CodespaceName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codespaceName,
        ArgumentName: codespaceName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a codespace for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/delete-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/delete-for-authenticated-user
  },
  {
    Id: Codespaces/export-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/{codespaceName}/exports",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: codespace_name,
        Name: CodespaceName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codespaceName,
        ArgumentName: codespaceName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Export a codespace for the authenticated user,
    RequestType: ,
    ResponseType: codespace-export-details,
    MethodName: Codespaces/export-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/export-for-authenticated-user
  },
  {
    Id: Codespaces/get-export-details-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/{codespaceName}/exports/{exportId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: codespace_name,
        Name: CodespaceName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codespaceName,
        ArgumentName: codespaceName
      },
      {
        Id: export_id,
        Name: ExportId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: exportId,
        ArgumentName: exportId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get details about a codespace export,
    RequestType: ,
    ResponseType: codespace-export-details,
    MethodName: Codespaces/get-export-details-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/get-export-details-for-authenticated-user
  },
  {
    Id: Codespaces/codespace-machines-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/{codespaceName}/machines",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: codespace_name,
        Name: CodespaceName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codespaceName,
        ArgumentName: codespaceName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List machine types for a codespace,
    RequestType: ,
    ResponseType: ,
    MethodName: Codespaces/codespace-machines-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/codespace-machines-for-authenticated-user
  },
  {
    Id: Codespaces/publish-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/{codespaceName}/publish",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: codespace_name,
        Name: CodespaceName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codespaceName,
        ArgumentName: codespaceName
      },
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A name for the new repository.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: private,
        Name: Private,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether the new repository should be private.
<br/>Default Value: false,
        ParameterName: private,
        ArgumentName: private
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a repository from an unpublished codespace,
    RequestType: ,
    ResponseType: codespace-with-full-repository,
    MethodName: Codespaces/publish-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/publish-for-authenticated-user
  },
  {
    Id: Codespaces/start-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/{codespaceName}/start",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: codespace_name,
        Name: CodespaceName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codespaceName,
        ArgumentName: codespaceName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Start a codespace for the authenticated user,
    RequestType: ,
    ResponseType: codespace,
    MethodName: Codespaces/start-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/start-for-authenticated-user
  },
  {
    Id: Codespaces/stop-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/codespaces/{codespaceName}/stop",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: codespace_name,
        Name: CodespaceName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: codespaceName,
        ArgumentName: codespaceName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Stop a codespace for the authenticated user,
    RequestType: ,
    ResponseType: codespace,
    MethodName: Codespaces/stop-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Codespaces/stop-for-authenticated-user
  },
  {
    Id: Packages/list-docker-migration-conflicting-packages-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/docker/conflicts",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get list of conflicting packages during Docker migration for authenticated-user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/list-docker-migration-conflicting-packages-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/list-docker-migration-conflicting-packages-for-authenticated-user
  },
  {
    Id: Users/set-primary-email-visibility-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/email/visibility",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Public,
            Private
          ],
          EnumValues: [
            public,
            private
          ]
        },
        IsRequired: true,
        Summary: Denotes whether an email is publicly visible.,
        ParameterName: visibility,
        ArgumentName: visibility
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Set primary email visibility for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/set-primary-email-visibility-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/set-primary-email-visibility-for-authenticated-user
  },
  {
    Id: Users/list-emails-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/emails?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List email addresses for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-emails-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-emails-for-authenticated-user
  },
  {
    Id: Users/add-email-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/emails",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add an email address for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/add-email-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/add-email-for-authenticated-user
  },
  {
    Id: Users/delete-email-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/emails",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an email address for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/delete-email-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/delete-email-for-authenticated-user
  },
  {
    Id: Users/list-followers-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/followers?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List followers of the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-followers-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-followers-for-authenticated-user
  },
  {
    Id: Users/list-followed-by-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/following?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List the people the authenticated user follows,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-followed-by-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-followed-by-authenticated-user
  },
  {
    Id: Users/check-person-is-followed-by-authenticated,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/following/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if a person is followed by the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/check-person-is-followed-by-authenticatedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/check-person-is-followed-by-authenticated
  },
  {
    Id: Users/follow,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/following/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Follow a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/followAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/follow
  },
  {
    Id: Users/unfollow,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/following/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Unfollow a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/unfollowAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/unfollow
  },
  {
    Id: Users/list-gpg-keys-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/gpg_keys?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List GPG keys for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-gpg-keys-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-gpg-keys-for-authenticated-user
  },
  {
    Id: Users/create-gpg-key-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/gpg_keys",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A descriptive name for the new key.,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: armored_public_key,
        Name: ArmoredPublicKey,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: A GPG key in ASCII-armored format.,
        ParameterName: armoredPublicKey,
        ArgumentName: armoredPublicKey
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a GPG key for the authenticated user,
    RequestType: ,
    ResponseType: gpg-key,
    MethodName: Users/create-gpg-key-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/create-gpg-key-for-authenticated-user
  },
  {
    Id: Users/get-gpg-key-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/gpg_keys/{gpgKeyId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gpg_key_id,
        Name: GpgKeyId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gpgKeyId,
        ArgumentName: gpgKeyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a GPG key for the authenticated user,
    RequestType: ,
    ResponseType: gpg-key,
    MethodName: Users/get-gpg-key-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/get-gpg-key-for-authenticated-user
  },
  {
    Id: Users/delete-gpg-key-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/gpg_keys/{gpgKeyId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: gpg_key_id,
        Name: GpgKeyId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: gpgKeyId,
        ArgumentName: gpgKeyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a GPG key for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/delete-gpg-key-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/delete-gpg-key-for-authenticated-user
  },
  {
    Id: Apps/list-installations-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/installations?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List app installations accessible to the user access token,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-installations-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-installations-for-authenticated-user
  },
  {
    Id: Apps/list-installation-repos-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/installations/{installationId}/repositories?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: installation_id,
        Name: InstallationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: installationId,
        ArgumentName: installationId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories accessible to the user access token,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-installation-repos-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-installation-repos-for-authenticated-user
  },
  {
    Id: Apps/add-repo-to-installation-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/installations/{installationId}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: installation_id,
        Name: InstallationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: installationId,
        ArgumentName: installationId
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Add a repository to an app installation,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/add-repo-to-installation-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/add-repo-to-installation-for-authenticated-user
  },
  {
    Id: Apps/remove-repo-from-installation-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/installations/{installationId}/repositories/{repositoryId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: installation_id,
        Name: InstallationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: installationId,
        ArgumentName: installationId
      },
      {
        Id: repository_id,
        Name: RepositoryId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repositoryId,
        ArgumentName: repositoryId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove a repository from an app installation,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/remove-repo-from-installation-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/remove-repo-from-installation-for-authenticated-user
  },
  {
    Id: Interactions/get-restrictions-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/interaction-limits",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get interaction restrictions for your public repositories,
    RequestType: ,
    ResponseType: ,
    MethodName: Interactions/get-restrictions-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Interactions/get-restrictions-for-authenticated-user
  },
  {
    Id: Interactions/set-restrictions-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/interaction-limits",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: limit,
        Name: Limit,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            ExistingUsers,
            ContributorsOnly,
            CollaboratorsOnly
          ],
          EnumValues: [
            existing_users,
            contributors_only,
            collaborators_only
          ]
        },
        IsRequired: true,
        Summary:
The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
<br/>Example: collaborators_only,
        ParameterName: limit,
        ArgumentName: limit
      },
      {
        Id: expiry,
        Name: Expiry,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            OneDay,
            ThreeDays,
            OneWeek,
            OneMonth,
            SixMonths
          ],
          EnumValues: [
            one_day,
            three_days,
            one_week,
            one_month,
            six_months
          ]
        },
        IsRequired: false,
        Summary:
The duration of the interaction restriction. Default: `one_day`.
<br/>Example: one_month,
        ParameterName: expiry,
        ArgumentName: expiry
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Set interaction restrictions for your public repositories,
    RequestType: InteractionLimit,
    ResponseType: interaction-limit-response,
    MethodName: Interactions/set-restrictions-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Interactions/set-restrictions-for-authenticated-user
  },
  {
    Id: Interactions/remove-restrictions-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/interaction-limits",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Remove interaction restrictions from your public repositories,
    RequestType: ,
    ResponseType: ,
    MethodName: Interactions/remove-restrictions-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Interactions/remove-restrictions-for-authenticated-user
  },
  {
    Id: Issues/list-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/issues?filter={filter}&state={state}&labels={labels}&sort={sort}&direction={direction}&since={since}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: filter,
        Name: Filter,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Assigned,
            Created,
            Mentioned,
            Subscribed,
            Repos,
            All
          ],
          EnumValues: [
            assigned,
            created,
            mentioned,
            subscribed,
            repos,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Filter.Assigned,
        Summary:
<br/>Default Value: assigned,
        ParameterName: filter,
        ArgumentName: filter
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed,
            All
          ],
          EnumValues: [
            open,
            closed,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: State.Open,
        Summary:
<br/>Default Value: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: labels,
        Name: Labels,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: labels,
        ArgumentName: labels
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated,
            Comments
          ],
          EnumValues: [
            created,
            updated,
            comments
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List user account issues assigned to the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Issues/list-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Issues/list-for-authenticated-user
  },
  {
    Id: Users/list-public-ssh-keys-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/keys?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List public SSH keys for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-public-ssh-keys-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-public-ssh-keys-for-authenticated-user
  },
  {
    Id: Users/create-public-ssh-key-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/keys",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
A descriptive name for the new key.
<br/>Example: Personal MacBook Air,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: key,
        Name: Key,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The public SSH key to add to your GitHub account.,
        ParameterName: key,
        ArgumentName: key
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a public SSH key for the authenticated user,
    RequestType: ,
    ResponseType: key,
    MethodName: Users/create-public-ssh-key-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/create-public-ssh-key-for-authenticated-user
  },
  {
    Id: Users/get-public-ssh-key-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/keys/{keyId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: keyId,
        ArgumentName: keyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a public SSH key for the authenticated user,
    RequestType: ,
    ResponseType: key,
    MethodName: Users/get-public-ssh-key-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/get-public-ssh-key-for-authenticated-user
  },
  {
    Id: Users/delete-public-ssh-key-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/keys/{keyId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: key_id,
        Name: KeyId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: keyId,
        ArgumentName: keyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a public SSH key for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/delete-public-ssh-key-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/delete-public-ssh-key-for-authenticated-user
  },
  {
    Id: Apps/list-subscriptions-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/marketplace_purchases?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List subscriptions for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-subscriptions-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-subscriptions-for-authenticated-user
  },
  {
    Id: Apps/list-subscriptions-for-authenticated-user-stubbed,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/marketplace_purchases/stubbed?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List subscriptions for the authenticated user (stubbed),
    RequestType: ,
    ResponseType: ,
    MethodName: Apps/list-subscriptions-for-authenticated-user-stubbedAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/list-subscriptions-for-authenticated-user-stubbed
  },
  {
    Id: Orgs/list-memberships-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/memberships/orgs?state={state}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Active,
            Pending
          ],
          EnumValues: [
            active,
            pending
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization memberships for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-memberships-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-memberships-for-authenticated-user
  },
  {
    Id: Orgs/get-membership-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/memberships/orgs/{org}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an organization membership for the authenticated user,
    RequestType: ,
    ResponseType: org-membership,
    MethodName: Orgs/get-membership-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/get-membership-for-authenticated-user
  },
  {
    Id: Orgs/update-membership-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/memberships/orgs/{org}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Active
          ],
          EnumValues: [
            active
          ]
        },
        IsRequired: true,
        Summary: The state that the membership should be in. Only `"active"` will be accepted.,
        ParameterName: state,
        ArgumentName: state
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Update an organization membership for the authenticated user,
    RequestType: ,
    ResponseType: org-membership,
    MethodName: Orgs/update-membership-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/update-membership-for-authenticated-user
  },
  {
    Id: Migrations/list-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/migrations?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List user migrations,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/list-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/list-for-authenticated-user
  },
  {
    Id: Migrations/start-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/migrations",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: lock_repositories,
        Name: LockRepositories,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Lock the repositories being migrated at the start of the migration
<br/>Example: true,
        ParameterName: lockRepositories,
        ArgumentName: lockRepositories
      },
      {
        Id: exclude_metadata,
        Name: ExcludeMetadata,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Indicates whether metadata should be excluded and only git source should be included for the migration.
<br/>Example: true,
        ParameterName: excludeMetadata,
        ArgumentName: excludeMetadata
      },
      {
        Id: exclude_git_data,
        Name: ExcludeGitData,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Indicates whether the repository git data should be excluded from the migration.
<br/>Example: true,
        ParameterName: excludeGitData,
        ArgumentName: excludeGitData
      },
      {
        Id: exclude_attachments,
        Name: ExcludeAttachments,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Do not include attachments in the migration
<br/>Example: true,
        ParameterName: excludeAttachments,
        ArgumentName: excludeAttachments
      },
      {
        Id: exclude_releases,
        Name: ExcludeReleases,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Do not include releases in the migration
<br/>Example: true,
        ParameterName: excludeReleases,
        ArgumentName: excludeReleases
      },
      {
        Id: exclude_owner_projects,
        Name: ExcludeOwnerProjects,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Indicates whether projects owned by the organization or users should be excluded.
<br/>Example: true,
        ParameterName: excludeOwnerProjects,
        ArgumentName: excludeOwnerProjects
      },
      {
        Id: org_metadata_only,
        Name: OrgMetadataOnly,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
<br/>Default Value: false
<br/>Example: true,
        ParameterName: orgMetadataOnly,
        ArgumentName: orgMetadataOnly
      },
      {
        Id: exclude,
        Name: Exclude,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string?>?,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Exclude attributes from the API response to improve performance
<br/>Example: [repositories],
        ParameterName: exclude,
        ArgumentName: exclude
      },
      {
        Id: repositories,
        Name: Repositories,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: ,
        ParameterName: repositories,
        ArgumentName: repositories
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Start a user migration,
    RequestType: ,
    ResponseType: migration,
    MethodName: Migrations/start-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/start-for-authenticated-user
  },
  {
    Id: Migrations/get-status-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/migrations/{migrationId}?{string.Join("&", exclude.Select(static x => $"exclude={x}"))}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: migration_id,
        Name: MigrationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: migrationId,
        ArgumentName: migrationId
      },
      {
        Id: exclude,
        Name: Exclude,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: exclude,
        ArgumentName: exclude
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a user migration status,
    RequestType: ,
    ResponseType: migration,
    MethodName: Migrations/get-status-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/get-status-for-authenticated-user
  },
  {
    Id: Migrations/get-archive-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/migrations/{migrationId}/archive",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: migration_id,
        Name: MigrationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: migrationId,
        ArgumentName: migrationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Download a user migration archive,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/get-archive-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/get-archive-for-authenticated-user
  },
  {
    Id: Migrations/delete-archive-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/migrations/{migrationId}/archive",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: migration_id,
        Name: MigrationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: migrationId,
        ArgumentName: migrationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a user migration archive,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/delete-archive-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/delete-archive-for-authenticated-user
  },
  {
    Id: Migrations/unlock-repo-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/migrations/{migrationId}/repos/{repoName}/lock",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: migration_id,
        Name: MigrationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: migrationId,
        ArgumentName: migrationId
      },
      {
        Id: repo_name,
        Name: RepoName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repoName,
        ArgumentName: repoName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Unlock a user repository,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/unlock-repo-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/unlock-repo-for-authenticated-user
  },
  {
    Id: Migrations/list-repos-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/migrations/{migrationId}/repositories?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: migration_id,
        Name: MigrationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: migrationId,
        ArgumentName: migrationId
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories for a user migration,
    RequestType: ,
    ResponseType: ,
    MethodName: Migrations/list-repos-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Migrations/list-repos-for-authenticated-user
  },
  {
    Id: Orgs/list-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/orgs?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organizations for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-for-authenticated-user
  },
  {
    Id: Packages/list-packages-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/packages?package_type={packageType}&visibility={visibility}&page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Public,
            Private,
            Internal
          ],
          EnumValues: [
            public,
            private,
            internal
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List packages for the authenticated user's namespace,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/list-packages-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/list-packages-for-authenticated-user
  },
  {
    Id: Packages/get-package-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/packages/{packageType}/{packageName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a package for the authenticated user,
    RequestType: ,
    ResponseType: package,
    MethodName: Packages/get-package-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/get-package-for-authenticated-user
  },
  {
    Id: Packages/delete-package-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/packages/{packageType}/{packageName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a package for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/delete-package-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/delete-package-for-authenticated-user
  },
  {
    Id: Packages/restore-package-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/packages/{packageType}/{packageName}/restore?token={token}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: token,
        Name: Token,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: token,
        ArgumentName: token
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Restore a package for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/restore-package-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/restore-package-for-authenticated-user
  },
  {
    Id: Packages/get-all-package-versions-for-package-owned-by-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/packages/{packageType}/{packageName}/versions?page={page}&per_page={perPage}&state={state}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Active,
            Deleted
          ],
          EnumValues: [
            active,
            deleted
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: State.Active,
        Summary:
<br/>Default Value: active,
        ParameterName: state,
        ArgumentName: state
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List package versions for a package owned by the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/get-all-package-versions-for-package-owned-by-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/get-all-package-versions-for-package-owned-by-authenticated-user
  },
  {
    Id: Packages/get-package-version-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: package_version_id,
        Name: PackageVersionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageVersionId,
        ArgumentName: packageVersionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a package version for the authenticated user,
    RequestType: ,
    ResponseType: package-version,
    MethodName: Packages/get-package-version-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/get-package-version-for-authenticated-user
  },
  {
    Id: Packages/delete-package-version-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: package_version_id,
        Name: PackageVersionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageVersionId,
        ArgumentName: packageVersionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a package version for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/delete-package-version-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/delete-package-version-for-authenticated-user
  },
  {
    Id: Packages/restore-package-version-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/packages/{packageType}/{packageName}/versions/{packageVersionId}/restore",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: package_version_id,
        Name: PackageVersionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageVersionId,
        ArgumentName: packageVersionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Restore a package version for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/restore-package-version-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/restore-package-version-for-authenticated-user
  },
  {
    Id: Projects/create-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/projects",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
Name of the project
<br/>Example: Week One Sprint,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: body,
        Name: Body,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
Body of the project
<br/>Example: This project represents the sprint of the first week in January,
        ParameterName: body,
        ArgumentName: body
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a user project,
    RequestType: ,
    ResponseType: project,
    MethodName: Projects/create-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/create-for-authenticated-user
  },
  {
    Id: Users/list-public-emails-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/public_emails?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List public email addresses for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-public-emails-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-public-emails-for-authenticated-user
  },
  {
    Id: Repos/list-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/repos?visibility={visibility}&affiliation={affiliation}&type={type}&sort={sort}&direction={direction}&per_page={perPage}&page={page}&since={since}&before={before}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Public,
            Private
          ],
          EnumValues: [
            all,
            public,
            private
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Visibility.All,
        Summary:
<br/>Default Value: all,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: affiliation,
        Name: Affiliation,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: "owner,collaborator,organization_member",
        Summary:
<br/>Default Value: owner,collaborator,organization_member,
        ParameterName: affiliation,
        ArgumentName: affiliation
      },
      {
        Id: type,
        Name: Type,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Owner,
            Public,
            Private,
            Member
          ],
          EnumValues: [
            all,
            owner,
            public,
            private,
            member
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Type.All,
        Summary:
<br/>Default Value: all,
        ParameterName: type,
        ArgumentName: type
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated,
            Pushed,
            FullName
          ],
          EnumValues: [
            created,
            updated,
            pushed,
            full_name
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.FullName,
        Summary:
<br/>Default Value: full_name,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: before,
        Name: Before,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: before,
        ArgumentName: before
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-for-authenticated-user
  },
  {
    Id: Repos/create-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/repos",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: name,
        Name: Name,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
The name of the repository.
<br/>Example: Team Environment,
        ParameterName: name,
        ArgumentName: name
      },
      {
        Id: description,
        Name: Description,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A short description of the repository.,
        ParameterName: description,
        ArgumentName: description
      },
      {
        Id: homepage,
        Name: Homepage,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: A URL with more information about the repository.,
        ParameterName: homepage,
        ArgumentName: homepage
      },
      {
        Id: private,
        Name: Private,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether the repository is private.
<br/>Default Value: false,
        ParameterName: private,
        ArgumentName: private
      },
      {
        Id: has_issues,
        Name: HasIssues,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether issues are enabled.
<br/>Default Value: true
<br/>Example: true,
        ParameterName: hasIssues,
        ArgumentName: hasIssues
      },
      {
        Id: has_projects,
        Name: HasProjects,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether projects are enabled.
<br/>Default Value: true
<br/>Example: true,
        ParameterName: hasProjects,
        ArgumentName: hasProjects
      },
      {
        Id: has_wiki,
        Name: HasWiki,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether the wiki is enabled.
<br/>Default Value: true
<br/>Example: true,
        ParameterName: hasWiki,
        ArgumentName: hasWiki
      },
      {
        Id: has_discussions,
        Name: HasDiscussions,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether discussions are enabled.
<br/>Default Value: false
<br/>Example: true,
        ParameterName: hasDiscussions,
        ArgumentName: hasDiscussions
      },
      {
        Id: team_id,
        Name: TeamId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary: The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.,
        ParameterName: teamId,
        ArgumentName: teamId
      },
      {
        Id: auto_init,
        Name: AutoInit,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether the repository is initialized with a minimal README.
<br/>Default Value: false,
        ParameterName: autoInit,
        ArgumentName: autoInit
      },
      {
        Id: gitignore_template,
        Name: GitignoreTemplate,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The desired language or platform to apply to the .gitignore.
<br/>Example: Haskell,
        ParameterName: gitignoreTemplate,
        ArgumentName: gitignoreTemplate
      },
      {
        Id: license_template,
        Name: LicenseTemplate,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
The license keyword of the open source license for this repository.
<br/>Example: mit,
        ParameterName: licenseTemplate,
        ArgumentName: licenseTemplate
      },
      {
        Id: allow_squash_merge,
        Name: AllowSquashMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether to allow squash merges for pull requests.
<br/>Default Value: true
<br/>Example: true,
        ParameterName: allowSquashMerge,
        ArgumentName: allowSquashMerge
      },
      {
        Id: allow_merge_commit,
        Name: AllowMergeCommit,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether to allow merge commits for pull requests.
<br/>Default Value: true
<br/>Example: true,
        ParameterName: allowMergeCommit,
        ArgumentName: allowMergeCommit
      },
      {
        Id: allow_rebase_merge,
        Name: AllowRebaseMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether to allow rebase merges for pull requests.
<br/>Default Value: true
<br/>Example: true,
        ParameterName: allowRebaseMerge,
        ArgumentName: allowRebaseMerge
      },
      {
        Id: allow_auto_merge,
        Name: AllowAutoMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether to allow Auto-merge to be used on pull requests.
<br/>Default Value: false
<br/>Example: false,
        ParameterName: allowAutoMerge,
        ArgumentName: allowAutoMerge
      },
      {
        Id: delete_branch_on_merge,
        Name: DeleteBranchOnMerge,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether to delete head branches when pull requests are merged
<br/>Default Value: false
<br/>Example: false,
        ParameterName: deleteBranchOnMerge,
        ArgumentName: deleteBranchOnMerge
      },
      {
        Id: squash_merge_commit_title,
        Name: SquashMergeCommitTitle,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRTITLE,
            COMMITORPRTITLE
          ],
          EnumValues: [
            PR_TITLE,
            COMMIT_OR_PR_TITLE
          ]
        },
        IsRequired: false,
        Summary:
The default value for a squash merge commit title:

- `PR_TITLE` - default to the pull request's title.
- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).,
        ParameterName: squashMergeCommitTitle,
        ArgumentName: squashMergeCommitTitle
      },
      {
        Id: squash_merge_commit_message,
        Name: SquashMergeCommitMessage,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRBODY,
            COMMITMESSAGES,
            BLANK
          ],
          EnumValues: [
            PR_BODY,
            COMMIT_MESSAGES,
            BLANK
          ]
        },
        IsRequired: false,
        Summary:
The default value for a squash merge commit message:

- `PR_BODY` - default to the pull request's body.
- `COMMIT_MESSAGES` - default to the branch's commit messages.
- `BLANK` - default to a blank commit message.,
        ParameterName: squashMergeCommitMessage,
        ArgumentName: squashMergeCommitMessage
      },
      {
        Id: merge_commit_title,
        Name: MergeCommitTitle,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRTITLE,
            MERGEMESSAGE
          ],
          EnumValues: [
            PR_TITLE,
            MERGE_MESSAGE
          ]
        },
        IsRequired: false,
        Summary:
The default value for a merge commit title.

- `PR_TITLE` - default to the pull request's title.
- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).,
        ParameterName: mergeCommitTitle,
        ArgumentName: mergeCommitTitle
      },
      {
        Id: merge_commit_message,
        Name: MergeCommitMessage,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: true,
          Properties: [
            PRBODY,
            PRTITLE,
            BLANK
          ],
          EnumValues: [
            PR_BODY,
            PR_TITLE,
            BLANK
          ]
        },
        IsRequired: false,
        Summary:
The default value for a merge commit message.

- `PR_TITLE` - default to the pull request's title.
- `PR_BODY` - default to the pull request's body.
- `BLANK` - default to a blank commit message.,
        ParameterName: mergeCommitMessage,
        ArgumentName: mergeCommitMessage
      },
      {
        Id: has_downloads,
        Name: HasDownloads,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: true,
        Summary:
Whether downloads are enabled.
<br/>Default Value: true
<br/>Example: true,
        ParameterName: hasDownloads,
        ArgumentName: hasDownloads
      },
      {
        Id: is_template,
        Name: IsTemplate,
        Type: {
          CSharpType: bool,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        DefaultValue: false,
        Summary:
Whether this repository acts as a template that can be used to generate new repositories.
<br/>Default Value: false
<br/>Example: true,
        ParameterName: isTemplate,
        ArgumentName: isTemplate
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a repository for the authenticated user,
    RequestType: ,
    ResponseType: full-repository,
    MethodName: Repos/create-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/create-for-authenticated-user
  },
  {
    Id: Repos/list-invitations-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/repository_invitations?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repository invitations for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-invitations-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-invitations-for-authenticated-user
  },
  {
    Id: Repos/accept-invitation-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/repository_invitations/{invitationId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: invitation_id,
        Name: InvitationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: invitationId,
        ArgumentName: invitationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Patch,
    Summary: Accept a repository invitation,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/accept-invitation-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/accept-invitation-for-authenticated-user
  },
  {
    Id: Repos/decline-invitation-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/repository_invitations/{invitationId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: invitation_id,
        Name: InvitationId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: invitationId,
        ArgumentName: invitationId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Decline a repository invitation,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/decline-invitation-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/decline-invitation-for-authenticated-user
  },
  {
    Id: Users/list-social-accounts-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/social_accounts?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List social accounts for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-social-accounts-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-social-accounts-for-authenticated-user
  },
  {
    Id: Users/add-social-account-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/social_accounts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: account_urls,
        Name: AccountUrls,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
Full URLs for the social media profiles to add.
<br/>Example: [],
        ParameterName: accountUrls,
        ArgumentName: accountUrls
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Add social accounts for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/add-social-account-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/add-social-account-for-authenticated-user
  },
  {
    Id: Users/delete-social-account-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/social_accounts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: account_urls,
        Name: AccountUrls,
        Type: {
          CSharpType: global::System.Collections.Generic.IList<string>,
          IsArray: true,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary:
Full URLs for the social media profiles to delete.
<br/>Example: [],
        ParameterName: accountUrls,
        ArgumentName: accountUrls
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete social accounts for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/delete-social-account-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/delete-social-account-for-authenticated-user
  },
  {
    Id: Users/list-ssh-signing-keys-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/ssh_signing_keys?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List SSH signing keys for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-ssh-signing-keys-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-ssh-signing-keys-for-authenticated-user
  },
  {
    Id: Users/create-ssh-signing-key-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/user/ssh_signing_keys",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: title,
        Name: Title,
        Type: {
          CSharpType: string?,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        Summary:
A descriptive name for the new key.
<br/>Example: Personal MacBook Air,
        ParameterName: title,
        ArgumentName: title
      },
      {
        Id: key,
        Name: Key,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        Summary: The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys).",
        ParameterName: key,
        ArgumentName: key
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Create a SSH signing key for the authenticated user,
    RequestType: ,
    ResponseType: ssh-signing-key,
    MethodName: Users/create-ssh-signing-key-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/create-ssh-signing-key-for-authenticated-user
  },
  {
    Id: Users/get-ssh-signing-key-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/ssh_signing_keys/{sshSigningKeyId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: ssh_signing_key_id,
        Name: SshSigningKeyId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: sshSigningKeyId,
        ArgumentName: sshSigningKeyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get an SSH signing key for the authenticated user,
    RequestType: ,
    ResponseType: ssh-signing-key,
    MethodName: Users/get-ssh-signing-key-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/get-ssh-signing-key-for-authenticated-user
  },
  {
    Id: Users/delete-ssh-signing-key-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/ssh_signing_keys/{sshSigningKeyId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: ssh_signing_key_id,
        Name: SshSigningKeyId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: sshSigningKeyId,
        ArgumentName: sshSigningKeyId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete an SSH signing key for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/delete-ssh-signing-key-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/delete-ssh-signing-key-for-authenticated-user
  },
  {
    Id: Activity/list-repos-starred-by-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/starred?sort={sort}&direction={direction}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories starred by the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-repos-starred-by-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-repos-starred-by-authenticated-user
  },
  {
    Id: Activity/check-repo-is-starred-by-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/starred/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if a repository is starred by the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/check-repo-is-starred-by-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/check-repo-is-starred-by-authenticated-user
  },
  {
    Id: Activity/star-repo-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/starred/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Put,
    Summary: Star a repository for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/star-repo-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/star-repo-for-authenticated-user
  },
  {
    Id: Activity/unstar-repo-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/starred/{owner}/{repo}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: owner,
        Name: Owner,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: owner,
        ArgumentName: owner
      },
      {
        Id: repo,
        Name: Repo,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: repo,
        ArgumentName: repo
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Unstar a repository for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/unstar-repo-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/unstar-repo-for-authenticated-user
  },
  {
    Id: Activity/list-watched-repos-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/subscriptions?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories watched by the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-watched-repos-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-watched-repos-for-authenticated-user
  },
  {
    Id: Teams/list-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/user/teams?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List teams for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Teams/list-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Teams/list-for-authenticated-user
  },
  {
    Id: Users/list,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users?since={since}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List users,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/listAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list
  },
  {
    Id: Users/get-by-username,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/get-by-usernameAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/get-by-username
  },
  {
    Id: Packages/list-docker-migration-conflicting-packages-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/docker/conflicts",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get list of conflicting packages during Docker migration for user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/list-docker-migration-conflicting-packages-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/list-docker-migration-conflicting-packages-for-user
  },
  {
    Id: Activity/list-events-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/events?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List events for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-events-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-events-for-authenticated-user
  },
  {
    Id: Activity/list-org-events-for-authenticated-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/events/orgs/{org}?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: org,
        Name: Org,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: org,
        ArgumentName: org
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organization events for the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-org-events-for-authenticated-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-org-events-for-authenticated-user
  },
  {
    Id: Activity/list-public-events-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/events/public?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List public events for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-public-events-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-public-events-for-user
  },
  {
    Id: Users/list-followers-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/followers?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List followers of a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-followers-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-followers-for-user
  },
  {
    Id: Users/list-following-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/following?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List the people a user follows,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-following-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-following-for-user
  },
  {
    Id: Users/check-following-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/following/{targetUser}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: target_user,
        Name: TargetUser,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: targetUser,
        ArgumentName: targetUser
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Check if a user follows another user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/check-following-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/check-following-for-user
  },
  {
    Id: Gists/list-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/gists?since={since}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: since,
        Name: Since,
        Type: {
          CSharpType: global::System.DateTime,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: since,
        ArgumentName: since
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List gists for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Gists/list-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Gists/list-for-user
  },
  {
    Id: Users/list-gpg-keys-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/gpg_keys?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List GPG keys for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-gpg-keys-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-gpg-keys-for-user
  },
  {
    Id: Users/get-context-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/hovercard?subject_type={subjectType}&subject_id={subjectId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: subject_type,
        Name: SubjectType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Organization,
            Repository,
            Issue,
            PullRequest
          ],
          EnumValues: [
            organization,
            repository,
            issue,
            pull_request
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: subjectType,
        ArgumentName: subjectType
      },
      {
        Id: subject_id,
        Name: SubjectId,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: subjectId,
        ArgumentName: subjectId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get contextual information for a user,
    RequestType: ,
    ResponseType: hovercard,
    MethodName: Users/get-context-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/get-context-for-user
  },
  {
    Id: Apps/get-user-installation,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/installation",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a user installation for the authenticated app,
    RequestType: ,
    ResponseType: installation,
    MethodName: Apps/get-user-installationAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Apps/get-user-installation
  },
  {
    Id: Users/list-public-keys-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/keys?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List public keys for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-public-keys-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-public-keys-for-user
  },
  {
    Id: Orgs/list-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/orgs?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List organizations for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Orgs/list-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Orgs/list-for-user
  },
  {
    Id: Packages/list-packages-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/packages?package_type={packageType}&visibility={visibility}&page={page}&per_page={perPage}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: visibility,
        Name: Visibility,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Public,
            Private,
            Internal
          ],
          EnumValues: [
            public,
            private,
            internal
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: visibility,
        ArgumentName: visibility
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List packages for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/list-packages-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/list-packages-for-user
  },
  {
    Id: Packages/get-package-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/packages/{packageType}/{packageName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a package for a user,
    RequestType: ,
    ResponseType: package,
    MethodName: Packages/get-package-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/get-package-for-user
  },
  {
    Id: Packages/delete-package-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/packages/{packageType}/{packageName}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete a package for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/delete-package-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/delete-package-for-user
  },
  {
    Id: Packages/restore-package-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/packages/{packageType}/{packageName}/restore?token={token}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: token,
        Name: Token,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: token,
        ArgumentName: token
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Restore a package for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/restore-package-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/restore-package-for-user
  },
  {
    Id: Packages/get-all-package-versions-for-package-owned-by-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/packages/{packageType}/{packageName}/versions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List package versions for a package owned by a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/get-all-package-versions-for-package-owned-by-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/get-all-package-versions-for-package-owned-by-user
  },
  {
    Id: Packages/get-package-version-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: package_version_id,
        Name: PackageVersionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageVersionId,
        ArgumentName: packageVersionId
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get a package version for a user,
    RequestType: ,
    ResponseType: package-version,
    MethodName: Packages/get-package-version-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/get-package-version-for-user
  },
  {
    Id: Packages/delete-package-version-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: package_version_id,
        Name: PackageVersionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageVersionId,
        ArgumentName: packageVersionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Delete,
    Summary: Delete package version for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/delete-package-version-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/delete-package-version-for-user
  },
  {
    Id: Packages/restore-package-version-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/packages/{packageType}/{packageName}/versions/{packageVersionId}/restore",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: package_type,
        Name: PackageType,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Npm,
            Maven,
            Rubygems,
            Docker,
            Nuget,
            Container
          ],
          EnumValues: [
            npm,
            maven,
            rubygems,
            docker,
            nuget,
            container
          ]
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageType,
        ArgumentName: packageType
      },
      {
        Id: package_name,
        Name: PackageName,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageName,
        ArgumentName: packageName
      },
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: package_version_id,
        Name: PackageVersionId,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: packageVersionId,
        ArgumentName: packageVersionId
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    HttpMethod: Post,
    Summary: Restore package version for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Packages/restore-package-version-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Packages/restore-package-version-for-user
  },
  {
    Id: Projects/list-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/projects?state={state}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: state,
        Name: State,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Open,
            Closed,
            All
          ],
          EnumValues: [
            open,
            closed,
            all
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: State.Open,
        Summary:
<br/>Default Value: open,
        ParameterName: state,
        ArgumentName: state
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List user projects,
    RequestType: ,
    ResponseType: ,
    MethodName: Projects/list-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Projects/list-for-user
  },
  {
    Id: Activity/list-received-events-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/received_events?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List events received by the authenticated user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-received-events-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-received-events-for-user
  },
  {
    Id: Activity/list-received-public-events-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/received_events/public?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List public events received by a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-received-public-events-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-received-public-events-for-user
  },
  {
    Id: Repos/list-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/repos?type={type}&sort={sort}&direction={direction}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: type,
        Name: Type,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            All,
            Owner,
            Member
          ],
          EnumValues: [
            all,
            owner,
            member
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Type.Owner,
        Summary:
<br/>Default Value: owner,
        ParameterName: type,
        ArgumentName: type
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated,
            Pushed,
            FullName
          ],
          EnumValues: [
            created,
            updated,
            pushed,
            full_name
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.FullName,
        Summary:
<br/>Default Value: full_name,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        Summary: ,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Repos/list-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Repos/list-for-user
  },
  {
    Id: Billing/get-github-actions-billing-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/settings/billing/actions",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get GitHub Actions billing for a user,
    RequestType: ,
    ResponseType: actions-billing-usage,
    MethodName: Billing/get-github-actions-billing-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Billing/get-github-actions-billing-user
  },
  {
    Id: Billing/get-github-packages-billing-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/settings/billing/packages",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get GitHub Packages billing for a user,
    RequestType: ,
    ResponseType: packages-billing-usage,
    MethodName: Billing/get-github-packages-billing-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Billing/get-github-packages-billing-user
  },
  {
    Id: Billing/get-shared-storage-billing-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/settings/billing/shared-storage",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get shared storage billing for a user,
    RequestType: ,
    ResponseType: combined-billing-usage,
    MethodName: Billing/get-shared-storage-billing-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Billing/get-shared-storage-billing-user
  },
  {
    Id: Users/list-social-accounts-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/social_accounts?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List social accounts for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-social-accounts-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-social-accounts-for-user
  },
  {
    Id: Users/list-ssh-signing-keys-for-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/ssh_signing_keys?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List SSH signing keys for a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Users/list-ssh-signing-keys-for-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Users/list-ssh-signing-keys-for-user
  },
  {
    Id: Activity/list-repos-starred-by-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/starred?sort={sort}&direction={direction}&per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: sort,
        Name: Sort,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Created,
            Updated
          ],
          EnumValues: [
            created,
            updated
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Sort.Created,
        Summary:
<br/>Default Value: created,
        ParameterName: sort,
        ArgumentName: sort
      },
      {
        Id: direction,
        Name: Direction,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: true,
          Properties: [
            Asc,
            Desc
          ],
          EnumValues: [
            asc,
            desc
          ]
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: Direction.Desc,
        Summary:
<br/>Default Value: desc,
        ParameterName: direction,
        ArgumentName: direction
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories starred by a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-repos-starred-by-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-repos-starred-by-user
  },
  {
    Id: Activity/list-repos-watched-by-user,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: $"/users/{username}/subscriptions?per_page={perPage}&page={page}",
    AuthorizationScheme: ,
    Properties: [
      {
        Id: username,
        Name: Username,
        Type: {
          CSharpType: string,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: true,
        ParameterLocation: Path,
        ParameterStyle: Simple,
        ParameterExplode: false,
        Summary: ,
        ParameterName: username,
        ArgumentName: username
      },
      {
        Id: per_page,
        Name: PerPage,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 30,
        Summary:
<br/>Default Value: 30,
        ParameterName: perPage,
        ArgumentName: perPage
      },
      {
        Id: page,
        Name: Page,
        Type: {
          CSharpType: int,
          IsArray: false,
          IsEnum: false,
          Properties: null,
          EnumValues: null
        },
        IsRequired: false,
        ParameterLocation: Query,
        ParameterStyle: Form,
        ParameterExplode: true,
        DefaultValue: 1,
        Summary:
<br/>Default Value: 1,
        ParameterName: page,
        ArgumentName: page
      }
    ],
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: List repositories watched by a user,
    RequestType: ,
    ResponseType: ,
    MethodName: Activity/list-repos-watched-by-userAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Activity/list-repos-watched-by-user
  },
  {
    Id: Meta/get-all-versions,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/versions",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get all API versions,
    RequestType: ,
    ResponseType: ,
    MethodName: Meta/get-all-versionsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Meta/get-all-versions
  },
  {
    Id: Meta/get-zen,
    Namespace: G,
    ClassName: Api,
    BaseUrl: ,
    Stream: false,
    Path: "/zen",
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: Get the Zen of GitHub,
    RequestType: ,
    ResponseType: ,
    MethodName: Meta/get-zenAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Meta/get-zen
  },
  {
    Id: Constructors,
    Namespace: G,
    ClassName: Api,
    BaseUrl: https://api.github.com,
    Stream: false,
    Path: ,
    AuthorizationScheme: ,
    Properties: null,
    TargetFramework: netstandard2.0,
    JsonSerializerContext: ,
    Summary: ,
    RequestType: ,
    ResponseType: ,
    MethodName: ConstructorsAsync,
    FileNameWithoutExtension: G.Api.EndPoints.Constructors
  }
]